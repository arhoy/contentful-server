{
  "contentTypes": [
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "person",
        "type": "ContentType",
        "createdAt": "2019-04-17T00:55:59.399Z",
        "updatedAt": "2019-04-17T00:56:06.109Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 1,
        "publishedAt": "2019-04-17T00:56:06.109Z",
        "firstPublishedAt": "2019-04-17T00:56:06.109Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 2,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "displayField": "name",
      "name": "Person",
      "description": "",
      "fields": [
        {
          "id": "name",
          "name": "Name",
          "type": "Symbol",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "title",
          "name": "Title",
          "type": "Symbol",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "company",
          "name": "Company",
          "type": "Symbol",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "shortBio",
          "name": "Short Bio",
          "type": "Text",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "email",
          "name": "Email",
          "type": "Symbol",
          "localized": false,
          "required": false,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "phone",
          "name": "Phone",
          "type": "Symbol",
          "localized": false,
          "required": false,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "facebook",
          "name": "Facebook",
          "type": "Symbol",
          "localized": false,
          "required": false,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "twitter",
          "name": "Twitter",
          "type": "Symbol",
          "localized": false,
          "required": false,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "github",
          "name": "Github",
          "type": "Symbol",
          "localized": false,
          "required": false,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "image",
          "name": "Image",
          "type": "Link",
          "localized": false,
          "required": false,
          "validations": [
          ],
          "disabled": false,
          "omitted": false,
          "linkType": "Asset"
        }
      ]
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "blogPost",
        "type": "ContentType",
        "createdAt": "2019-04-17T00:56:02.404Z",
        "updatedAt": "2019-07-20T21:12:53.983Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 21,
        "publishedAt": "2019-07-20T21:12:53.983Z",
        "firstPublishedAt": "2019-04-17T00:56:06.657Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 11,
        "version": 22,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "displayField": "title",
      "name": "Blog Post",
      "description": "",
      "fields": [
        {
          "id": "title",
          "name": "Title",
          "type": "Symbol",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "slug",
          "name": "Slug",
          "type": "Symbol",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "heroImage",
          "name": "Hero Image",
          "type": "Link",
          "localized": false,
          "required": true,
          "validations": [
            {
              "assetFileSize": {
                "min": 10240,
                "max": 204800
              },
              "message": "Uploaded image must be between 10 and 200KB"
            }
          ],
          "disabled": false,
          "omitted": false,
          "linkType": "Asset"
        },
        {
          "id": "description",
          "name": "Description",
          "type": "Text",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "bodyRichText",
          "name": "Body Rich Text",
          "type": "RichText",
          "localized": false,
          "required": false,
          "validations": [
            {
              "nodes": {
              }
            }
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "author",
          "name": "Author",
          "type": "Link",
          "localized": false,
          "required": false,
          "validations": [
            {
              "linkContentType": [
                "person"
              ]
            }
          ],
          "disabled": false,
          "omitted": false,
          "linkType": "Entry"
        },
        {
          "id": "publishDate",
          "name": "Publish Date",
          "type": "Date",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "tags",
          "name": "Tags",
          "type": "Array",
          "localized": false,
          "required": false,
          "validations": [
          ],
          "disabled": false,
          "omitted": false,
          "items": {
            "type": "Symbol",
            "validations": [
              {
                "in": [
                  "general",
                  "javascript",
                  "static-sites",
                  "react",
                  "sql",
                  "redux",
                  "python",
                  "full-stack",
                  "data analysis",
                  "automation",
                  "mongodb",
                  "express",
                  "mongoose",
                  "es6",
                  "excel",
                  "nodejs",
                  "jobs",
                  "web development",
                  "personal development",
                  "opinion",
                  "software",
                  "tech",
                  "actuarial science",
                  "politics"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "learnReactModules",
        "type": "ContentType",
        "createdAt": "2019-04-26T20:46:56.110Z",
        "updatedAt": "2019-04-26T20:46:56.582Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 1,
        "publishedAt": "2019-04-26T20:46:56.582Z",
        "firstPublishedAt": "2019-04-26T20:46:56.582Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 2,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "displayField": null,
      "name": "Custom RTF Heading and Sub Headings",
      "description": "This is a test to see if I can create micro content",
      "fields": [
        {
          "id": "header1",
          "name": "Header 1",
          "type": "RichText",
          "localized": true,
          "required": true,
          "validations": [
            {
              "size": {
                "min": 2,
                "max": 20
              },
              "message": "Character count must be between 2 and 20 Characters"
            },
            {
              "nodes": {
              }
            },
            {
              "enabledMarks": [
              ],
              "message": "Marks are not allowed"
            },
            {
              "enabledNodeTypes": [
                "heading-1"
              ],
              "message": "Only heading 1 nodes are allowed"
            }
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "header2",
          "name": "Header 2",
          "type": "RichText",
          "localized": false,
          "required": true,
          "validations": [
            {
              "size": {
                "min": 10,
                "max": 40
              },
              "message": "The Header 2 must be between 10 and 40 characters"
            },
            {
              "nodes": {
              }
            },
            {
              "enabledMarks": [
              ],
              "message": "Marks are not allowed"
            },
            {
              "enabledNodeTypes": [
                "heading-2"
              ],
              "message": "Only heading 2 nodes are allowed"
            }
          ],
          "disabled": false,
          "omitted": false
        }
      ]
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "javascriptPosts",
        "type": "ContentType",
        "createdAt": "2019-05-20T04:41:00.971Z",
        "updatedAt": "2019-07-03T17:32:42.019Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 7,
        "publishedAt": "2019-07-03T17:32:42.019Z",
        "firstPublishedAt": "2019-05-20T04:41:01.498Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 4,
        "version": 8,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "displayField": "title",
      "name": "JavascriptPosts",
      "description": "This is the content model for all things javascript related",
      "fields": [
        {
          "id": "title",
          "name": "Title",
          "type": "Symbol",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "slug",
          "name": "Slug",
          "type": "Symbol",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "heroImage",
          "name": "Hero Image",
          "type": "Link",
          "localized": false,
          "required": true,
          "validations": [
            {
              "assetFileSize": {
                "min": 15360,
                "max": 204800
              },
              "message": "Uploaded image must be between 15 and 200KB"
            }
          ],
          "disabled": false,
          "omitted": false,
          "linkType": "Asset"
        },
        {
          "id": "description",
          "name": "Description",
          "type": "Text",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "bodyRichText",
          "name": "Body Rich Text",
          "type": "RichText",
          "localized": false,
          "required": false,
          "validations": [
            {
              "nodes": {
              }
            }
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "author",
          "name": "Author",
          "type": "Link",
          "localized": false,
          "required": false,
          "validations": [
            {
              "linkContentType": [
                "person"
              ]
            }
          ],
          "disabled": false,
          "omitted": false,
          "linkType": "Entry"
        },
        {
          "id": "publishDate",
          "name": "Publish Date",
          "type": "Date",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "tags",
          "name": "Tags",
          "type": "Array",
          "localized": false,
          "required": false,
          "validations": [
          ],
          "disabled": false,
          "omitted": false,
          "items": {
            "type": "Symbol",
            "validations": [
              {
                "in": [
                  "general",
                  "javascript",
                  "static-sites",
                  "full-stack",
                  "es6",
                  "nodejs",
                  "web development",
                  "software",
                  "tech",
                  "arrow functions",
                  "destructuring",
                  "async/await",
                  "promises",
                  "template strings",
                  "maps"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "pythonPosts",
        "type": "ContentType",
        "createdAt": "2019-05-20T05:03:53.351Z",
        "updatedAt": "2019-07-03T17:33:25.490Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 9,
        "publishedAt": "2019-07-03T17:33:25.490Z",
        "firstPublishedAt": "2019-05-20T05:03:53.745Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 5,
        "version": 10,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "displayField": "title",
      "name": "Python Posts",
      "description": "This is the content model for all things python related",
      "fields": [
        {
          "id": "title",
          "name": "Title",
          "type": "Symbol",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "slug",
          "name": "Slug",
          "type": "Symbol",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "heroImage",
          "name": "Hero Image",
          "type": "Link",
          "localized": false,
          "required": true,
          "validations": [
            {
              "assetFileSize": {
                "min": 15360,
                "max": 204800
              },
              "message": "Uploaded image must be between 15 and 200KB"
            }
          ],
          "disabled": false,
          "omitted": false,
          "linkType": "Asset"
        },
        {
          "id": "description",
          "name": "Description",
          "type": "Text",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "bodyRichText",
          "name": "Body Rich Text",
          "type": "RichText",
          "localized": false,
          "required": false,
          "validations": [
            {
              "nodes": {
              }
            }
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "author",
          "name": "Author",
          "type": "Link",
          "localized": false,
          "required": false,
          "validations": [
            {
              "linkContentType": [
                "person"
              ]
            }
          ],
          "disabled": false,
          "omitted": false,
          "linkType": "Entry"
        },
        {
          "id": "publishDate",
          "name": "Publish Date",
          "type": "Date",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "tags",
          "name": "Tags",
          "type": "Array",
          "localized": false,
          "required": false,
          "validations": [
          ],
          "disabled": false,
          "omitted": false,
          "items": {
            "type": "Symbol",
            "validations": [
              {
                "in": [
                  "python",
                  "data analysis",
                  "web development",
                  "software",
                  "data science",
                  "artificial intelligence",
                  "machine learning",
                  "django"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "expressPosts",
        "type": "ContentType",
        "createdAt": "2019-06-20T23:21:05.831Z",
        "updatedAt": "2019-06-21T00:02:58.075Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 3,
        "publishedAt": "2019-06-21T00:02:58.075Z",
        "firstPublishedAt": "2019-06-20T23:21:06.177Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 4,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "displayField": "title",
      "name": "ExpressPosts",
      "description": "This is the content model for all things ExpressJs related",
      "fields": [
        {
          "id": "title",
          "name": "Title",
          "type": "Symbol",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "slug",
          "name": "Slug",
          "type": "Symbol",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "heroImage",
          "name": "Hero Image",
          "type": "Link",
          "localized": false,
          "required": true,
          "validations": [
            {
              "assetFileSize": {
                "min": 15360,
                "max": 204800
              },
              "message": "Uploaded image must be between 15 and 200KB"
            }
          ],
          "disabled": false,
          "omitted": false,
          "linkType": "Asset"
        },
        {
          "id": "description",
          "name": "Description",
          "type": "Text",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "bodyRichText",
          "name": "Body Rich Text",
          "type": "RichText",
          "localized": false,
          "required": false,
          "validations": [
            {
              "nodes": {
              }
            }
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "author",
          "name": "Author",
          "type": "Link",
          "localized": false,
          "required": false,
          "validations": [
            {
              "linkContentType": [
                "person"
              ]
            }
          ],
          "disabled": false,
          "omitted": false,
          "linkType": "Entry"
        },
        {
          "id": "publishDate",
          "name": "Publish Date",
          "type": "Date",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "tags",
          "name": "Tags",
          "type": "Array",
          "localized": false,
          "required": false,
          "validations": [
          ],
          "disabled": false,
          "omitted": false,
          "items": {
            "type": "Symbol",
            "validations": [
              {
                "in": [
                  "express",
                  "express-validator",
                  "express router",
                  "crud operations",
                  "rest api"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "mongoDb",
        "type": "ContentType",
        "createdAt": "2019-06-20T23:35:21.342Z",
        "updatedAt": "2019-06-20T23:58:08.846Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 3,
        "publishedAt": "2019-06-20T23:58:08.846Z",
        "firstPublishedAt": "2019-06-20T23:35:21.677Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 4,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "displayField": "title",
      "name": "Mongo and Mongoose",
      "description": "This is the content model for all things Mongo and Mongoose related",
      "fields": [
        {
          "id": "title",
          "name": "Title",
          "type": "Symbol",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "slug",
          "name": "Slug",
          "type": "Symbol",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "heroImage",
          "name": "Hero Image",
          "type": "Link",
          "localized": false,
          "required": true,
          "validations": [
            {
              "assetFileSize": {
                "min": 15360,
                "max": 204800
              },
              "message": "Uploaded image must be between 15 and 200KB"
            }
          ],
          "disabled": false,
          "omitted": false,
          "linkType": "Asset"
        },
        {
          "id": "description",
          "name": "Description",
          "type": "Text",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "bodyRichText",
          "name": "Body Rich Text",
          "type": "RichText",
          "localized": false,
          "required": false,
          "validations": [
            {
              "nodes": {
              }
            }
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "author",
          "name": "Author",
          "type": "Link",
          "localized": false,
          "required": false,
          "validations": [
            {
              "linkContentType": [
                "person"
              ]
            }
          ],
          "disabled": false,
          "omitted": false,
          "linkType": "Entry"
        },
        {
          "id": "publishDate",
          "name": "Publish Date",
          "type": "Date",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "tags",
          "name": "Tags",
          "type": "Array",
          "localized": false,
          "required": false,
          "validations": [
          ],
          "disabled": false,
          "omitted": false,
          "items": {
            "type": "Symbol",
            "validations": [
              {
                "in": [
                  "mongodb",
                  "mongoose",
                  "Schema",
                  "creating a model",
                  "connecting to the database",
                  "Mongo Atlas",
                  "setting up environment variables",
                  "populating data",
                  "Schema Types"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "reactPosts",
        "type": "ContentType",
        "createdAt": "2019-06-26T01:21:13.941Z",
        "updatedAt": "2019-06-26T01:25:19.416Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 3,
        "publishedAt": "2019-06-26T01:25:19.416Z",
        "firstPublishedAt": "2019-06-26T01:21:14.278Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 4,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "displayField": "title",
      "name": "ReactPosts",
      "description": "This is the content model for all things React related",
      "fields": [
        {
          "id": "title",
          "name": "Title",
          "type": "Symbol",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "slug",
          "name": "Slug",
          "type": "Symbol",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "heroImage",
          "name": "Hero Image",
          "type": "Link",
          "localized": false,
          "required": true,
          "validations": [
            {
              "assetFileSize": {
                "min": 15360,
                "max": 204800
              },
              "message": "Uploaded image must be between 15 and 200KB"
            }
          ],
          "disabled": false,
          "omitted": false,
          "linkType": "Asset"
        },
        {
          "id": "description",
          "name": "Description",
          "type": "Text",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "bodyRichText",
          "name": "Body Rich Text",
          "type": "RichText",
          "localized": false,
          "required": false,
          "validations": [
            {
              "nodes": {
              }
            }
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "author",
          "name": "Author",
          "type": "Link",
          "localized": false,
          "required": false,
          "validations": [
            {
              "linkContentType": [
                "person"
              ]
            }
          ],
          "disabled": false,
          "omitted": false,
          "linkType": "Entry"
        },
        {
          "id": "publishDate",
          "name": "Publish Date",
          "type": "Date",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "tags",
          "name": "Tags",
          "type": "Array",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false,
          "items": {
            "type": "Symbol",
            "validations": [
              {
                "in": [
                  "react",
                  "redux",
                  "es6",
                  "nodejs",
                  "web development",
                  "react hooks",
                  "react intro",
                  "intermediate react",
                  "advanced react",
                  "react tutorial",
                  "react state",
                  "react props",
                  "react forms"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "gatsbyPosts",
        "type": "ContentType",
        "createdAt": "2019-10-05T20:22:40.197Z",
        "updatedAt": "2019-10-05T20:22:40.539Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 1,
        "publishedAt": "2019-10-05T20:22:40.539Z",
        "firstPublishedAt": "2019-10-05T20:22:40.539Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 2,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "displayField": "title",
      "name": "GatsbyPosts",
      "description": "This is the content model for all things Gatsby related",
      "fields": [
        {
          "id": "title",
          "name": "Title",
          "type": "Symbol",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "slug",
          "name": "Slug",
          "type": "Symbol",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "heroImage",
          "name": "Hero Image",
          "type": "Link",
          "localized": false,
          "required": true,
          "validations": [
            {
              "assetFileSize": {
                "min": 15360,
                "max": 204800
              },
              "message": "Uploaded image must be between 15 and 200KB"
            }
          ],
          "disabled": false,
          "omitted": false,
          "linkType": "Asset"
        },
        {
          "id": "description",
          "name": "Description",
          "type": "Text",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "bodyRichText",
          "name": "Body Rich Text",
          "type": "RichText",
          "localized": false,
          "required": false,
          "validations": [
            {
              "nodes": {
              }
            }
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "author",
          "name": "Author",
          "type": "Link",
          "localized": false,
          "required": false,
          "validations": [
            {
              "linkContentType": [
                "person"
              ]
            }
          ],
          "disabled": false,
          "omitted": false,
          "linkType": "Entry"
        },
        {
          "id": "publishDate",
          "name": "Publish Date",
          "type": "Date",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "tags",
          "name": "Tags",
          "type": "Array",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false,
          "items": {
            "type": "Symbol",
            "validations": [
              {
                "in": [
                  "react",
                  "redux",
                  "es6",
                  "nodejs",
                  "web development",
                  "react hooks",
                  "react intro",
                  "intermediate react",
                  "advanced react",
                  "react tutorial",
                  "react state",
                  "react props",
                  "react forms"
                ]
              }
            ]
          }
        }
      ]
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "alexQuasarArticles",
        "type": "ContentType",
        "createdAt": "2019-10-08T19:05:15.926Z",
        "updatedAt": "2019-10-23T01:26:14.234Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 17,
        "publishedAt": "2019-10-23T01:26:14.234Z",
        "firstPublishedAt": "2019-10-08T19:05:16.266Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 9,
        "version": 18,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "displayField": "title",
      "name": "AlexQuasarArticles",
      "description": "This is all the articles I want to appear on AlexQuasar.com",
      "fields": [
        {
          "id": "title",
          "name": "Title",
          "type": "Symbol",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "slug",
          "name": "Slug",
          "type": "Symbol",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "heroImage",
          "name": "Hero Image",
          "type": "Link",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false,
          "linkType": "Asset"
        },
        {
          "id": "description",
          "name": "Description",
          "type": "Text",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "bodyRichText",
          "name": "Body Rich Text",
          "type": "RichText",
          "localized": false,
          "required": true,
          "validations": [
            {
              "nodes": {
              }
            }
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "author",
          "name": "Author",
          "type": "Link",
          "localized": false,
          "required": true,
          "validations": [
            {
              "linkContentType": [
                "person"
              ]
            }
          ],
          "disabled": false,
          "omitted": false,
          "linkType": "Entry"
        },
        {
          "id": "publishDate",
          "name": "Publish Date",
          "type": "Date",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "tags",
          "name": "Tags",
          "type": "Array",
          "localized": false,
          "required": true,
          "validations": [
          ],
          "disabled": false,
          "omitted": false,
          "items": {
            "type": "Symbol",
            "validations": [
              {
                "regexp": {
                  "pattern": "^[a-z0-9_\\-\\s]+$",
                  "flags": null
                },
                "message": "must be all lower case"
              }
            ]
          }
        },
        {
          "id": "popular",
          "name": "Popular",
          "type": "Boolean",
          "localized": false,
          "required": false,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "trending",
          "name": "Trending",
          "type": "Boolean",
          "localized": false,
          "required": false,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "new",
          "name": "New",
          "type": "Boolean",
          "localized": false,
          "required": false,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        }
      ]
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "realtorProperties",
        "type": "ContentType",
        "createdAt": "2020-04-22T18:22:44.152Z",
        "updatedAt": "2020-04-22T18:22:44.525Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 1,
        "publishedAt": "2020-04-22T18:22:44.525Z",
        "firstPublishedAt": "2020-04-22T18:22:44.525Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 2,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "displayField": "address",
      "name": "Realtor Properties",
      "description": "",
      "fields": [
        {
          "id": "images",
          "name": "images",
          "type": "Array",
          "localized": false,
          "required": false,
          "validations": [
          ],
          "disabled": false,
          "omitted": false,
          "items": {
            "type": "Link",
            "validations": [
            ],
            "linkType": "Asset"
          }
        },
        {
          "id": "address",
          "name": "address",
          "type": "Symbol",
          "localized": false,
          "required": false,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "city",
          "name": "city",
          "type": "Symbol",
          "localized": false,
          "required": false,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        },
        {
          "id": "description",
          "name": "description",
          "type": "RichText",
          "localized": false,
          "required": false,
          "validations": [
          ],
          "disabled": false,
          "omitted": false
        }
      ]
    }
  ],
  "editorInterfaces": [
    {
      "sys": {
        "id": "default",
        "type": "EditorInterface",
        "space": {
          "sys": {
            "id": "rhk3uw4rws0r",
            "type": "Link",
            "linkType": "Space"
          }
        },
        "version": 3,
        "createdAt": "2019-04-17T00:56:06.241Z",
        "createdBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "updatedAt": "2020-04-05T04:40:07.287Z",
        "updatedBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "contentType": {
          "sys": {
            "id": "person",
            "type": "Link",
            "linkType": "ContentType"
          }
        },
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        }
      },
      "sidebar": [
        {
          "settings": {
          },
          "widgetId": "1sNIcp5OG2ppXoBwjRvDE2",
          "widgetNamespace": "extension"
        },
        {
          "settings": {
          },
          "widgetId": "publication-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "content-preview-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "incoming-links-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "translation-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "versions-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "users-widget",
          "widgetNamespace": "sidebar-builtin"
        }
      ],
      "controls": [
        {
          "fieldId": "name",
          "widgetId": "singleLine"
        },
        {
          "fieldId": "title",
          "widgetId": "singleLine"
        },
        {
          "fieldId": "company",
          "widgetId": "singleLine"
        },
        {
          "fieldId": "shortBio",
          "widgetId": "markdown"
        },
        {
          "fieldId": "email",
          "widgetId": "singleLine"
        },
        {
          "fieldId": "phone",
          "widgetId": "singleLine"
        },
        {
          "fieldId": "facebook",
          "widgetId": "singleLine"
        },
        {
          "fieldId": "twitter",
          "widgetId": "singleLine"
        },
        {
          "fieldId": "github",
          "widgetId": "singleLine"
        },
        {
          "fieldId": "image",
          "widgetId": "assetLinkEditor"
        }
      ]
    },
    {
      "sys": {
        "id": "default",
        "type": "EditorInterface",
        "space": {
          "sys": {
            "id": "rhk3uw4rws0r",
            "type": "Link",
            "linkType": "Space"
          }
        },
        "version": 23,
        "createdAt": "2019-04-17T00:56:06.878Z",
        "createdBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "updatedAt": "2020-04-05T04:40:07.254Z",
        "updatedBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "contentType": {
          "sys": {
            "id": "blogPost",
            "type": "Link",
            "linkType": "ContentType"
          }
        },
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        }
      },
      "sidebar": [
        {
          "settings": {
          },
          "widgetId": "1sNIcp5OG2ppXoBwjRvDE2",
          "widgetNamespace": "extension"
        },
        {
          "settings": {
          },
          "widgetId": "publication-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "content-preview-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "incoming-links-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "translation-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "versions-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "users-widget",
          "widgetNamespace": "sidebar-builtin"
        }
      ],
      "controls": [
        {
          "fieldId": "title",
          "widgetId": "singleLine",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "slug",
          "widgetId": "slugEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "heroImage",
          "widgetId": "assetLinkEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "description",
          "widgetId": "markdown",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "bodyRichText",
          "widgetId": "richTextEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "author",
          "widgetId": "entryLinkEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "publishDate",
          "settings": {
            "ampm": "24",
            "format": "timeZ"
          },
          "widgetId": "datePicker",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "tags",
          "widgetId": "tagEditor",
          "widgetNamespace": "builtin"
        }
      ]
    },
    {
      "sys": {
        "id": "default",
        "type": "EditorInterface",
        "space": {
          "sys": {
            "id": "rhk3uw4rws0r",
            "type": "Link",
            "linkType": "Space"
          }
        },
        "version": 3,
        "createdAt": "2019-04-26T20:46:56.741Z",
        "createdBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "updatedAt": "2020-04-05T04:40:07.268Z",
        "updatedBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "contentType": {
          "sys": {
            "id": "learnReactModules",
            "type": "Link",
            "linkType": "ContentType"
          }
        },
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        }
      },
      "sidebar": [
        {
          "settings": {
          },
          "widgetId": "1sNIcp5OG2ppXoBwjRvDE2",
          "widgetNamespace": "extension"
        },
        {
          "settings": {
          },
          "widgetId": "publication-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "content-preview-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "incoming-links-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "translation-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "versions-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "users-widget",
          "widgetNamespace": "sidebar-builtin"
        }
      ],
      "controls": [
        {
          "fieldId": "header1",
          "widgetId": "richTextEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "header2",
          "widgetId": "richTextEditor",
          "widgetNamespace": "builtin"
        }
      ]
    },
    {
      "sys": {
        "id": "default",
        "type": "EditorInterface",
        "space": {
          "sys": {
            "id": "rhk3uw4rws0r",
            "type": "Link",
            "linkType": "Space"
          }
        },
        "version": 9,
        "createdAt": "2019-05-20T04:41:01.646Z",
        "createdBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "updatedAt": "2020-04-05T04:40:07.340Z",
        "updatedBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "contentType": {
          "sys": {
            "id": "javascriptPosts",
            "type": "Link",
            "linkType": "ContentType"
          }
        },
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        }
      },
      "sidebar": [
        {
          "settings": {
          },
          "widgetId": "1sNIcp5OG2ppXoBwjRvDE2",
          "widgetNamespace": "extension"
        },
        {
          "settings": {
          },
          "widgetId": "publication-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "content-preview-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "incoming-links-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "translation-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "versions-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "users-widget",
          "widgetNamespace": "sidebar-builtin"
        }
      ],
      "controls": [
        {
          "fieldId": "title",
          "widgetId": "singleLine",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "slug",
          "widgetId": "slugEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "heroImage",
          "widgetId": "assetLinkEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "description",
          "widgetId": "markdown",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "bodyRichText",
          "widgetId": "richTextEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "author",
          "widgetId": "entryLinkEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "publishDate",
          "settings": {
            "ampm": "24",
            "format": "timeZ"
          },
          "widgetId": "datePicker",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "tags",
          "widgetId": "tagEditor",
          "widgetNamespace": "builtin"
        }
      ]
    },
    {
      "sys": {
        "id": "default",
        "type": "EditorInterface",
        "space": {
          "sys": {
            "id": "rhk3uw4rws0r",
            "type": "Link",
            "linkType": "Space"
          }
        },
        "version": 11,
        "createdAt": "2019-05-20T05:03:54.227Z",
        "createdBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "updatedAt": "2020-04-05T04:40:07.402Z",
        "updatedBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "contentType": {
          "sys": {
            "id": "pythonPosts",
            "type": "Link",
            "linkType": "ContentType"
          }
        },
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        }
      },
      "sidebar": [
        {
          "settings": {
          },
          "widgetId": "1sNIcp5OG2ppXoBwjRvDE2",
          "widgetNamespace": "extension"
        },
        {
          "settings": {
          },
          "widgetId": "publication-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "content-preview-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "incoming-links-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "translation-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "versions-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "users-widget",
          "widgetNamespace": "sidebar-builtin"
        }
      ],
      "controls": [
        {
          "fieldId": "title",
          "widgetId": "singleLine",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "slug",
          "widgetId": "slugEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "heroImage",
          "widgetId": "assetLinkEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "description",
          "widgetId": "markdown",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "bodyRichText",
          "widgetId": "richTextEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "author",
          "widgetId": "entryLinkEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "publishDate",
          "settings": {
            "ampm": "24",
            "format": "timeZ"
          },
          "widgetId": "datePicker",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "tags",
          "widgetId": "tagEditor",
          "widgetNamespace": "builtin"
        }
      ]
    },
    {
      "sys": {
        "id": "default",
        "type": "EditorInterface",
        "space": {
          "sys": {
            "id": "rhk3uw4rws0r",
            "type": "Link",
            "linkType": "Space"
          }
        },
        "version": 5,
        "createdAt": "2019-06-20T23:21:06.378Z",
        "createdBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "updatedAt": "2020-04-05T04:40:07.283Z",
        "updatedBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "contentType": {
          "sys": {
            "id": "expressPosts",
            "type": "Link",
            "linkType": "ContentType"
          }
        },
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        }
      },
      "sidebar": [
        {
          "settings": {
          },
          "widgetId": "1sNIcp5OG2ppXoBwjRvDE2",
          "widgetNamespace": "extension"
        },
        {
          "settings": {
          },
          "widgetId": "publication-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "content-preview-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "incoming-links-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "translation-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "versions-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "users-widget",
          "widgetNamespace": "sidebar-builtin"
        }
      ],
      "controls": [
        {
          "fieldId": "title",
          "widgetId": "singleLine",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "slug",
          "widgetId": "slugEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "heroImage",
          "widgetId": "assetLinkEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "description",
          "widgetId": "markdown",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "bodyRichText",
          "widgetId": "richTextEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "author",
          "widgetId": "entryLinkEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "publishDate",
          "settings": {
            "ampm": "24",
            "format": "timeZ"
          },
          "widgetId": "datePicker",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "tags",
          "widgetId": "tagEditor",
          "widgetNamespace": "builtin"
        }
      ]
    },
    {
      "sys": {
        "id": "default",
        "type": "EditorInterface",
        "space": {
          "sys": {
            "id": "rhk3uw4rws0r",
            "type": "Link",
            "linkType": "Space"
          }
        },
        "version": 5,
        "createdAt": "2019-06-20T23:35:21.820Z",
        "createdBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "updatedAt": "2020-04-05T04:40:07.273Z",
        "updatedBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "contentType": {
          "sys": {
            "id": "mongoDb",
            "type": "Link",
            "linkType": "ContentType"
          }
        },
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        }
      },
      "sidebar": [
        {
          "settings": {
          },
          "widgetId": "1sNIcp5OG2ppXoBwjRvDE2",
          "widgetNamespace": "extension"
        },
        {
          "settings": {
          },
          "widgetId": "publication-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "content-preview-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "incoming-links-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "translation-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "versions-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "users-widget",
          "widgetNamespace": "sidebar-builtin"
        }
      ],
      "controls": [
        {
          "fieldId": "title",
          "widgetId": "singleLine",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "slug",
          "widgetId": "slugEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "heroImage",
          "widgetId": "assetLinkEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "description",
          "widgetId": "markdown",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "bodyRichText",
          "widgetId": "richTextEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "author",
          "widgetId": "entryLinkEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "publishDate",
          "settings": {
            "ampm": "24",
            "format": "timeZ"
          },
          "widgetId": "datePicker",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "tags",
          "widgetId": "tagEditor",
          "widgetNamespace": "builtin"
        }
      ]
    },
    {
      "sys": {
        "id": "default",
        "type": "EditorInterface",
        "space": {
          "sys": {
            "id": "rhk3uw4rws0r",
            "type": "Link",
            "linkType": "Space"
          }
        },
        "version": 5,
        "createdAt": "2019-06-26T01:21:14.419Z",
        "createdBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "updatedAt": "2020-04-05T04:40:07.417Z",
        "updatedBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "contentType": {
          "sys": {
            "id": "reactPosts",
            "type": "Link",
            "linkType": "ContentType"
          }
        },
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        }
      },
      "sidebar": [
        {
          "settings": {
          },
          "widgetId": "1sNIcp5OG2ppXoBwjRvDE2",
          "widgetNamespace": "extension"
        },
        {
          "settings": {
          },
          "widgetId": "publication-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "content-preview-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "incoming-links-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "translation-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "versions-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "users-widget",
          "widgetNamespace": "sidebar-builtin"
        }
      ],
      "controls": [
        {
          "fieldId": "title",
          "widgetId": "singleLine",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "slug",
          "widgetId": "slugEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "heroImage",
          "widgetId": "assetLinkEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "description",
          "widgetId": "markdown",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "bodyRichText",
          "widgetId": "richTextEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "author",
          "widgetId": "entryLinkEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "publishDate",
          "settings": {
            "ampm": "24",
            "format": "timeZ"
          },
          "widgetId": "datePicker",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "tags",
          "widgetId": "tagEditor",
          "widgetNamespace": "builtin"
        }
      ]
    },
    {
      "sys": {
        "id": "default",
        "type": "EditorInterface",
        "space": {
          "sys": {
            "id": "rhk3uw4rws0r",
            "type": "Link",
            "linkType": "Space"
          }
        },
        "version": 3,
        "createdAt": "2019-10-05T20:22:40.718Z",
        "createdBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "updatedAt": "2020-04-05T04:40:07.287Z",
        "updatedBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "contentType": {
          "sys": {
            "id": "gatsbyPosts",
            "type": "Link",
            "linkType": "ContentType"
          }
        },
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        }
      },
      "sidebar": [
        {
          "settings": {
          },
          "widgetId": "1sNIcp5OG2ppXoBwjRvDE2",
          "widgetNamespace": "extension"
        },
        {
          "settings": {
          },
          "widgetId": "publication-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "content-preview-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "incoming-links-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "translation-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "versions-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "settings": {
          },
          "widgetId": "users-widget",
          "widgetNamespace": "sidebar-builtin"
        }
      ],
      "controls": [
        {
          "fieldId": "title",
          "widgetId": "singleLine",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "slug",
          "widgetId": "slugEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "heroImage",
          "widgetId": "assetLinkEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "description",
          "widgetId": "markdown",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "bodyRichText",
          "widgetId": "richTextEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "author",
          "widgetId": "entryLinkEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "publishDate",
          "settings": {
            "ampm": "24",
            "format": "timeZ"
          },
          "widgetId": "datePicker",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "tags",
          "widgetId": "tagEditor",
          "widgetNamespace": "builtin"
        }
      ]
    },
    {
      "sys": {
        "id": "default",
        "type": "EditorInterface",
        "space": {
          "sys": {
            "id": "rhk3uw4rws0r",
            "type": "Link",
            "linkType": "Space"
          }
        },
        "version": 20,
        "createdAt": "2019-10-08T19:05:16.421Z",
        "createdBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "updatedAt": "2020-04-05T04:40:09.111Z",
        "updatedBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "contentType": {
          "sys": {
            "id": "alexQuasarArticles",
            "type": "Link",
            "linkType": "ContentType"
          }
        },
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        }
      },
      "sidebar": [
        {
          "settings": {
          },
          "widgetId": "1sNIcp5OG2ppXoBwjRvDE2",
          "widgetNamespace": "extension"
        },
        {
          "widgetId": "publication-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "widgetId": "content-preview-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "widgetId": "incoming-links-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "widgetId": "35f8xJFaJpOUFAKepAWiUj",
          "widgetNamespace": "app"
        },
        {
          "widgetId": "translation-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "widgetId": "versions-widget",
          "widgetNamespace": "sidebar-builtin"
        },
        {
          "widgetId": "users-widget",
          "widgetNamespace": "sidebar-builtin"
        }
      ],
      "controls": [
        {
          "fieldId": "title",
          "widgetId": "singleLine",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "slug",
          "widgetId": "slugEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "heroImage",
          "widgetId": "assetLinkEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "description",
          "widgetId": "markdown",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "bodyRichText",
          "widgetId": "richTextEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "author",
          "widgetId": "entryLinkEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "publishDate",
          "settings": {
            "ampm": "24",
            "format": "timeZ"
          },
          "widgetId": "datePicker",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "tags",
          "widgetId": "tagEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "popular",
          "settings": {
            "trueLabel": "Yes",
            "falseLabel": "No"
          },
          "widgetId": "boolean",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "trending",
          "settings": {
            "trueLabel": "Yes",
            "falseLabel": "No"
          },
          "widgetId": "boolean",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "new",
          "settings": {
            "trueLabel": "Yes",
            "falseLabel": "No"
          },
          "widgetId": "boolean",
          "widgetNamespace": "builtin"
        }
      ]
    },
    {
      "sys": {
        "id": "default",
        "type": "EditorInterface",
        "space": {
          "sys": {
            "id": "rhk3uw4rws0r",
            "type": "Link",
            "linkType": "Space"
          }
        },
        "version": 2,
        "createdAt": "2020-04-22T18:22:44.603Z",
        "createdBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "updatedAt": "2020-04-22T18:22:45.234Z",
        "updatedBy": {
          "sys": {
            "id": "0QEtUnAlGCaAonmc8xYeuz",
            "type": "Link",
            "linkType": "User"
          }
        },
        "contentType": {
          "sys": {
            "id": "realtorProperties",
            "type": "Link",
            "linkType": "ContentType"
          }
        },
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        }
      },
      "controls": [
        {
          "fieldId": "images",
          "widgetId": "assetLinksEditor",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "address",
          "widgetId": "singleLine",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "city",
          "widgetId": "singleLine",
          "widgetNamespace": "builtin"
        },
        {
          "fieldId": "description",
          "widgetId": "richTextEditor",
          "widgetNamespace": "builtin"
        }
      ]
    }
  ],
  "entries": [
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "15jwOBqpxqSAOy2eOO4S0m",
        "type": "Entry",
        "createdAt": "2019-04-17T00:56:24.722Z",
        "updatedAt": "2019-04-27T09:11:56.769Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 149,
        "publishedAt": "2019-04-27T09:11:56.769Z",
        "firstPublishedAt": "2019-04-17T00:56:28.525Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 3,
        "version": 150,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "person"
          }
        }
      },
      "fields": {
        "name": {
          "en-US": "Alex Quasar"
        },
        "title": {
          "en-US": "Web Developer"
        },
        "company": {
          "en-US": "CraveJs"
        },
        "shortBio": {
          "en-US": "Full-Stack developer journey from *noob* to *still noob*"
        },
        "email": {
          "en-US": "admin@cravejs.com"
        },
        "github": {
          "en-US": "arhoy"
        },
        "image": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "2HcNwoU6NUg50LD7EjqDKn"
            }
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "4MX6N2GgUCBVy2dDmtEJry",
        "type": "Entry",
        "createdAt": "2019-04-20T18:47:50.603Z",
        "updatedAt": "2019-07-21T22:09:51.184Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 19024,
        "publishedAt": "2019-07-21T22:09:51.184Z",
        "firstPublishedAt": "2019-04-20T20:44:30.679Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 48,
        "version": 19025,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "blogPost"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "SQL Excel Automation every Analyst should know"
        },
        "slug": {
          "en-US": "sql-excel-automation-skills-every-analyst-should-know"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "4ZgqXGrYXJf6EgJfI5EC60"
            }
          }
        },
        "description": {
          "en-US": "Big companies today still love and use excel for reporting and analysis. Here is how you can automated these reports from SQL to Excel."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Here is a quick review of some of the basic SQL commands that should be common if you are an analyst or work with data on a day to day basis.\r\n\r\nThese examples use a simplified database for hypothetical corporation, \"ABC Box Company\". This cutting edge firm sells different boxes of various different shapes,sizes and colors. Their database includes a `CustomerTable` which contains some information typical to a customer. Inside the `customerTable` we have columns like\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "CustomerName",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "CustomerNumber",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "PhoneNumber",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Address",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "City",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "ordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Each `customerNumber` in this table is unique. (i.e each row has a unqiue customerNumber and there is no duplicates. )\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Also there will be a hypothetical `revenueTable` that contains the following columns:\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "InvoiceDate",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "InvoiceID",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Category",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "CustomerNumber",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Amount",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "ordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\n\rWhere the last column `Amount` is the invoice transaction amount and `InvoiceID` is unique for each record. Okay, now that is out of the way, let's get into some basic commands: \r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "SELECT\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The select statement tells the database what columns from what table you want to return.  The ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "* ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " keyword tells SQL to return all columns from the database. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\rExample:\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT * FROM CustomerTable\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example:\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Specify what columns you want to return before the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "FROM",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " keyword.\r\nReturn Customer Number, Customer Name and City: \r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "\rSELECT CustomerNumberm CustomerName,City \r\nFROM CustomerTable ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "SELECT DISTINCT\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Select Distinct is used when you want to return only unique values. \r\nExample:\r\n See all the unique cities where customers are from: \r\n\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT DISTINCT City FROM CustomerTable\r    ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "  \r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Comments",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Comments are notes or documentation within the SQL query that do not get executed. For demo purposes I will write a bunch of comments in the Queries below to help illustrate some of the examples. There are two ways to write comments in SQL. Single line comments and multiline comments\r\n\r\n\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Single Line Comments denoted using: `--`",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Multi Line Comments are denoted using: `/*  */`\r\r\n",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\rExample: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "-- I am single line comment\r         \r\n/* \r\n  I am a \r\n  multi-line \r\n  comment\r\n*/\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "TOP N Rows with Order By\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " The ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "TOP ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "command selects the top number of rows you specify from the table. This is useful when you only want to return the top 10 rows of your data set (i.e the last 10 customer purchases). It is also useful when you have a large dataset and want to see what information and columns are inside to avoid unnecessarily loading the server. Specify the column  and order you want to order by using the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "ORDER BY",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " command along with the optional parameters ascending (",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "ASC",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ") or descending (",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "DESC",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ")\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\rExample: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "\rSELECT TOP 10 CustomerNumber \r\nFROM CustomerTable \rORDER BY InvoiceDate DESC\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\n\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "WHERE\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "WHERE ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "command is used to filter the data.\r\n\r\nExample: \r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Select CustomerName and CustomerNumber where the city is New York: \r   \r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT CustomerNumber,CustomerName \nFROM CustomerTable\r  \nWHERE city = 'New York'\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "       \r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\rLOGICAL OPERATORS\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "There are several logical operators in SQL which are typically used in conjunction with the `WHERE` command. Commonly used SQL logical operators are `",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "AND",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "`, `",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "OR",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "`, `",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "IN",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "`, `",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "NOT IN",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "`: \r\n\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example: \r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Select `CustomerName` and `CustomerNumber` where the city is New York and the the customer name is 'Ann Smith' \r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT CustomerNumber,CustomerName \r\nFROM CustomerTable\r\nWHERE city = 'New York' AND CustomerName = 'Ann Smith' \r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "  \r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example: \r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Select CustomerName and CustomerNumber\r where the city is New York or Los Angeles\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT CustomerNumber,CustomerName \r\nFROM CustomerTable\r\nWHERE city = 'New York' OR city = 'Los Angeles'\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\n\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example: \r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Select CustomerName and CustomerNumber \r\nwhere the CustomerNumber is 'C-123456' or 'C-123457'\r\n\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT CustomerNumber,CustomerName \r\nFROM CustomerTable\r\nWHERE CustomerNumber IN ('C-123456','C-123457')\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "LIKE with WildCard Match\r\n  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "LIKE ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "command lets you filter for multiple values when you don't know the exact criteria you want to filter for. Using LIKE with regular expressions such as the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "`%` ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "character creates wildcard matches.\r\n\r\nWhen a phrase is placed between two  % characters, than the output will be anything containing those characters. When the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "`%`",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " is placed after the phrase then it must contain those starting characters. Likewise, when placed before a phrase than it must end with the select characters.\r\nFor example: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\n\r\nExample: \r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Find Customer Name and Number where CustomerName __contains__ characters \"`Abe`\"\r\n\r",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT CustomerNumber,CustomerName \r\nFROM CustomerTable\r\nWHERE CustomerName LIKE '%ABE%'\n-- Expected Sample Return: Cabel, Abel, Abe, Abe Lincoln\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example: \r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Find Customer Name and Number where CustomerName __starts with__ characters \"`Abe`\"\r\n\r",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT CustomerNumber,CustomerName \r\nFROM CustomerTable\r\nWHERE CustomerName LIKE 'ABE%'\r\n\r-- Expected Sample Return: Cabel, Abel, Abe, Abe Lincoln\r",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\rExample: \r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Find Customer Name and Number where CustomerName __ends with__ characters \"`Abe`\"\r\n\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT CustomerNumber,CustomerName \r\nFROM CustomerTable\r\nWHERE CustomerName LIKE '%ABE'\r\n\r-- Expected Sample Return: Cabel, Abe\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "SUM\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "SUM ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "command is used for summing a particular column. This is useful when you want to get the total amount of some numerical data.\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example:\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Select All Revenue from the RevenueTable\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT SUM(amount) \r\nFROM RevenueTable\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example:\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Select All Revenue from the RevenueTable where Invoice Date on Jan 1 2019 or later.\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT SUM(amount) \r\nFROM RevenueTable\r\nWHERE InvoiceDate >= '2019-01-01'\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\rCOUNT\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "COUNT ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "command is used for counting up a particular column. This is useful when you want to get the total number of records for a particular column. \r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example:\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Count up the number of customers from the CustomerTable. \r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT COUNT(CustomerNumber) \r\nFROM CustomerTable ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example:\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Count up the number of invoices from the RevenueTable. \r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT COUNT(InvoiceID) \r\nFROM RevenueTable\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\nMIN and MAX\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "MIN ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "MAX ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "command is used to find the min and max amount of something. \r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example: \r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": " `--` Find the smallest invoice transaction\r\n SELECT MIN(amount) FROM RevenueTable\r\n \r\n `--` Find the largest invoice transaction\r\n SELECT MAX(amount) FROM RevenueTable\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\rGROUP BY\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The GROUP BY command is used with the COUNT and SUM commands and other data aggregators. This is useful when you want to see aggregate data grouped by a specific column. \r\n\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example: \r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " Find the total spend grouped by each customerNumber\r\n \r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT SUM(amount)\r\nFROM RevenueTable\r\nGROUP BY CustomerNumber\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\rExample: \r\n ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Find the total spend grouped by each `customerNumber` where the invoice date is after Jan 1 2019.\r\n \r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT SUM(amount) FROM RevenueTable\r\nWHERE InvoiceDate >= '2019-01-01'\r\nGROUP BY CustomerNumber\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "CASE\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "CASE ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "command is useful when you want to sum up or count based on a particular criteria. \r Example: \r\nSum the total amount in the revenue table when the category is 'foo'\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT \r\nSUM(CASE WHEN Category = 'foo' THEN Amount ELSE 0 END ) as totalAmountFoo\r\nFROM RevenueTable\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example: \r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Count up the number of invoices when the category is 'bar'\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT \r\nSUM(CASE WHEN Category = 'bar' THEN 1 ELSE 0 END ) as totalAmountFoo\r\nFROM RevenueTable\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\nWe could have also changed the query to the following to give the same result: \r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT \r\nCOUNT(CASE WHEN Category = 'bar' THEN 1 ELSE null END ) as totalAmountFoo\r\nFROM RevenueTable\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "CASE ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "command can also be used to create a data hierarchy. For example you want to create a \"Main Category\" column based on the \"Category\" column already in your database.\r\n\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Create a `MainCategory` column called Foo_OR_Bar based on the category column.\r\n\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT \r\n   CASE \r\n     WHEN Category = 'foo' THEN 'Foo_OR_Bar'\r\n     WHEN Category = 'bar' THEN 'Foo_OR_Bar'\r\n     ELSE 'OTHER' END as MainCategory\r\nFROM RevenueTable\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\nWe could have also shortened this to\r\n\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT \r\n   CASE \r\n     WHEN Category IN ( 'foo' ,'bar') THEN 'Foo_OR_Bar'\r\n     ELSE 'OTHER' END as MainCategory\r\nFROM RevenueTable\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\rPrimary and Foreign keys\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If you spent a bit of time working with datasets or SQL, you may have heard of primary and foreign keys. \r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "\rA ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "primary key",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " is simply the column in a table that uniquely identifies each record in a table.  \r\n",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "A ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "foreign key",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " is  denoted as the column in one table that lets you join to another column in another table, typically a primary key.\r\n\r",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Renaming table names (giving them an alias)\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Since table names are often very long in a SQL database it is a good convention to give them an alias. This helps to keep your queries cleaner and avoid having to type out the table name over and over again. Define the alias right after you call the Table Name:\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example: \r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Create an alias and name it ' ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "r",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " ' for the RevenueTable\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT * FROM RevenueTable as r\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\nShort hand version: \r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT * FROM RevenueTable r\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\nYou don't need to explicitly specify `as` to create the alias. Aliases come in handy when joining with other tables, since now you don't have to reference the full table name.\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\rJOINS\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "So far the examples have been limited to querying only one table at a time. However, the real power behind SQL is the ability to join different datasets (tables) together. When you want to join on (ie bring in data from another table) use the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "JOIN ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "or ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "LEFT JOIN",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " command. \r\n\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The crucial difference is that with JOIN you bring in rows that only occur in both tables. With LEFT JOIN, you keep all the existing rows from the original table.\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example: \r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Join the revenue table on the customer table and create aliases ' ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "r ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "' and ' ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "c",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " ' for them. \r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": " SELECT * FROM RevenueTable r\r\n LEFT JOIN CustomerTable c ON c.CustomerNumber = r.CustomerNumber\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\nUsing the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "*",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " key will return all columns from both databases. We don't necessarily need this. Say we want to return ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " All the columns from revenueTable",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " The `customerName` from the customerTable \r\r",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Then the following query will do the job: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT r.*, c.CustomerName FROM RevenueTable r\r\nLEFT JOIN CustomerTable c ON c.CustomerNumber = r.CustomerNumber\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\nSUB QUERIES\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Sub queries are used when you want to modify the table you intend to join on. You might want to do this for several reasons. For instance, the table is to large and you want to filter the table before you join, or the table contains invoice data and you want to aggregate the invoice data to the customer level before joining. Lets do the later:\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example:\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Return the customer name and customer number along with the total amount each has spent: \r\n\r",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": " SELECT c.CustomerName, c.CustomerNumber, SUM(Amount) as TotalAmount\n FROM CustomerTable c\r\n LEFT JOIN RevenueTable r ON c.CustomerNumber = r.CustomerNumber\n GROUP BY c.CustomerName,c.CustomerNumber",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\n\nThis is one way to do it, but it depending on how the size of each table it might be much faster to write using a subquery.\r\n\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT c.CustomerNumber,CustomerName, Total \nFROM CustomerTable c \r\nLEFT JOIN (\r\r\n   SELECT CUstomerNumber, SUM(Amount) as Total\n   FROM revenueTable r\r\n   GROUP BY CustomerNumber\r\n)  r ON c.CustomerNumber = r.CustomerNumber \nWHERE Total IS NOT NULL\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The sub query is used ( ie. inner query inside the left join )  to first aggregrate the data at the customer level before joining it on the `customerTable`.  You can join or left join on the customer table as many times as needed. For instance, if there is another table say `refundTable` than we could left join that right underneath like such: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT c.CustomerNumber,CustomerName, Total, TotalRefund\nFROM CustomerTable c \r\nLEFT JOIN (\r\r\n   SELECT CUstomerNumber, SUM(Amount) as Total\n   FROM revenueTable r\r\n   GROUP BY CustomerNumber\r\n)  r ON c.CustomerNumber = r.CustomerNumber \nLEFT JOIN (\r\r\n   SELECT CUstomerNumber, SUM(Amount) as TotalRefund\n   FROM refundTable r\r\n   GROUP BY CustomerNumber\r\r\n)  r ON c.CustomerNumber = r.CustomerNumber\nWHERE Total IS NOT NULL\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\nSQL DATES FUNCTIONS\r\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Common built in SQL DATE functions include ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "YEAR",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "MONTH",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ",  ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "GETDATE() ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "DATEDIFF",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ".  Some common use cases for SQL queries with dynamic dates.\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\rExample: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The SQL function GETDATE() returns the date and time when the query was run. See below: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT GETDATE(); // returns the date and time.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Wrapping GETDATE() inside of YEAR or MONTH gives back the the associated year and month number for the date.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To return today's revenue by customerNumber we must first convert the date and time from GETDATE to a date only. This can be done as follows: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT CONVERT(date, GETDATE()); // returns today's date",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Insert that into our query to get the revenue by customer for today. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT CustomerNumber, SUM(Amount) as RevenueYTD \nFROM revenueTable r\r\nWHERE  InvoiceDate = CONVERT(date, GETDATE())  \nGROUP BY CustomerNumber",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\rExample: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Return yesterday's revenue by customerNumber ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT CustomerNumber, SUM(Amount) as RevenueYTD \nFROM revenueTable r\r\nWHERE  InvoiceDate = CONVERT(date, GETDATE() -1) \nGROUP BY CustomerNumber",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Return revenue by for the last 7 days by customerNumber not including today",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT CustomerNumber, SUM(Amount) as RevenueYTD \nFROM revenueTable r\r\nWHERE  \n   InvoiceDate >= CONVERT(date, GETDATE() -7) \n   AND InvoiceDate != CONVERT(date, GETDATE())\r\nGROUP BY CustomerNumber",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Return year-to-date revenue by customerNumber ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT CustomerNumber, SUM(Amount) as RevenueYTD \nFROM revenueTable r\r\nWHERE YEAR(InvoiceDate) >= YEAR(GETDATE())\r\nGROUP BY CustomerNumber",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\rExample: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Return year-to-date revenue by customerNumber grouped by Year and Month also",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT \n   CustomerNumber, \n   YEAR(InvoiceDate) as InvoiceYear,\n   MONTH(InvoiceDate) as InvoiceMonth\n   SUM(Amount) as RevenueYTD \nFROM revenueTable r\r\nWHERE YEAR(InvoiceDate) >= YEAR(GETDATE())\r\nGROUP BY \n  CustomerNumber,\n  YEAR(InvoiceDate),\n  MONTH(InvoiceDate)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Return year-to-date revenue for the company grouped by Year and Month.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "   SELECT \n       YEAR(InvoiceDate) as InvoiceYear,\n       MONTH(InvoiceDate) as InvoiceMonth\n       SUM(Amount) as RevenueYTD \n   FROM revenueTable r\r\n   WHERE YEAR(InvoiceDate) >= YEAR(GETDATE())\r\n   GROUP BY \n      YEAR(InvoiceDate),\n      MONTH(InvoiceDate)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\rExample: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Compare revenue for this year vs last year for the company ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT \r\n   SUM(CASE WHEN YEAR(InvoiceDate) = YEAR(GETDATE()) THEN Amount ELSE 0 END) as RevenueThisYear,\r\n   SUM(CASE WHEN YEAR(InvoiceDate) = YEAR(GETDATE()) -1 THEN Amount ELSE 0 END) as RevenueThisYear\r\n   FROM revenueTable r\r\n   WHERE YEAR(InvoiceDate) >= YEAR(GETDATE()) -1",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Compare revenue for this year vs last year for the company by month",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT \r\n   MONTH(InvoiceDate) as InvoiceMonth,\r\n   SUM(CASE WHEN YEAR(InvoiceDate) = YEAR(GETDATE()) THEN Amount ELSE 0 END) as RevenueThisYear,\r\n   SUM(CASE WHEN YEAR(InvoiceDate) = YEAR(GETDATE()) -1 THEN Amount ELSE 0 END) as RevenueThisYear\r\n   FROM [SALESLINK_REPORTING].[dbo].[v_RevenueXrep] r\r\r\n   WHERE YEAR(InvoiceDate) >= YEAR(GETDATE()) -1\r\n   GROUP BY MONTH(invoiceDate)\r\n   ORDER BY MONTH(InvoiceDate)\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\rExample: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Compare revenue for this year vs last year for the company by month renaming month number to month name using the CASE SQL command.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT \r\r\n   CASE \r\n\tWHEN MONTH(InvoiceDate) = 1 THEN 'Jan'\r\n\tWHEN MONTH(InvoiceDate) = 2 THEN 'Feb'\r\n\tWHEN MONTH(InvoiceDate) = 3 THEN 'Mar'\r\n\tWHEN MONTH(InvoiceDate) = 4 THEN 'Apr'\r\n\tWHEN MONTH(InvoiceDate) = 5 THEN 'May'\r\n\tWHEN MONTH(InvoiceDate) = 6 THEN 'Jun'\r\n\tWHEN MONTH(InvoiceDate) = 7 THEN 'Jul'\r\n\tWHEN MONTH(InvoiceDate) = 8 THEN 'Aug'\r\n\tWHEN MONTH(InvoiceDate) = 9 THEN 'Sep'\r\n\tWHEN MONTH(InvoiceDate) = 10 THEN 'Oct'\r\n\tWHEN MONTH(InvoiceDate) = 11 THEN 'Nov'\r\n\tWHEN MONTH(InvoiceDate) = 12 THEN 'Dec'\r\n\tELSE 'N/A'\r\n\tEND as InvoiceMonth,\r\n\r\n   SUM(CASE WHEN YEAR(InvoiceDate) = YEAR(GETDATE()) THEN Amount ELSE 0 END) as RevenueThisYear,\r\n   SUM(CASE WHEN YEAR(InvoiceDate) = YEAR(GETDATE()) -1 THEN Amount ELSE 0 END) as RevenueThisYear\r\n   FROM [SALESLINK_REPORTING].[dbo].[v_RevenueXrep] r\r\n\r   WHERE YEAR(InvoiceDate) >= YEAR(GETDATE()) -1\r\n   GROUP BY MONTH(invoiceDate)\r\n   ORDER BY MONTH(InvoiceDate)\r",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "  \r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "SQL DATE FUNCTION II (Using Dynamic Dates with Weeks)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "There is currently no built in SQL function for Weeks, depending on the flavor or version of SQL that is used. This can make getting dates a bit harder. A universal SQL way to get dates is to combine the DATEDIFF and DATEADD functions as follows:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Get the start of the current week based on Monday:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()) /7*7, 0) as WeekStart",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Get the start of the current week based on Sunday:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT DATEADD(day, DATEDIFF(day, 0, GETDATE()) /7*7, 0) as WeekStart",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Find the day the week will end based on today's date:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "DATEADD(day, DATEDIFF(day, 6, CallDate-1) /7*7 + 7, 6) AS WeekEnd\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Determine the week over week revenue for the company this year from the revenueTable where the starting week is every Monday. Have the current week showing first.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SELECT \r\n      DATEADD(day, DATEDIFF(day, 0, [InvoiceDate]) /7*7, 0) as WeekStart,\r\n      SUM([Amount]) as Weekly_Revenue\t\r\nFROM RevenueTable\nWHERE YEAR(InvoiceDate) = YEAR(GETDATE())\r\nGROUP BY DATEADD(day, DATEDIFF(day, 0, [InvoiceDate]) /7*7, 0)\r\nORDER BY DATEADD(day, DATEDIFF(day, 0, [InvoiceDate]) /7*7, 0) DESC",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r Step 2: Getting the Data into Excel\r\n\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Using the GET DATA Feature in Excel\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You can insert custom queries into excel and use refresh all inside your excel workbook. This always ensures your data is up-to-date and  eliminates the need for vlookups and reduces potential copy paste errors that may occur when manipulating data in multiple steps manually.  It also saves time for reporting as all the data is now there from the server and your workflow ( data manipulation steps) can be automated using the Query Editor feature in Excel. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In Excel versions 2016 or later select '",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Data' ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "in the top ribbon. You should see the '",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Get Data' ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "option at the top left corner. For SQL server database, select",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": " 'From Database'",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " and From '",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "SQL Server Database'",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". You can then paste your custom query into ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Advanced Options",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". For more data manipulation and to rename your table hit 'Edit'. This will open up the 'Query Editor' giving a whole slew of data manipulation options such as replacing values, appending or merging other queries, and adding in custom conditional columns.  \r\n\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "** Note in older versions of Excel you will need to download the __Power Query__ add-on.\r\n\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Using the Query Editor Features to transform your data",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\nThe `Query Editor` features have a ton of other options you can use for cleaning and transforming your data. Most of these are pretty self explanatory on the user interface. Here are some of the top features I use\r\n\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " The Append method: The append method stacks two or more tables on top of each other. This is useful when you have data in two separate servers and it is not possible to append using a SQL command. When appending, make sure to have the same column names.\r\n",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "The Merge Method: The merge feature is like a SQL left join. You can use this for joining different SQL tables together when: \r\n       a) The data is in different servers or locations.\r\n       b) You rather use the Query Editor features in excel to transform and manipulate the data.\r\n",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "ordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Hope you enjoyed this article. Please reach out to me if you have any comments.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-04-22T00:00+02:00"
        },
        "tags": {
          "en-US": [
            "general",
            "sql",
            "excel",
            "automation",
            "data analysis"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "nrtPLyzlmHfMeMI1dwQok",
        "type": "Entry",
        "createdAt": "2019-04-26T16:56:46.323Z",
        "updatedAt": "2019-05-06T23:06:46.593Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 1640,
        "publishedAt": "2019-05-06T23:06:46.593Z",
        "firstPublishedAt": "2019-04-26T16:57:53.331Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 37,
        "version": 1641,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "blogPost"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Using and displaying contentful rich text in your React / Redux App"
        },
        "slug": {
          "en-US": "using-react-redux-rich-text-format-contentful"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "7tJ3kRuTskZKaFQ4Ni4GTB"
            }
          }
        },
        "description": {
          "en-US": "Transform your boring rich text article in React to a customized one that pops."
        },
        "bodyRichText": {
          "en-US": {
            "nodeType": "document",
            "data": {
            },
            "content": [
              {
                "nodeType": "heading-1",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "Hello Contentful!",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "data": {
                    },
                    "value": "This article here is made using ",
                    "marks": [
                    ]
                  },
                  {
                    "nodeType": "text",
                    "value": "Rich Text",
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "data": {
                    }
                  },
                  {
                    "nodeType": "text",
                    "value": " in contentful.  I referenced some of the articles here, and will go through step by step of how I did it and why think it is useful. At first I started using the long text body, but that did not quite cut it. I wanted a more customized solution, one where I could control and customize the css and layout of the page and have it be consistent across related articles I wrote. Though I am a web developer myself, I wanted a solution where anyone (those with no developer knowledge) could write some content from ms word or google docs and essential paste  it into  ",
                    "marks": [
                    ],
                    "data": {
                    }
                  },
                  {
                    "nodeType": "hyperlink",
                    "content": [
                      {
                        "nodeType": "text",
                        "value": "app.contentful.com",
                        "marks": [
                        ],
                        "data": {
                        }
                      }
                    ],
                    "data": {
                      "uri": "https://app.contentful.com/"
                    }
                  },
                  {
                    "nodeType": "text",
                    "value": " with minimal hassle and formatting. I was also searching for a way that users could  preview and publish without me ( or any  developer ) having to look at or change a single line of code in a code text editor. Desperate for something that could integrate well and easily into a full stack web app, I landed on and stuck with Contentful.",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "data": {
                    },
                    "value": "",
                    "marks": [
                    ]
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "data": {
                    },
                    "value": "I love ",
                    "marks": [
                    ]
                  },
                  {
                    "nodeType": "text",
                    "value": "customization",
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "data": {
                    }
                  },
                  {
                    "nodeType": "text",
                    "value": " and control, but I also want structure, efficiency and autonomy.  I thought of creating my own simplistic version of an `article component` where I could paste in my code that I wanted each time the headers and body. That would ultimately give me the most control and customization, but it would also not provide great scalability. What do I mean by 'scalability'? For websites that grows in size and have non-developers writing hundreds or thousands of articles, they can do so autonomously and  without resorting to IT or Trello tickets.  It also creates efficiency, because the content writers on your team does not need to send articles to the developers to insert into their custom content model, and potentially not display it in a way they want to.  Further, Contentful creates ",
                    "marks": [
                    ],
                    "data": {
                    }
                  },
                  {
                    "nodeType": "text",
                    "value": "structure ",
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "data": {
                    }
                  },
                  {
                    "nodeType": "text",
                    "value": "( we have content and content models that you can create on their web app so you don't have to build it from scratch or manage it yourself ).  ",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "data": {
                    },
                    "value": "",
                    "marks": [
                    ]
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "blockquote",
                "content": [
                  {
                    "nodeType": "paragraph",
                    "data": {
                    },
                    "content": [
                      {
                        "nodeType": "text",
                        "value": "\"Using the Rich Text feature I think we can have the best of both worlds\"",
                        "marks": [
                        ],
                        "data": {
                        }
                      }
                    ]
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "data": {
                    },
                    "value": "",
                    "marks": [
                    ]
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "data": {
                    },
                    "value": "Lastly, it creates ",
                    "marks": [
                    ]
                  },
                  {
                    "nodeType": "text",
                    "value": "autonomy",
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "data": {
                    }
                  },
                  {
                    "nodeType": "text",
                    "value": ". The non-technical people on the team have the power and autonomy to publish, preview and unpublish content.  Even for a one person team I think this is valuable. However, I would only use it if I still felt I had control and customization of my layout to almost any level I desired. Using Rich Text in Contentful with a bit of customization  we can have  ( almost ) the best of both worlds. More an this later. First I will outline how I implemented Contentful into my Full Stack React App. ",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "heading-3",
                "content": [
                  {
                    "nodeType": "text",
                    "data": {
                    },
                    "value": "The first attempt: ",
                    "marks": [
                    ]
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "data": {
                    },
                    "value": "The initial go at it using the Markdown option inside Contentful long text:",
                    "marks": [
                    ]
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "data": {
                    },
                    "value": "",
                    "marks": [
                    ]
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "heading-3",
                "content": [
                  {
                    "nodeType": "text",
                    "data": {
                    },
                    "value": "Better Solution needed:",
                    "marks": [
                    ]
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "I was about to ditch Contentful completely as the markdown option did not quite cut it for me.  However, the Rich Text option lets you render a document tree and allows for more customization on your end. It also makes things easier for the writer as they still do have some flexibility in how the content is displayed, but things are more structured now and customizable once everything is all set up.",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "data": {
                    },
                    "value": "",
                    "marks": [
                    ]
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "data": {
                    },
                    "value": "This is the unordered list: ",
                    "marks": [
                    ]
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "unordered-list",
                "content": [
                  {
                    "nodeType": "list-item",
                    "data": {
                    },
                    "content": [
                      {
                        "nodeType": "paragraph",
                        "content": [
                          {
                            "nodeType": "text",
                            "value": "Apples",
                            "marks": [
                            ],
                            "data": {
                            }
                          }
                        ],
                        "data": {
                        }
                      }
                    ]
                  },
                  {
                    "nodeType": "list-item",
                    "content": [
                      {
                        "nodeType": "paragraph",
                        "content": [
                          {
                            "nodeType": "text",
                            "value": "Bananas",
                            "marks": [
                            ],
                            "data": {
                            }
                          }
                        ],
                        "data": {
                        }
                      }
                    ],
                    "data": {
                    }
                  },
                  {
                    "nodeType": "list-item",
                    "content": [
                      {
                        "nodeType": "paragraph",
                        "content": [
                          {
                            "nodeType": "text",
                            "value": "Pie",
                            "marks": [
                            ],
                            "data": {
                            }
                          }
                        ],
                        "data": {
                        }
                      }
                    ],
                    "data": {
                    }
                  },
                  {
                    "nodeType": "list-item",
                    "content": [
                      {
                        "nodeType": "paragraph",
                        "content": [
                          {
                            "nodeType": "text",
                            "value": "Cheese Cake",
                            "marks": [
                            ],
                            "data": {
                            }
                          }
                        ],
                        "data": {
                        }
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "data": {
                    },
                    "value": "",
                    "marks": [
                    ]
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "data": {
                    },
                    "value": "Over here we have an ordered list: ",
                    "marks": [
                    ]
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "ordered-list",
                "content": [
                  {
                    "nodeType": "list-item",
                    "data": {
                    },
                    "content": [
                      {
                        "nodeType": "paragraph",
                        "content": [
                          {
                            "nodeType": "text",
                            "value": " Create `blog` content model",
                            "marks": [
                            ],
                            "data": {
                            }
                          }
                        ],
                        "data": {
                        }
                      }
                    ]
                  },
                  {
                    "nodeType": "list-item",
                    "content": [
                      {
                        "nodeType": "paragraph",
                        "content": [
                          {
                            "nodeType": "text",
                            "value": "Create content based on the on content model",
                            "marks": [
                            ],
                            "data": {
                            }
                          }
                        ],
                        "data": {
                        }
                      }
                    ],
                    "data": {
                    }
                  },
                  {
                    "nodeType": "list-item",
                    "content": [
                      {
                        "nodeType": "paragraph",
                        "content": [
                          {
                            "nodeType": "text",
                            "value": "Set up code to render the blogs and each blog using React/Redux and Express",
                            "marks": [
                            ],
                            "data": {
                            }
                          }
                        ],
                        "data": {
                        }
                      }
                    ],
                    "data": {
                    }
                  },
                  {
                    "nodeType": "list-item",
                    "content": [
                      {
                        "nodeType": "paragraph",
                        "content": [
                          {
                            "nodeType": "text",
                            "value": "Set up code  to render the rich text format document inside each blog",
                            "marks": [
                            ],
                            "data": {
                            }
                          }
                        ],
                        "data": {
                        }
                      }
                    ],
                    "data": {
                    }
                  },
                  {
                    "nodeType": "list-item",
                    "content": [
                      {
                        "nodeType": "paragraph",
                        "content": [
                          {
                            "nodeType": "text",
                            "value": "Style the components",
                            "marks": [
                            ],
                            "data": {
                            }
                          }
                        ],
                        "data": {
                        }
                      }
                    ],
                    "data": {
                    }
                  },
                  {
                    "nodeType": "list-item",
                    "content": [
                      {
                        "nodeType": "paragraph",
                        "content": [
                          {
                            "nodeType": "text",
                            "value": "Adding PrismJS",
                            "marks": [
                            ],
                            "data": {
                            }
                          }
                        ],
                        "data": {
                        }
                      }
                    ],
                    "data": {
                    }
                  },
                  {
                    "nodeType": "list-item",
                    "content": [
                      {
                        "nodeType": "paragraph",
                        "content": [
                          {
                            "nodeType": "text",
                            "value": "Final Touches",
                            "marks": [
                            ],
                            "data": {
                            }
                          }
                        ],
                        "data": {
                        }
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "heading-3",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "Still some lingering issues for me",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "The documentation around customization sort of threw me off. Using the BEM method and SCSS in my app I did not find the need to have all those extra h1, h2 renderNodes like such:",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": " Following the official documentation guide I was not able to get the styles I wanted in a simple clean approach, so for the most part after a couple hours of trial and error I ditched it for the most part and simply created the following change in how I render my FullArticleRichText component in React. After that the styling went from a nightmare to walk in the park and was back in familiar ground with the fact of one exception which was a bit weird in terms of styling, everything gets rendered to a p tag, so far styling list items I had to add this extra bit tad bit of css. Not too much of a problem for me.",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "The bigger annoyance for me was the no `div` or spacing good options in Rich Text Format on contentful. (You cannot space it the way you like). No matter how much space you leave using it only renders one small space, making the body content very condensed and ugly. I still wanted to be able to write the bulk of my entire articles in one place without having to add extra rich text elements or long text element ( that would have been a giant mess) so I had to resort to a somewhat ugly/hacky solution as follows. Using this allows me to space out my paragraphs the way I want it to. ",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "heading-3",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "Closing Thoughts",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "Using Contentful was a great learning experience. I'm just an `Analyst` and so I invite you to share your thoughts, opinions and constructive feedback in the comments section. What you see here worked for me but if you have a better approach please let me know. Contentful requires quite a bit of customization and setup, but once you know what you are doing, the overhead is not too high. Is it the best of both worlds,  the world of full control and customization and the world of efficiency, structure and autonomy?  In my opinion, I think so. Would it be a great solution for a large publishing company like New York Times? Probably not. And  actually they have their own customized content model created by their own IT team. Could it work well for most companies and websites. I definitely think so.",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              }
            ]
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-04-26T00:00+02:00"
        },
        "tags": {
          "en-US": [
            "general"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "5ATSD242Qxk62Sz7cXGWIM",
        "type": "Entry",
        "createdAt": "2019-05-09T07:04:41.989Z",
        "updatedAt": "2019-05-09T15:19:11.703Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 544,
        "publishedAt": "2019-05-09T15:19:11.703Z",
        "firstPublishedAt": "2019-05-09T07:57:47.610Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 3,
        "version": 545,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "blogPost"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Installing Postgres on Windows 10"
        },
        "slug": {
          "en-US": "installing-postgres-on-windows-10"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "YWYHfqNFCKRj8fLxiQRbe"
            }
          }
        },
        "description": {
          "en-US": "Installing windows on Postgres. A quick walk through"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "There is a great youtube video I recommend watching to install postgres SQL on windows 10. The link to the video is found ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.youtube.com/watch?v=e1MwsT5FJRQ&t=194s"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "here",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ": ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I outline the steps taken to quickly get started with Postgres: ( follow video above if lost )",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "1. Go to to ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.enterprisedb.com/downloads/postgres-postgresql-downloads"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://www.enterprisedb.com/downloads/postgres-postgresql-downloads",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " and click the version you want to install. Follow all the default steps and write down the password you choose in the passwords step. (A good password management system I use is ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.passpack.com/online/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "passpack ",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ") The step that gives you the data drivers and add ons is optional. Skip that by hitting ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "cancel",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". Everything should now be installed and you can check this by looking inside your `program files` folder",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "2. Set up your environment variables. You will need to search  \"environmental variables\" in windows search bar and in the path copy paste the location Postgres was installed (inside the program files folder ) . You will need to add the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "bin ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "path and the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "lib ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "path as an environment variable. ie",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "C:\\Program Files\\PostgreSQL\\11\\bin",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "C:\\Program Files\\PostgreSQL\\11\\lib",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "3.  Now that your new environment variables are set up, you can reference the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "psql ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "file from the command prompt that was inside the bin folder . Open up command prompt and type: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "psql -U postgres",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Next type the password you used in step 1 above during the installation of Postgres. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You should now be in postgres. And can run postgres commands",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If you see this error: ( or something like it )\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "WARNING: Console code page (850) differs from Windows code page (1252)\r\n         8-bit characters might not work correctly. See psql reference\r\n         page \"Notes for Windows users\" for details.\r\nYou are now connected to database \"postgres\" as user \"postgres\".",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You can get rid of it by going back into the command line and typing:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "cmd.exe /c chcp 1252 \n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 4: Open up pgAdmin by going into the windows search bar, that should launch a new window with a server and default database `postgres`. Inside here you can create a new database or use the psql command line: CREATE DATABASE <db name> OWNER <postgres> For more information see this great reference ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.guru99.com/postgresql-create-database.html"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://www.guru99.com/postgresql-create-database.html",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 5: While in pgAdmin, setup privileges to the postgres user. Do this by right click on your database and select properties. Inside here and under the `security` tab you will need to select Grantee as postgres and privileges set to `all`\n\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-05-16T00:00+02:00"
        },
        "tags": {
          "en-US": [
            "general"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "3AGVdhRRHCYbusX5aLiOvL",
        "type": "Entry",
        "createdAt": "2019-05-16T02:01:54.957Z",
        "updatedAt": "2019-07-21T22:07:53.551Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 791,
        "publishedAt": "2019-07-21T22:07:53.551Z",
        "firstPublishedAt": "2019-05-16T02:48:09.127Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 9,
        "version": 792,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "blogPost"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Steps for setting up localhost in php site using xamp in 2 minutes"
        },
        "slug": {
          "en-US": "steps-for-setting-up-localhost-in-php-site-using-xamp-in-2-minutes"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "5bfG6xbKtjwvkLXxHFZYkP"
            }
          }
        },
        "description": {
          "en-US": "Quickly get up and running with Xamp for php files and how to reload your page on save with live server"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Download Xampp",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Download and run ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                              "uri": "https://sourceforge.net/projects/xampp/"
                            },
                            "content": [
                              {
                                "data": {
                                },
                                "marks": [
                                ],
                                "value": "Xampp",
                                "nodeType": "text"
                              }
                            ],
                            "nodeType": "hyperlink"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Once downloaded start Apache in Xampp control panel (which should appear after running)",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Open up your web browser and type in localhost or go to ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                              "uri": "http://localhost/dashboard/"
                            },
                            "content": [
                              {
                                "data": {
                                },
                                "marks": [
                                  {
                                    "type": "underline"
                                  }
                                ],
                                "value": "http://localhost/dashboard/",
                                "nodeType": "text"
                              }
                            ],
                            "nodeType": "hyperlink"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "If you see a welcome menu than everything is up and running. ",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "ordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Get site to load on localhost",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Once you have get the welcome screen, you need to go to the place where Xampp was downloaded on your computer and inside xampp folder there will be a htdocs folder you need to go into. On my computer it is: C:\\xampp\\htdocs",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " You should see a folder here called dashboard, which you already have displayed in your browser if you followed the steps above.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Move your php folder containing your site into this htdocs folder or clone it from github into this folder.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Replace `dashboard` with the folder name of your website and your website should show up ( assuming there is an index.php file in the root of that folder)",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "ordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Using Live Server",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "One drawback and annoyance I use to have working with php files and xampp without live server was the fact that when I made saved changes in my text editor, it would not reload and display the new site content. Every time I would have to hit refresh in the browser and that is something which can really slow down development and it is something that is not fun doing.   To avoid this enable live reload using VS Code text editor in four easy steps: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Install the Live Server extension in VS Code ( it has almost 5 million installs as of this writing).",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " In the blue ribbon at the bottom of VS Code hit the `Go Live Button` to start live server",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " Download the Live Server ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                              "uri": "https://chrome.google.com/webstore/detail/live-server-web-extension/fiegdmejfepffgpnejdinekhfieaogmj"
                            },
                            "content": [
                              {
                                "data": {
                                },
                                "marks": [
                                ],
                                "value": "chrome extension",
                                "nodeType": "text"
                              }
                            ],
                            "nodeType": "hyperlink"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " On the chrome extension you installed, enable `live reload`.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "ordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "In the `Actual Server Address` paste ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                              "uri": "https://www.cravejs.com/articles/3AGVdhRRHCYbusX5aLiOvL"
                            },
                            "content": [
                              {
                                "data": {
                                },
                                "marks": [
                                ],
                                "value": "http://localhost/<your project folder> ",
                                "nodeType": "text"
                              }
                            ],
                            "nodeType": "hyperlink"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "In  the `Live Server Address` paste ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                              "uri": "https://www.cravejs.com/articles/3AGVdhRRHCYbusX5aLiOvL"
                            },
                            "content": [
                              {
                                "data": {
                                },
                                "marks": [
                                ],
                                "value": "http://127.0.0.1:5500/",
                                "nodeType": "text"
                              }
                            ],
                            "nodeType": "hyperlink"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " or whatever port live server gave you when you hit the `Go Live Button`.  Here the ports is 5500.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Live server/ reload should now be enabled on your site.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Additional Information ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "What is htdocs? ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This stands for hyper text documents and is the directory will you will put all your public files when working with Apache.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "What is Apache",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Apache is an extremely popular open source web server software. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Okay what is a web server anyway?",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "A web server is like a server as the name suggests. It finds and grabs the web page you requested and renders it onto the your screen.  \n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Visual Studio Code",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The world's most popular and widely used text editor among developers. Free and developed by Microsoft, it has gained huge popularity in it's relatively short existence. Download VS Code ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://code.visualstudio.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "here",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\nHope you enjoyed this article, please leave feedback in the comments section",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-05-16T00:00+02:00"
        },
        "tags": {
          "en-US": [
            "general"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "3grqm8XuKmqzVhMIYb0GQ4",
        "type": "Entry",
        "createdAt": "2019-05-19T17:51:14.891Z",
        "updatedAt": "2019-05-19T18:50:30.161Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 538,
        "publishedAt": "2019-05-19T18:50:30.161Z",
        "firstPublishedAt": "2019-05-19T18:50:30.161Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 539,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "blogPost"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Simple way to store your dev API Keys"
        },
        "slug": {
          "en-US": "where-to-store-your-dev-api-keys"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "2oxUo3GAEgf3b6dmOAJ3yB"
            }
          }
        },
        "description": {
          "en-US": "Where should dev keys be kept?"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Where should sensitive developer info be kept these days? Definitely not on public GitHub repositories! Reading across various articles on the web suggest that this is still quite common, perhaps  especially so among those starting out. I thought this would be less common with the vast amount of warnings out there not to do such a thing. In addition systems in place like 'GitGuardian' detect when an exposed API key is pushed to github. Want another reason to avoid this bad practice? Some companies will also automatically delete your API key and suspend your account! I made this mistake once a while back with SendGrid and had to reactivate my account through a representative. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Some developers have been using private repos to store some of this information. I am not really a fan of this as I still think it creates to much potentially to expose your repo. My opinion is that your keys_dev file where your exposed api keys/value pairs live should be kept in your local computer and this file should be added to your .gitignore file when creating your project.  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "So what if someone else needs these keys and your are working on another computer. The problem is when you clone your git repo you will not have access to these files.  The steps taken would be of course",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "1. git clone <repo name>",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "2. npm i in the root folder to download all the backend dependencies.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "3. cd into the client folder and npm i to download all the front end dependencies.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " However you are missing your keys_div file, which was inside the .gitignore along with your /node_modules folder. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "One easy fix for me is to store my keys_prod.js file this in a password management system. One popular one is ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://keepersecurity.com"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "Keeper",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " where you can store all your passwords and sensitive info in a hierarchical folder like structure. Similar to lastpass it will also remember your passwords for you (if you choose) while you browse the internet.  The advantage of this is that all my passwords are in one secure place in the cloud and I don't need to login to various different sites to grab the API keys either. I can also easily share this info with another team member/developer without giving out my login details to the site which would potentially contain information I would not necessarily want to share. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-04-26T00:00+02:00"
        },
        "tags": {
          "en-US": [
            "general"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "2AEKkbltutVNutlwuuN8kE",
        "type": "Entry",
        "createdAt": "2019-05-20T04:43:47.872Z",
        "updatedAt": "2019-05-24T23:28:42.810Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 794,
        "publishedAt": "2019-05-24T23:28:42.810Z",
        "firstPublishedAt": "2019-05-20T04:51:28.723Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 16,
        "version": 795,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "javascriptPosts"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Basics on Regular Expressions"
        },
        "slug": {
          "en-US": "basics-of-regular-expressions"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "7yP6bV2JP8P6344lF0EQE2"
            }
          }
        },
        "description": {
          "en-US": "Regular expressions can be intimidating. This article hopes to make it less so.  "
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Regular expressions are used when you want to match certain criteria or patterns. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Initialize ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "re",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " as the regular expression and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "str",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " as the string we want to match. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "A regular expression test function, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "reTest, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " checks if the string matches the regular expression",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "let re;\nlet str;\n\nconst reTest = (re,str)=>{\r\n     if(re.test(str)){\r\n        return `${str} matches the regular expression ${re}`;\r\n     }\r\n     else {\r\n         return `String does not match the regex :(`\r\n     }\r\n }\r\n\r console.log(reTest(re,str));",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The following are examples you can try along in your code editor and the browser.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Contains (vanilla match)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// regular expression match the word hello\nre = /hello/ // must contain `hello` ie. ('trhello','y hello w', 'hellow')\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Case Insensitive",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// ignores upper or lower case.\nre = /hello/i // must contain `hello` ie. ('trhello','y HEllo w', 'hellow')\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Starts with ^",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "re = /^hello/ // must start with `hello` ie. ('hello','hello world', 'hellow')\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Ends with $",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// ignores upper or lower case.\nre = /hello$/ // must end with `hello` ie. ('hello','say hello', 'thello')\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Matches any one character with special character .",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// ignores upper or lower case.\nre = /s.t/i; // the . is a wildcard to match anyone character ie. ('sit','sat','set')",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\nMatches multiple characters with special character *",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// ignores upper or lower case.\nre = /s*t/i; // the * is a wildcard to match one or more characters ie. ('seet','sat','sabatt')",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The special character ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "?",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " is the optional flag",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// ignores upper or lower case.\nre = /^hello?/i; // Character before the ? is optional ( hell, hello)\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The escaped character \\ ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Use before special characters to escape\nre = /^hello\\?/i; // treats special character as regular character ( hello?)\n\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Bracket Characters sets [ ]",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Bracket characters are used to specify a range of letters or numbers to match\nre = /^h[a-z]llo$/; // will match with ('hello','hallo','hullo')\nre = /^hello[0-9]/; // will match with ('hello9','hello9a','hull001')",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-05-13T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "javascript"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "1d3pTk5cC7DwpkzPIXz1ar",
        "type": "Entry",
        "createdAt": "2019-05-20T05:06:20.873Z",
        "updatedAt": "2019-05-31T22:06:45.243Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 738,
        "publishedAt": "2019-05-31T22:06:45.243Z",
        "firstPublishedAt": "2019-05-20T05:11:21.054Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 12,
        "version": 739,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "pythonPosts"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Using Pandas with Excel"
        },
        "slug": {
          "en-US": "getting-started-with-the-pandas-library-in-excel"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "7jhejwJ6ftAN2IsU11GQJ1"
            }
          }
        },
        "description": {
          "en-US": "This is some basic pandas syntax for some elementary data wrangling in excel"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Basics Pandas Expressions",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Pandas is a library used for manipulating data. Below is some common tasks Pandas can do with excel. In all examples, use ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "print ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "command to display results.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Importing the data",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import pandas as pd",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Reading in an CSV or excel file",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "#reference the relative path\ndf = pd.read_csv('db_sandbox.csv')",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "#reference the relative path of your excel sheet and the sheet name\ndf = pd.read_excel (db_sandbox.xlsx', sheet_name='Sheet1');\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Preview Data",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "# Preview the file and print the first 10 rows\ndf.head(10)\n\n# Read the columns from your data \ndf.columns",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "# Read a specific column or columns\ndf[['name of column 1','name of column 2']]",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "# Print data row by row\nfor index, row in df.iterrows():\n   print(index,row['SMU'])",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Filtering Data",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "# Read a specific row based on a certain column criteria\nnewdf = df.loc[(df['make'] ==  'Honda') & (df['age'] > 20) ] \n\n# All emails that contain @gmail with data containing N/A values.\ngmail = df[df['email'].str.contains(\"@gmail\",na=False) ]\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Filtering Data and getting number of records",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "# Count all users in the database with a specific domain and name\n# 1. domain must be gmail\n# 2. `~` used to specify name must not contain `michael`\n# 3. Flag `na = False` to handle empty values\n# 4. Flag `case = False` to set case insensitive\n# 5. Shape to return number of rows of data set\ngmail_and_not_michael = df.loc[ (df['Domain'] == 'gmail.com') & ( ~df['name'].str.contains('michael',na=False, case=False) ) ]\nprint(gmail_and_not_michael.shape[0])",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Making Changes to Data",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "# making changes to the data\ndf['Country'] = df['Country'] ==  'CA '",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "# Dropping/Removing columns \n#df = df.drop(columns=['Canada'])",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Aggregating Data",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "# summing data\n#df['Total'] = df['Tesla Sales'] + df['Toyota Sales']",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Reordering Data",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "# Ordering and displaying specific columns\ndf = df[['Total','Tesla Sales','Toyota Sales']]",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Saving Data",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "# Saving to CSV\ndf.to_csv('modified.csv')\n# Saving to Excel\ndf.to_excel(r'Path or Folder\\File Name.xlsx') #leave out to store in current dir.",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Working with Strings",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "# using flags, still filter if data contains 'NA'\nnewdf = df.loc[(df['email'].str.contains('@yahoo',na=False) )] ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "# Using contains if n/a than flag and flag for case insensitive\nnewdf = newdf = df.loc[(df['email'].str.contains('@yahoo',na=False, case=False) )] ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "# does not contain\n# newdf = df.loc[~df['email'].str.contains('@gmail',na=False)]",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Regular Expressions",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "# Regular expressiosn\nimport re\n# ignores case and returns email containing `alex` or `Anna`\nnewdf = df.loc[df['email'].str.contains('alex | Anna', regex = True, na = False, flags = re.I)]",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "# MORE REGEX EXPRESSIONS\nnewdf = df.loc[df['email'].str.contains('^ab[a-z]',flags = re.I,regex = True, na = False) ]\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "for more on regex see my regex article here.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Conditional Changes",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "# Conditional Changes\ndf.loc[ df['Industry'] == 'Original Equipment Manuf', 'Industry'] = 'OEM'",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-05-21T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "python",
            "data science"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "1zvhJaOx8nyadoNwjTKTiD",
        "type": "Entry",
        "createdAt": "2019-05-20T20:00:14.382Z",
        "updatedAt": "2019-05-20T20:32:43.324Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 260,
        "publishedAt": "2019-05-20T20:32:43.324Z",
        "firstPublishedAt": "2019-05-20T20:26:35.776Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 4,
        "version": 261,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "javascriptPosts"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Heroku Deployment"
        },
        "slug": {
          "en-US": "heroku-deployment"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "6cJOb8hbGrj6sO9oJP0YB"
            }
          }
        },
        "description": {
          "en-US": "A quick summary of deploying your node js app with Heroku"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You have already done this before but maybe it has been a while. Perhaps you are doing it on another computer and not sure why it is not working. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 1. Download the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://devcenter.heroku.com/articles/heroku-cli"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "Heroku CLI",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". You can run the following command in your integrated terminal:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "npm i heroku -g",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 2. Check heroku is indeed installed.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "heroku --version",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 3.  Login to heroku",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "heroku login",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 4. If you are deploying a new app see the deploy page on your heroku dashboard. Otherwise add this app to your local machine.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "heroku git:remote -a <name of app>",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 5. Add the heroku post build into your root package.json file inside scripts:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "  \"scripts\": {  \n   \"heroku-postbuild\": \"NPM_CONFIG_PRODUCTION=false npm install --prefix client && npm run build --prefix client\" \n }\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\nStep 6. Push to your git repo and then to heroku",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "git add .\ngit commit -am 'new commit'\ngit push origin master\ngit push heroku master",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Check your post build on the heroku dashboard. More to come...",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-05-13T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "javascript",
            "express"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "1QT7jDDlwwC4UOiRkFJVC6",
        "type": "Entry",
        "createdAt": "2019-05-21T17:33:52.387Z",
        "updatedAt": "2019-05-21T19:43:50.814Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 76,
        "publishedAt": "2019-05-21T19:43:50.814Z",
        "firstPublishedAt": "2019-05-21T19:43:50.814Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 77,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "javascriptPosts"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "The basics of Promises"
        },
        "slug": {
          "en-US": "the-basics-of-promises"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "2CKs3yYKcURjz26tMiUdmE"
            }
          }
        },
        "description": {
          "en-US": "A quick review on Promises."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Promises are used when you send a request and get back a response from a server",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Basics promises./*1. setTimeout mimics the response of a server request.2. we can fabricate an error my setting error to true.*/const promise1 = new Promise((resolve, reject) => {  setTimeout(() => {    const error = true; //set to true if you want the reject message to show    if (!error) {      resolve('promise is complete!');    } else {      reject('There was a error');    }  }, 1000);});\npromise1.then(res => console.log(res)).catch(err => console.log(err));\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-05-13T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "javascript",
            "express"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "1ohh85xD0l4E49Zpysume2",
        "type": "Entry",
        "createdAt": "2019-05-25T05:31:22.627Z",
        "updatedAt": "2019-05-28T07:55:11.895Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 455,
        "publishedAt": "2019-05-28T07:55:11.895Z",
        "firstPublishedAt": "2019-05-25T06:13:47.883Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 4,
        "version": 456,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "javascriptPosts"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Connecting with Mongo Atlas using Mongoose"
        },
        "slug": {
          "en-US": "connecting-with-mongo-atlas-using-mongoose"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "2aL1WMXM9hQU1TNyVejVks"
            }
          }
        },
        "description": {
          "en-US": "This article will quickly run through how to connect "
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "After you have signed up and registered with MongoDB Atlas, create a new cluster. Under ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      },
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "security ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "you will need to add a new user and password for your application.  Next connect your application. One way to do this is to use a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "connection string.  ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This is a three step process.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Step 1:  ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In your text editor, this connection string can go in the config folder of your application in a default.json file.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "{\n  \"mongoURI\":\"mongodb+srv://<DB name>:<DB password>@<your app name>-xchq0.mongodb.net/test?retryWrites=true\"\n}",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Step2: ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " Inside the config folder create a new file called db.js with the following. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const mongoose = require('mongoose');\r\nconst config = require('config');\r\nconst db = config.get('mongoURI'); // returns value of mongoURI, our connection string\r\n\r\nconst connectDB = async () => {\r\n  try {\r\n    await mongoose.connect(db, { useNewUrlParser: true, useCreateIndex: true });\r\n    console.log('Mongo connected...');\r\n  } catch (err) {\r\n    console.error(`There was an error with the connection ${err.message}`);\r\n    // Exit process with failure\r\n    process.exit(1);\r\n  }\r\n};\r\n\r\nmodule.exports = connectDB;",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n\nIn the first three lines we brought in the necessary files. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "mongoose.connect ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "takes in the the connection string as the first argument and the second parameter is the optional configuration. To avoid error messages set the useNewUrlParser and useCreateIndex to true. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "process.exit(1) ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "is node.js jargon for `uncaught fatal exception` which in this case means we could not connect to the mongo atlas database.\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Step 3:",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " Inside the root folder of your app, create a file server.js and add the following",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const connectDB = require('./config/db');\n// connect to the database\r\nconnectDB();\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\nthis is will bring in the db file from the config folder specified above and run it.\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "* Warning. Do not push your default.json file to github, as the connection string contains password data! Keep this in a private place (a password manager) and add this file to your .gitignore ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "1QTwqCZg8bYlS9ce9zBi5m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-05-13T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "javascript",
            "mongoose",
            "mongodb"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "1QTwqCZg8bYlS9ce9zBi5m",
        "type": "Entry",
        "createdAt": "2019-05-27T07:26:10.644Z",
        "updatedAt": "2019-06-03T06:28:39.256Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 114,
        "publishedAt": "2019-06-03T06:28:39.256Z",
        "firstPublishedAt": "2019-05-28T05:00:41.797Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 115,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "person"
          }
        }
      },
      "fields": {
        "name": {
          "en-US": "Alana Ma"
        },
        "title": {
          "en-US": "Data Scientist"
        },
        "company": {
          "en-US": "Dash-intel"
        },
        "shortBio": {
          "en-US": "Data scientist are glorified business/data analysts with a fancy title. "
        },
        "email": {
          "en-US": "admin@dash-intel.com"
        },
        "image": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "4z42QdeizlIEBY7wl8w0vC"
            }
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "1MsawzoaMvjyoKUssCyM6N",
        "type": "Entry",
        "createdAt": "2019-06-01T06:23:42.775Z",
        "updatedAt": "2019-06-01T08:53:36.803Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 1373,
        "publishedAt": "2019-06-01T08:53:36.803Z",
        "firstPublishedAt": "2019-06-01T07:15:38.936Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 12,
        "version": 1374,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "javascriptPosts"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "A backend up and running with Express,Mongo and Postman"
        },
        "slug": {
          "en-US": "a-backend-up-and-running-with-express-mongo-and-postman"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "99u4tUDCZ6OIP2m5Q6Pmg"
            }
          }
        },
        "description": {
          "en-US": "Getting started with Express using a mongo atlas backend and testing with Postman"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "According the official docs Express is a fast, unopinionated, minimalist framework for Node.js. These three features make express and extremely popular framework.  U",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "nopinionated ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " implies there is no set design pattern or structure that you have to follow. You can structure your backend in multiple ways and have any front end framework you want. Because it has no opinion of what front end or backend applications you use with it (ie. React, Mongo) this makes it ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "minimalist ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "fast ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "as it only provides a thin layer of fundamental web app features. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " Prerequisites: (skip if you have node.js set up and running)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " You should have ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "node ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "npm ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "installed and create a package.json file / project using npm init. Having ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "nodemon ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "installed as a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "dev dependency",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": " ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "restarts the server on changes and is highly recommended. Inside the scripts file of your package.json file in your root directory you should have something like",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "\"scripts\": {  \n  \"start\": \"node server\",   \n   \"server\": \"nodemon server\" \n}\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Running the the command ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "npm run server ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "in your terminal/integrated terminal is equivalent to running ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "nodemon server ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "and will start your server and restart it on change.\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Last of all, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.getpostman.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "postman",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": ", ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "a popular free-tiered web development tool will be handy when making POST,PUT and DELETE requests. You can learn more about RESTful APIs ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://searchmicroservices.techtarget.com/definition/RESTful-API"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "here",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". Make sure to download the web app and not the now ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "deprecated ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "chrome extension. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example 1: Bare Bones: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Here outlined is the most basic actual running server:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Integrated Terminal:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": " npm install express --save",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Code Editor (server.js file)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const express = require('express');\nconst app = express();\n\n// Init the middleware to get data from a form\napp.use(express.json({ extended: true }));\n\napp.get('/', (req, res) => res.send('It actually works!'));\n\nconst PORT = process.env.PORT || 5500;\napp.listen(PORT, () => {  console.log(`server has started on port ${PORT}`);});",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "What is going on?",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We installed express so need to require express in order to use it. Next we initialize express and store it in the variable ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "app. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Next ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "app.get ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "sends a GET request . This GET request has two arguments. The first is the endpoint (url) that will trigger a callback function when a user hits this endpoint. The second argument is the callback function itself which ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "sends ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "some data `It actually works!`",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The variable ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "PORT ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "uses the production environment port when you deploy your app or port 5500 in development (ie. on your localhost)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "middleware ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "above allows as to get user entered data from a form.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Finally ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "app.listen ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "listens to this PORT and outputs a message when the server has started.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Try it out",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Go into ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "postman ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "and make a get request to localhost:5500",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": " ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "or alternatively in your browser.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example 2: Restructuring for multiple endpoints",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Why `Restructure` ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The bare bones example works just fine and when we hit the endpoint we get a response from the server. Hurrah. What if though we have many different endpoints each with a many different requests. For example the `users` endpoint could have a the following requests (functionality)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "registering and logging in a user",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "getting a list of all users",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "getting the specific logged in user",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "deleting a user",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "editing a users info such as email,name,birthday etc.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In typical app say a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "dating app",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " we could have multiple endpoints (users, profile, message,events) that give the end user the functionality of the app. Hence, all this should be spread out into multiple folders (directories) not just the server.js file. (Although you technically could have all the logic in the server.js file if you wanted to).",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Folder Structure",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The folder structure will be simple. In the root directory create a `routes folder` and inside the routes folder create another folder called `api `. Inside this api folder I will store all my route/endpoint files (users.js, profile.js,message.js,events.js).  As your app grows you can always structure it different and create more directories. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Code Editor (user.js file)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Just like in the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "server.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file, will set up a similar logic and make requests the same way. Instead of using ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "const app = express() ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " we will use ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "const router = express.Router()",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " to create a seperate `mini express app` ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "user.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ".  We will then import and use this file in the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "server.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file along with any other endpoint created.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const express = require('express');\nconst router = express.Router();\n\n// route: api/users\n// Test Route\n// access: public\n// description: Test route to make sure everything is working!\nrouter.get('/', (req, res) => res.json({ msg: 'Users route is working' }));\n\nmodule.exports=router;",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Code Editor (server.js file)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Add the following line of code into the server.js file:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// first argument is the url endpoint, second argument is where to look for it in your code editor\napp.use('/api/users', require('./routes/api/users'));",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Try it out",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Go into ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "postman ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "and make a GET request to localhost:5500/api/users",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": " ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "or alternatively in your browser.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                ],
                "nodeType": "hr"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example 3: Adding in Mongo Atlas database.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If you have not set up an account visit  ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.mongodb.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://www.mongodb.com/",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " and see this ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.cravejs.com/articles/1ohh85xD0l4E49Zpysume2"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "article",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " on how to setup.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Your ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "server.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file should now look like: \n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const express = require('express');\nconst connectDB = require('./config/db');\nconst app = express();\n\n// connect to the database\nconnectDB();\n\n// Init middleware for POST requests\napp.use(express.json({ extended: true }));",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Test localhost:5500 endpoint\napp.get('/', (req, res) => res.send('API running'));\n\n// Other route endpoints\napp.use('/api/users', require('./routes/api/users'));",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// define port, listen to server\nconst PORT = process.env.PORT || 5500;\napp.listen(PORT, () => {  console.log(`server has started on port ${PORT}`);});",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You now have a basic skeleton express app connected with Mongo. The next article will build off this example and add more practical api requests.\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-06-01T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "mongoose",
            "mongodb",
            "express"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "heiYTR7rdd7FJz6uN9qjq",
        "type": "Entry",
        "createdAt": "2019-06-01T17:34:50.552Z",
        "updatedAt": "2019-06-26T02:21:04.435Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 1640,
        "publishedAt": "2019-06-26T02:21:04.435Z",
        "firstPublishedAt": "2019-06-09T23:55:06.931Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 8,
        "version": 1641,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "blogPost"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Resources for Web Developers A to Z"
        },
        "slug": {
          "en-US": "resources-for-web-developers-a-to-z"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "3T1rSqWaYsHXwoDd9Zt6XA"
            }
          }
        },
        "description": {
          "en-US": "From React to Favicons, useful resources for every web developer freelancer and students"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In this section as a React Full Stack Developer and Freelance Developer I outline some great useful resources I use on a day to day basis. I will also outline some other useful links A-Z that most developers probably already know about, but might have forgotten about. Here is some of the resources I use day to day in no particular order. All of these resources listed below are ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "free or open source ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "or have a great free tier option you can use.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For my Front End Framework:  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "For my front end framework I use the React Javascript ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      },
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "Library. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I put this under ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "frameworks",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " because that is what is used as. React is used as an alternative to other frameworks like ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Angular.  ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I use create-react-app to get most projects off the ground.  Though sometimes critiqued for being too bloated, I think create-react-app is great and it saves a ton of overhead time.  If you are a developer that favors the functional based programming paradigm than you never really have to write another class with the new introduction of React Hooks.  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "See ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://reactjs.org/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://reactjs.org",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For Styling (CSS/SASS or SCSS)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "I use SCSS",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", though I think Sass is an equally great option. They are in fact one and the same, but the syntax of how you write your styles is slightly different. The benefit of using Sass or SCSS is that you can structure your styling in a clean modular way,  reduce the amount of code you have to write and create variables and calculations for your styles. In the end it all gets compiled to css and because of how easy it is to include in a modern application there is no really good reason not to use it. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "See ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://sass-lang.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://sass-lang.com",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For Icons: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://fontawesome.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "Font Awesome: ",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " Yes Font Awesome is for ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "icons ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "not",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " fonts and I \"",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "font\"",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " that rather ironic.  And just to make things extra confusing, for React, the npm package is ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Fort Awesome",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". Besides that, font awesome \nis great package for Icons. \n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "See ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://fontawesome.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://fontawesome.com",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For other alternatives ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://icomoon.io/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "IcoMoon",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " for SVG fonts and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.materialui.co/icons"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "material UI icons",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ".\nIf you need icons fast for some markup: ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://icon.now.sh/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://icon.now.sh/",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For Fonts:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Google Fonts:",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " Now that icons are covered with Font Awesome, the best place imho for ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "fonts",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " is is none other than ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://fonts.google.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "Google Fonts",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". When you select your desired ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "specimen",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " make sure to check the load speed. Anything fast or moderate should be fine. It is typically nice to have two fonts, a primary and secondary font that compliment each other.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For UI Front End Frameworks:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Depends: ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " Being able to build your own CSS frameworks is a great skill to have. CSS flexbox and CSS grids are great tools to help developers achieve a flexible, responsive and customized framework. However, this is not always a viable option and it really depends on the project you are working on.  If you are looking to get up something quick tap into ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://material-ui.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "Material UI",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " or ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://getbootstrap.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "Bootstrap",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " for a opinionated UI framework or ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "http://getskeleton.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "Skeleton",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " for a responsive css boilerplate. If you are looking for a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "theme",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " then this ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://startbootstrap.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "site",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " has got you covered.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For Image Compression: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://tinypng.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "value": "Tiny PNG",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": ": ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Images are resource intensive, yet optimizing them is sometimes an afterthought for some developers. If your images or loading slowly than they are too large. In my opinion most images should be kept well under 1 mb for most sites. With Tiny PNG I am constantly reducing my images sizes by 70% or more and reducing page load times while keeping the quality of the image the virtually the same. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "See ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://tinypng.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://tinypng.com/",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For Favicons:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Favicons",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " are those little icons at the tabs of your site. They are small but important change especially for SEO.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "See ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://favicon.io/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://favicon.io/",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For Photoshop:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www196.lunapic.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "value": "LunaPic",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": " ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "since",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": " ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "we are talking about free resources. Sure it is not Adobe Photoshop but it gets the job done especially if you are not looking to pay Adobe subscription prices and do not photoshop too often. While it may look like a site from the 90's it has a ton of cool features such as blending two images and rotating them into the page.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "See ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www196.lunapic.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://www196.lunapic.com/",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For Infographics: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "piktochart.com"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "value": "PiktoChart",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": " ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "is an easy to use infographic site for creating presentations, visuals and prints. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": " ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For Images: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For getting and using images on your site that are free and don't require attribution, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://pixabay.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "value": "pixabay",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://unsplash.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "value": "unsplash",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " are absolutely invaluable and unrivaled resources. Unsplash has larger, higher quality and often unique images that I typically use for landing pages but only after I optimize them via Tiny PNG. Pixabay on the other hand has images and pictures of all sorts, shapes and sizes. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "See ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://unsplash.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://unsplash.com/",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://pixabay.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://pixabay.com/",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For Content Management. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.contentful.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                          {
                            "type": "bold"
                          }
                        ],
                        "value": "Contentful",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": " ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Is a content management system that lets you create content models and manage your blog site. I am still experimenting with this, but so far it has been a great tool and the best I have seen on the web even though editing with it can still be a bit of a pain",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-06-10T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "general",
            "web development",
            "opinion"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "1oWHLSuvFVtxFUP7mtTzej",
        "type": "Entry",
        "createdAt": "2019-06-01T22:15:53.046Z",
        "updatedAt": "2019-10-23T01:07:17.931Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 303,
        "publishedAt": "2019-10-23T01:07:17.931Z",
        "firstPublishedAt": "2019-06-02T17:27:28.135Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 304,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "javascriptPosts"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Redux up and running with a React App"
        },
        "slug": {
          "en-US": "redux-up-and-running-with-a-react-app"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "4PjcjKuMNUtP0xqlTtihkp"
            }
          }
        },
        "description": {
          "en-US": "Redux Boiler plate to get up and running."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Getting up and running with Redux in a React App. Install the following: \n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "npm i react-redux react-scripts redux react-thunk redux-devtools-extension",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n Inside the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "src ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "folder",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": " ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "add a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "store.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file with the following boiler plate code: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import { createStore, applyMiddleware } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport thunk from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst middleware = [thunk];\r\n\r\nconst store = createStore(\r\n  rootReducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware))\r\n);\r\n\r\nexport default store;\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n\n\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Next will need to use a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "provider ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "from the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "react-redux ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "package to connect Redux to React. \nIn the App.js file import Provider from 'react-redux' and the store.js file from above:\n\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import React, {Fragment} from 'react';\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { Provider } from 'react-redux';\r\nimport store from './store';",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const App = () => {\r\n  return (\r\n    <Provider store = {store} >\r\n      <Router>\r\n        <Fragment>\n          <Route exact path = \"/register\" component = {RegisterPage}/>\r\n          <Route exact path = \"/\" component = {HomePage}/>\r\n        </Fragment>\r\n      </Router>\r\n    </Provider>\r    \r\n  );\r\n}\r\n\r\nexport default App;",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Inside the reducers folder in the index.js file we will bring in all the other reducers to combine them into one. In this case we combine four reducers (auth,error,resume, articles) into one single reducer",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import { combineReducers } from 'redux';\r\nimport authReducer from './authReducer';\r\nimport errorReducer from './errorReducer';\r\nimport resumeReducer from './resumeReducer';\r\nimport articlesReducer from './articlesReducer';\r\n\r\nexport default combineReducers({\r\n  auth: authReducer,\r\n  errors: errorReducer,\r\n  resume:resumeReducer,\r\n  articles:articlesReducer\r\n});\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-06-07T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "javascript"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "1rckancCrdVT6leE91aAdv",
        "type": "Entry",
        "createdAt": "2019-06-06T20:55:20.372Z",
        "updatedAt": "2019-06-07T20:55:20.519Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 3110,
        "publishedAt": "2019-06-07T20:55:20.519Z",
        "firstPublishedAt": "2019-06-06T23:07:04.795Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 7,
        "version": 3111,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "blogPost"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "My Case Study with UI Path"
        },
        "slug": {
          "en-US": "my-case-study-with-ui-path"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "1ss3nAfVWRdBGIYUfJqzVW"
            }
          }
        },
        "description": {
          "en-US": "UI path is a popular free tiered RPA 'robotic process automation' software. But what exactly is the benefit?"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "What is UI Path/ RPA\r\r (brief overview)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "UI path is a popular free tiered RPA 'robotic process automation' software. For those unfamiliar, robotic proccess automation is a new buzzword that roughly translates to 'all encompassing macro to automate repetitive,  time consuming tasks people really shouldn't be wasting there time on'. At least is my opinion.  Being familiar with both the business and IT side, I think RPA has its time and place in businesses for certain tasks that should be automated but the business does not have to time, capacity, budget or skill from the IT side *to* automate.  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I often see RPA as a 'scotch tape' solution. However, in the world of large corporations these scotch tape solutions are all too common and RPA can lead to greater efficiency and productivity, potentially saving a business hundreds or thousands of hours with repetitive mind numbing work. This article will walk through creating an RPA though ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "UI Path Studio ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "a user friendly front end interface that helps you create an RPA.",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "High Level Overview",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Activities",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " are the building blocks of an RPA workflow. \r\nAn RPA is essentially just a bunch of activities linked together in a coordinated way. These activity building blocks each serve a unique purpose creating a modular like coding pattern. UI path has a ton of activities which in unison can create `robots` for tasks like",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "data entry",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "manipulating, reading and writing to a database or excel file",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "fill out online applications",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " web-scraping",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " A search bar at the top of UI path Studio makes it easy to search activities which you can then drag and drop onto your workflow. There are seven main categories of activities: UI Automation, User Events, Orchestrator, App Integration, System, Programming and Workflow.\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Before trying to create any RPA task you should understand and be familiar with how to do the task manually. That is because we are going to be mimicking a users actions as we create our workflow. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\rCreating your first automated task. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In this example we will create the following sample RPA task. There will be a some sample data in a excel file which we will fill and submit in an online form. A foreach loop will go through all the rows of the excel file and fill the form in the browser for each row in the excel file. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 1: Reading values from Excel",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In UI Path Studio create a new .xaml file called Main. On the left hand panel you can search for ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "activities",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". Search ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Try/Catch ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "activity and drag and drop to the main screen. Try/catch is useful for error handling. The program will ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "try ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "a particular ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "sequence.  ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "A sequence is a special type of UI path activity, where one or more related activities are placed inside of it and executed one after another. If there is no issues the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "try sequence",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " inside the Try block will run. Otherwise it will run the sequence inside the Catch block.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Lets start of slow and create the Catch Sequence. Inside the catch block add a message to alert us that something went wrong. To do this, search for a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Message Box ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "activity and drag into the catch block. Inside the message box, in the content property write your custom message. i.e 'Something messed up'.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Now for the Try Sequence we will do the following: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Create an ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "excel application scope",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " activity which will link UI path with our Excel file. Specify the excel file and path as one of the ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "parameters ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "of this activity. A parameter can simply be thought of as some extra additional information you pass onto the UI path activity in order for it to work. ",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Within the Excel Application scope, create a new ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "sequence.  ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Lets rename this sequence as 'Excel Sequence'. Inside this sequence lets do the following: ",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      },
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "content": [
                              {
                                "data": {
                                },
                                "content": [
                                  {
                                    "data": {
                                    },
                                    "marks": [
                                    ],
                                    "value": " Drag and drop the ",
                                    "nodeType": "text"
                                  },
                                  {
                                    "data": {
                                    },
                                    "marks": [
                                      {
                                        "type": "bold"
                                      }
                                    ],
                                    "value": "Read Range ",
                                    "nodeType": "text"
                                  },
                                  {
                                    "data": {
                                    },
                                    "marks": [
                                    ],
                                    "value": "activity and as the parameter specify the name of the excel sheet containing your data. For Range use \"\"",
                                    "nodeType": "text"
                                  }
                                ],
                                "nodeType": "paragraph"
                              }
                            ],
                            "nodeType": "list-item"
                          },
                          {
                            "data": {
                            },
                            "content": [
                              {
                                "data": {
                                },
                                "content": [
                                  {
                                    "data": {
                                    },
                                    "marks": [
                                    ],
                                    "value": "Drag and drop the ",
                                    "nodeType": "text"
                                  },
                                  {
                                    "data": {
                                    },
                                    "marks": [
                                      {
                                        "type": "bold"
                                      }
                                    ],
                                    "value": "For Each Row ",
                                    "nodeType": "text"
                                  },
                                  {
                                    "data": {
                                    },
                                    "marks": [
                                    ],
                                    "value": "activity, with parameters Foreach ",
                                    "nodeType": "text"
                                  },
                                  {
                                    "data": {
                                    },
                                    "marks": [
                                      {
                                        "type": "bold"
                                      }
                                    ],
                                    "value": "row ",
                                    "nodeType": "text"
                                  },
                                  {
                                    "data": {
                                    },
                                    "marks": [
                                    ],
                                    "value": "in ",
                                    "nodeType": "text"
                                  },
                                  {
                                    "data": {
                                    },
                                    "marks": [
                                      {
                                        "type": "bold"
                                      }
                                    ],
                                    "value": "myDataTable. ",
                                    "nodeType": "text"
                                  },
                                  {
                                    "data": {
                                    },
                                    "marks": [
                                    ],
                                    "value": "For each row in the data table we want to get the items of each column. In UI Path we can do this by adding a ",
                                    "nodeType": "text"
                                  },
                                  {
                                    "data": {
                                    },
                                    "marks": [
                                      {
                                        "type": "bold"
                                      }
                                    ],
                                    "value": "Get Row Item",
                                    "nodeType": "text"
                                  },
                                  {
                                    "data": {
                                    },
                                    "marks": [
                                    ],
                                    "value": " DataTable activity. Will do this for each of the columns we have. And specify the column name as the name of the column, Row as row and output value as the variable in the excel file.",
                                    "nodeType": "text"
                                  }
                                ],
                                "nodeType": "paragraph"
                              }
                            ],
                            "nodeType": "list-item"
                          },
                          {
                            "data": {
                            },
                            "content": [
                              {
                                "data": {
                                },
                                "content": [
                                  {
                                    "data": {
                                    },
                                    "marks": [
                                    ],
                                    "value": "After all the ",
                                    "nodeType": "text"
                                  },
                                  {
                                    "data": {
                                    },
                                    "marks": [
                                      {
                                        "type": "bold"
                                      }
                                    ],
                                    "value": "Get Row Items",
                                    "nodeType": "text"
                                  },
                                  {
                                    "data": {
                                    },
                                    "marks": [
                                    ],
                                    "value": " are created for each column we will need add in a ",
                                    "nodeType": "text"
                                  },
                                  {
                                    "data": {
                                    },
                                    "marks": [
                                      {
                                        "type": "bold"
                                      }
                                    ],
                                    "value": "Invoke workflow file ",
                                    "nodeType": "text"
                                  },
                                  {
                                    "data": {
                                    },
                                    "marks": [
                                    ],
                                    "value": "activity. Lets call this new .xaml file WebBrowser. This file will contain the web browser related logic. We need to import the arguments from the file into Main.xaml file. In order to do this specify the \"WebBrowser.xaml\" where the arguments are the columns from the excel file.",
                                    "nodeType": "text"
                                  }
                                ],
                                "nodeType": "paragraph"
                              }
                            ],
                            "nodeType": "list-item"
                          }
                        ],
                        "nodeType": "ordered-list"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "ordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "With the way we set up this sequence above, it is going to loop through all the excel rows and execute the logic inside the WebBrowser.xaml file for each row in the excel data file.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 2: WebBrowser Logic",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This web browser logic will mostly contain UI Automation related activities.  Depending on what your automation requirements are, it could lead to a fairly complicated set of sequences and case statements. Depending on the browser you are using, you will need to setup chrome or Firefox extensions if you are using those web browsers. My advice is to use IE or firefox! Yes I did say IE because that doesn't require an extension and tends to read click events more accurately than chrome. I suppose this will vary on a case to case basis depending on the UI you are using. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " In summary if most of your business uses IE for their web applications, than RPA in IE. Here is 11 tips your web browser logic that you can use.  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "To open a a web browser to a specific url use the ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Open browser ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "activity",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "To close a tab after performing a UI task use the ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Close Tab",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " activity",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "For new pop up windows use the",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": " Attach Window",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " activity to place the sequence you want to execute in there.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Use an ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "If ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "activity for simple logic checks and ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Switch ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "for checking multiple cases.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Place a series of activities in a ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "sequence",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " activity and name these sequences to something relatable. ",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "For simple mouse clicks use a ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "click ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Activity.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "To type into a text field use ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "set text ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "activity",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "To change the drop down field use a ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "click ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "and then a ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "type Into",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " activity",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "For click activities that take a while to complete or that open a new window specify a DelayAfter or DelayBefore propety ( in milliseconds ). This makes the program pause for a predetermined time before going to the next activity.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Use the ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Try Catch ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "activity to handle errors in your program. Usually use this the beginning of a file or during a more complex sequence, not after every ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "activity",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "!",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Use the debug activity features such as ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Log Message",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " activity for testing and debugging. I tend to log a message to show how many iterations were successfully executed, along with the ids.  ",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "ordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "There you have it, the concepts outlined here are simple yet effective. I have created some RPA to save hundreds of hours of tedious data entry work and hope you this article can help you do the same.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-06-07T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "software"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "4NquTWTep3WS4YD9loJVlj",
        "type": "Entry",
        "createdAt": "2019-06-12T20:21:36.156Z",
        "updatedAt": "2019-07-20T21:08:14.357Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 145,
        "publishedAt": "2019-07-20T21:08:14.357Z",
        "firstPublishedAt": "2019-07-20T20:58:34.838Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 3,
        "version": 146,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "blogPost"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Dynamic Dates in Tableau"
        },
        "slug": {
          "en-US": "dynamic-dates-in-tableau"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "229PlnUW2r5QfOlU4OaVC8"
            }
          }
        },
        "description": {
          "en-US": "Updating reports is no fun. Here is how to create a reports in from SQL or Excel to Tableau that are fully automated"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Show Only The Last Full Week\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "[Created Actual] < [Monday This week] AND \r\n[Created Actual] >= [Monday two weeks ago]\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Where we can use DateTrunc and Date function to get the Monday for this week.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "DATE(DATETRUNC('week', TODAY()))",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "And to get the date for Monday two weeks ago",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-07-27T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "data analysis"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "65HCUrRYA2eM4mZix7AxQo",
        "type": "Entry",
        "createdAt": "2019-06-20T23:21:47.903Z",
        "updatedAt": "2019-06-21T02:06:38.070Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 126,
        "publishedAt": "2019-06-21T02:06:38.070Z",
        "firstPublishedAt": "2019-06-20T23:32:42.089Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 127,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "expressPosts"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Validation in Express"
        },
        "slug": {
          "en-US": "validation-in-express"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "3TamBfAkJ6S2zIOTIE1RMy"
            }
          }
        },
        "description": {
          "en-US": "Validation in express with Express Validator is an easy way to validate your form fields."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To parse the data that is coming from post requests, you need to use the following express middleware.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "i.e in server.js ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Init Middleware\r\napp.use(express.json({ extended: false }));",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Depending on the version of express used, you don't need the body-parser module anymore as this comes with express.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-06-28T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "express"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "4PdG24UcakdOIx8MK8tMLP",
        "type": "Entry",
        "createdAt": "2019-06-21T01:43:50.925Z",
        "updatedAt": "2019-06-21T01:58:23.293Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 243,
        "publishedAt": "2019-06-21T01:58:23.293Z",
        "firstPublishedAt": "2019-06-21T01:58:23.293Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 244,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "mongoDb"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Creating models in Mongoose"
        },
        "slug": {
          "en-US": "creating-models-in-mongoose"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "2oxUo3GAEgf3b6dmOAJ3yB"
            }
          }
        },
        "description": {
          "en-US": "Models are constructors or blueprints for a how we store the data. An instance of a model is a document."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Models are constructors that take a schema (logic on how we store the data) and allow us to return a document ( an instance of a particular schema)\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const mongoose = require('mongoose');\r\n\r\nconst UserSchema = new mongoose.Schema({\r\n  name: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n    unique: true\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  avatar: {\r\n    type: String\r\n  },\r\n  date: {\r\n    type: Date,\r\n    default: Date.now\r\n  }\r\n});\r\n\r\nmodule.exports = User = mongoose.model('user', UserSchema);\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The model method of mongoose, takes in two arguments. 1. The name of the model that we give it and the Schema that we defined above. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "1QTwqCZg8bYlS9ce9zBi5m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-06-20T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "Schema",
            "mongoose"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "4uWgjLNdAXCYLAJFovdpEn",
        "type": "Entry",
        "createdAt": "2019-06-21T17:14:08.244Z",
        "updatedAt": "2019-06-24T20:25:24.669Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 950,
        "publishedAt": "2019-06-24T20:25:24.669Z",
        "firstPublishedAt": "2019-06-24T16:57:01.579Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 7,
        "version": 951,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "blogPost"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Tools and Technologies used in 2019"
        },
        "slug": {
          "en-US": "tools-and-technologies-used-in-2019"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "7MzifYFKnSFYBkCrglUJ6o"
            }
          }
        },
        "description": {
          "en-US": "Tool and Technologies to use as a developer in 2019"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Basics Tools [Beginner]",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Text Editor: VS Code\nWeb Browser: Chrome\nTerminal: Integrated VS Code Terminal, Git Bash.\nVersion Control: Git/Github\nDesign and Mock up: Adobe XD ( optional )\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Basic Knowledge [Beginner]",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "HTML 5\nCSS3, Flexbox, CSS Grids\nCSS variables\nMedia Queries\nMobile First?\nBootstrap Basics\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Deployment [Beginner]",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Domain Names: GoDaddy, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "NameCheap\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Hosting: bluehost, hostgator, ecowebhostings.",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Vanilla Javascript [Beginner]",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Basic JavaScript concepts ( data types, methods, arrays, objects)\nJavaScript Events (mouse clicks, form submissions, mouse hover)\nBasic DOM manipulation\nLoops,functions,conditionals, strings, operators\nJSON",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Better Design [Intermediate]",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "SASS/SCSS\nMedia Queries\nMixins, Functions, Variables, Nesting,Inheritance\nAdvanced Styling using rem or vh and vw instead of px\nAnimations, Transitions",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "More JavaScript [Intermediate] ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Prep for libraries like React and Frameworks like Angular/Vue",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-5"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "ES6 and later ( async/await, arrow functions, destructuring, promises)\nFetch APIs.\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Git and Tools [Intermediate]",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Installing packages: npm, yarn\nversion control: git\nmodule bundling: Webpack, Parcel\nEditor Extensions: ESLint, Prettier, LiveServer, Autocomplete, Javascript (ES6) Code Snippets\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Front-End Frameworks [Intermediate]",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "React (most popular)\nVue (growing in popularity)\nAngular (enterprise level. Popularity slightly fading)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "State Managers",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For React: ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Redux",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\nFor GraphQL: ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Apollo",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Backend (Server Side Languages)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "NodeJs ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "(javascript on the server)\nPython (data science focused)\nPHP ( powers WordPress )\nC#",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Backend Frameworks",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For NodeJs:  ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Express, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Adonis",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For Python: Django, Flask\nFor PHP: Laravel\nFor C#: ASP.NET",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Databases:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "No SQL Databases: MongoDb\nRelational Databases: MS SQL, Postgres, MySQL\nCloud: Firebase, AWS, Azure\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Server Rendered Pages:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Front end frameworks rendered can make things easier and development faster",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For React: Next.js\nFor Vue: Nuxt.js",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "CMS ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Content management systems. Great for freelancers. Give clients ability to create and manage their content. Wordpress is great for most freelance projects which require clients to manage their site content.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For JS: Ghost, Keystone, Contentful, apostrophe,\nFor PHP: ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "Wordpress",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", Drupal",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Deployment and Testing",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Deployment: Github, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "Heroku",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "Netlify",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", Digital Ocean\nTesting: Unit Testing.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Mobile Development",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "React Native,NativeScript,Ionic,Flutter",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Desktop Apps",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Electron",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Future of APIs",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "GraphQL, Apollo",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Future FrameWorks:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Gatsby",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "TypeScript",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "A superset of JS with static typing. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Serverless Architecture",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Netlify, Firebase and AWS.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "AI and Machine Learning",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Python, Tensorflow.js, Brain.js",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Blockchain Tech",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Coinbase API, Solidity, Mist",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "PWA",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Gives users a native app experience.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Web Assembly ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-06-24T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "web development",
            "general",
            "opinion"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "5yPublWfljPIr8D2uoBoXb",
        "type": "Entry",
        "createdAt": "2019-06-22T20:30:50.502Z",
        "updatedAt": "2019-06-22T22:27:50.613Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 1323,
        "publishedAt": "2019-06-22T22:27:50.613Z",
        "firstPublishedAt": "2019-06-22T21:50:06.450Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 6,
        "version": 1324,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "blogPost"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Getting up a stunning html5 landing page fast"
        },
        "slug": {
          "en-US": "getting-up-a-stunning-html5-landing-page-fast"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "2WAa7r5uFELddB0WoKWdYM"
            }
          }
        },
        "description": {
          "en-US": "Blazzingly fast landing pages with html5up and up a custom styling."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "It is often not cost or time effective to redesign everything from scratch, especially for Freelance Developers. For quick, simple and beautiful landing pages customizing an existing template a client wants is often a good cost effect solution, especially when it comes to quick Landing Pages. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In this tutorial, I will show you how this can be done via html5up.  Html5 up has some awesome landing pages than can get up the skeleton for your Website or landing page without using wordpress in record time.  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Prerequisites: ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " Basic web development knowledge. Have nodejs installed on your computer, a code editor (ie. vs code) and familiarity with git/github, Live Server extension.  Also basic some CSS/SCSS knowledge.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 1: Downloading and Running on localhost",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I went to ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://html5up.net/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "html5",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " and picked out the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      },
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "Paradigm Shift ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "template.  The following steps were done:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Open up in VS Code.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "In terminal run: ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "npm init",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " to create a new package.json file and open with live server.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "ordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I opened up this index.html file with ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      },
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Live Server.  ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In VS Code you can do this my installing the popular extension Live Server, which will run your html files on localhost: 5500. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This already gives me the site that is on the demo. Couple things I noticed. The form does not work. Form submission will be linked with ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Netlify ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "later on when we host this site. It will also send a form submission to an email. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The other thing I noticed is that the styles are in sass/scss not css. This is actually a wonderful thing since it is much easier to maintain styling with sass/scss rather than css. To apply a custom style we need node to install a package and run a little script. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 2: Customizing the Theme.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "SET UP",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In VS Code integrated terminal I ran: ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "npm i node-sass ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "which is a popular library that compiles our scss/sass code into plain old css. I then added the following script in the package.json file. See below: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "  \"scripts\": {\r\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1 blah blah blah\",\r\n    \"scss\": \"node-sass --watch assets/sass -o assets/css\"\r\n  },",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Inside your terminal run this script using ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "npm run scss. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This will compile and watch for changes in the sass folder and compile them into the css folder. Here all the sccs files are brought into the `main.scss` file and compiled into the `main.css` file. For other projects you need to be cognisant of the location of your input sass or scss folder and your output css folder relative to your package.json file.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For example: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "node-sass ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "- This is the package we installed using npm",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "--watch ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "- Anything with `--` is a flag. This is a flag that watches for changes in the sass folder",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "-o ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "- is the output flag that says `output the sass into the folder assets/css`",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Sometimes the assets folder will be called something else or there might not be an assets folder. You will need to adjust the sccs script accordingly.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "STYLING",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To make edits to the theme you usually have to do a bit of poking around. However, it is common convention to have all the main colors stored in a variable. Inside the _var.scss file I see the themes colors. For illustration purposes, I will change the $palette colors from green to a light blue and the font-family to cursive. This will change the overall theme colors and fonts right away.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "PICTURES",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Inside the images folder we can simply replace the pictures with some nice pictures found on ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://unsplash.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "unsplashed.com",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". I Find a picture that is not too big and optimize it using ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://tinypng.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "tinypng.com",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " so the page does still loads fast.  I name this newly downloaded picture the same as the one in the images folder, delete than one and then move the new one in.  I typically crop and use pictures that are under 1 mb in a production site.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 3: Creating a Working Form Submission",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Once the rest of your customizations are complete, the last thing we need to do is to have a working contact form before publishing the site and hosting it. To this easily we are going to be using Netlify. In the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      },
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "form ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "tag we need to add the following properties. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "method = \"POST\"",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "data-netlify = \"true\"",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "ordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We can also add a recaptcha for spam filtering: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "data-netlify-recaptcha = \"true\"",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "ordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The final form will look like this:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "<form\r\n  method = \"POST\"\r\n  data-netlify = \"true\"\r\r\n>\r\n  <div class=\"fields\">\r\n\t<div class=\"field half\">\r\n\t\t<input type=\"text\" name=\"name\" id=\"name\" placeholder=\"Name\" />\r\n\t</div>\r\n\t<div class=\"field half\">\r\n\t\t<input type=\"email\" name=\"email\" id=\"email\" placeholder=\"Email\" />\r\n\t</div>\r\n\t<div class=\"field\">\r\n\t\t<textarea name=\"message\" id=\"message\" placeholder=\"Message\" rows=\"7\"></textarea>\r\n\t</div>\r\n\t<div class=\"field\">\r\n\t\t<input type = \"file\" name=\"myfile\" id=\"myfile\" placeholder=\"Upload your file\" rows=\"7\"></input>\r\n\t</div>\r\n\t<div class=\"field\">\r\n\t<div data-netlify-recaptcha = \"true\" ></div>\r\n\t<!-- will only see recpatch upon deployment -->\r\n\t</div>\r\n\t</div>\r\n\t<ul class=\"actions\">\r\n\t\t<li><input type=\"submit\" value=\"Send Message\" class=\"button primary\" /></li>\r\n\t</ul>\r\n</form>",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 4: Git and Hosting",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To publish to your site create a repository. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Create a GIT REPO",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In github.com select a new repo and follow the steps OR In the integrated terminal: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "git init\r\ngit add README.md\r\ngit commit -m \"first commit\"\r\ngit remote add origin https://github.com/your-username/your-repo-name.git\r\ngit push -u origin master\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Create A Netlify Account",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Create a Netlify account for hosting and select your new site from git and choose the repo you created. Under ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "domain settings ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "you can specify a custom domain. \nUnder ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "forms",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " you can add an form notification to slack or your email",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Finally we in Netlify we can go to deploy, trigger deploy, and deploy site our site should be deployed and up and running for the world to see in about under 1 minute. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Here is the final version: ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://dash-intel-demos-001.netlify.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://dash-intel-demos-001.netlify.com",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-06-22T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "web development"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "2cG9Qz7gmRAiKVp7SBZBuF",
        "type": "Entry",
        "createdAt": "2019-06-26T01:26:27.751Z",
        "updatedAt": "2019-10-08T20:01:38.556Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 627,
        "publishedAt": "2019-06-27T22:22:39.372Z",
        "firstPublishedAt": "2019-06-27T17:19:30.906Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 3,
        "version": 630,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "reactPosts"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "React Hooks Intro"
        },
        "slug": {
          "en-US": "react-hooks-intro"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "2KlB7uoCYfUp1czK5sPYsu"
            }
          }
        },
        "description": {
          "en-US": "React Hooks are a new feature of React that let you do things without classes.\nHooks useState and useEffect are covered."
        },
        "bodyRichText": {
          "en-US": {
            "nodeType": "document",
            "data": {
            },
            "content": [
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "React Hooks are a new feature of React that let you do things without classes. This new way of thinking about React definitely encourages a more functional way of programming.",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "heading-2",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "Hooks: useState",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "The useState hook is used to update the state of your application. Here is a simple example to get started.",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "import React, { useState } from 'react';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [count,setCount] = useState(0);\r\n  const [fruit, setFruit] = useState('Bananas');\r\n\r\n  const myFruits = ['Apple','Stawberry','Peach', 'Bananas','Watermelon','Kiwi','Papaya','Blueberry'];\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n       <p> You have clicked me { count } times </p>\r\n       <p> The selected fruit is: { fruit } </p>\r\n       <button onClick = { () => setCount(count + 1) } > Click Me </button>\r\n       <button onClick = { () => setFruit( myFruits   [Math.floor(Math.random()*myFruits.length ) ] ) } > Random Fruit </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "Above, useState is a react hook that allows as to return two things. The current state value and the function that updates this value.  We can have multiple useState hooks in each function. The first useState returns count and setCount with an inital state of 0. The initial state can be any data type. ",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "A popular way of handling events is to use event handlers.  With event handlers we define a new function rather than put the logic inside the onClick event. For example: ",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "function App() {\r\n  const [count,setCount] = useState(0);\r\n\r\n  const buttonCountHandler = () => {\r\n    setCount(prevCount => prevCount + 1);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n       <p> You have clicked me { count } times </p>\r\n       <p> The selected fruit is: { fruit } </p>\r\n       <button onClick = { buttonCountHandler } > Click Me </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "Here we also used prevCount which is like prevState but specific to count inside of useState. Doing it this way is cleaner in my opinion because you don't have all the logic of the function in the return statement. For the fruits we can simply update it using: ",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "  const updateFruitHandler = () => {\r\n    const myFruits = ['Apple','Stawberry','Peach', 'Bananas','Watermelon','Kiwi','Papaya','Blueberry'];\r\n    setFruit( myFruits[Math.floor(Math.random()*myFruits.length ) ] ) \r\n  }",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "and inside the return adding: \n",
                    "marks": [
                    ],
                    "data": {
                    }
                  },
                  {
                    "nodeType": "text",
                    "value": " <button onClick = { updateFruitHandler } > new random Fruit </button>",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "heading-2",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "The Light Switch Example",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "import React, { useState } from 'react';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n  const [isOn, setIsOn] = useState(false);\r\n\r\n  const toggleLightHandler = () => {\r\n    setIsOn( prevIsOn => !prevIsOn );\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n        <h2>Toggle a light</h2>\r\n        <div \r\n            style = {{\r\n              width: '10rem',\r\n              height: '10rem',\r\n              background: isOn ? 'yellow' : 'black' ,\r\n              margin: 'auto'\r\n            }}\r\n        />\r\n\r\n        <button\r\n           style = {{cursor:'pointer'}} \r\n           onClick = {toggleLightHandler}\r\n        > \r\n          {isOn ? 'Turn Off': 'Turn On'}\r\n        </button>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "heading-2",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "Hook: useEffect",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "Fetching data or interacting with any sort of API. Use effect replaces the component life cycles methods.",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "In this example we can use useEffect to replace componentDidMount and componentDidUpdate lifecycles. ",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "import React, { useState, useEffect } from 'react';\r\n",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "useEffect( () => {\r\n    document.title = `The light is turned ${ isOn ? 'on' : 'off' } `;\r\n })",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "heading-2",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "Example Mouse Positioning",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "To track mouse positions, we reach out to the window API. The useEffect hook allow us to update mouse coordinates. Events like these required us to use componentDidMount and componentWillUnmount lifecycles methods. With Hooks in we can do the following:",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "import './App.css';\r\n\r\nfunction App() {\r\n\r\n  const [mousePosition,setMousePosition] = useState( { x: null, y: null } );\r\n\r\n  const setMousePositionHandler = event => {\r\n      setMousePosition( { x: event.x, y: event.y } );\r\n  }\r\n\r\n  useEffect( () => {\r\n    window.addEventListener('mousemove',setMousePositionHandler)\r\n\r\n    return () => {\r\n      window.removeEventListener('mousemove',setMousePositionHandler)\r\n    }\r\n  },[] )\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    <h2>Mouse Position</h2>\r\n    <p>The mouse coordinates x and y are { `${mousePosition.x} and ${mousePosition.y}` }  </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "To only run on mount and unmount we pass the following empty array argument inside of useEffect. We can unmount the event listener by returning the window.removeEventListener.",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "heading-2",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "Online or not?",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "Using useEffect and navigator api to determine whether we are online or not.",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "import React, { useState, useEffect } from 'react';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n\r\n  const [ status, setStatus ] = useState( navigator.onLine );\r\n\r\n  const onlineEventHandler = () => {\r\n    setStatus(true);\r\n  }\r\n\r\n  const offlineEventHandler = () => {\r\n    setStatus(false);\r\n  }\r\n\r\n  useEffect( () => {\r\n    window.addEventListener('online', onlineEventHandler);\r\n    window.addEventListener('offline', offlineEventHandler);\r\n\r\n    return () => {\r\n      window.removeEventListener('online', onlineEventHandler);\r\n      window.removeEventListener('offline', offlineEventHandler);\r\n    }\r\n  },[] )\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    <h2> Online or not?</h2>\r\n    <p> You are now: { status ? 'Online' : 'Offline' } </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "heading-2",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "Geolocation Example",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "import React, { useState, useEffect } from 'react';\r\n\r\nimport './App.css';\r\n\r\nconst initLocationState = {\r\n  latitude: null,\r\n  longitude:null,\r\n  speed:null\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n  let mounted = true; // lets us mount and unmount after use\r\n  // es6 desctructuring on location\r\n  const [ {latitude,longitude,speed} , setLocation ] = useState( initLocationState );\r\n  \r\n  const geoLocationHandler = event => {\r\n    if (mounted) {\r\n      setLocation({\r\n        latitude: event.coords.latitude,\r\n        longitude: event.coords.longitude,\r\n        speed: event.coords.speed\r\n      })\r\n    }\r\n  }\r\n\r\n  useEffect( () => {\r\n\r\n    navigator.geolocation.getCurrentPosition(geoLocationHandler);\r\n    // update the geolocation\r\n    const watchId = navigator.geolocation.watchPosition(geoLocationHandler);\r\n\r\n\r\n    return () => {\r\n      // remove event listeners.\r\n      mounted = false;\r\n      navigator.geolocation.clearWatch(watchId);\r\n    }\r\n  },[] )\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    <h2> Geolocation </h2>\r\n    <p>Latitude: { latitude }</p>\r\n    <p>Longitude: { longitude }</p>\r\n    <p>Speed: { speed ? speed: '0' }</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "heading-2",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "Simple Form with Hooks",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "Doing a simple login form with Hooks takes quite a lot of code up front. Here is a bare bones basis form",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "import React, { useState } from 'react'\r\n\r\nconst Login = (  ) => {\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n  \r\n    const handleSubmit = event => {\r\n      event.preventDefault();\r\n      const userData = {\r\n        username,\r\n        password\r\n      };\r\n      \r\n      // form submit logic goes here.\r\n      console.log(userData);\r\n      // reset the form after\r\n      setUsername(\"\");\r\n      setPassword(\"\");\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n        <h2>Simple Form</h2>\r\n        <form\r\n\r\n          onSubmit={handleSubmit}\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Username\"\r\n            onChange={event => setUsername(event.target.value)}\r\n            value={username}\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            onChange={event => setPassword(event.target.value)}\r\n            value={password}\r\n          />\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n  \r\n    \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "heading-2",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "Simple API Requests with Hooks",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "import React, { useState, useEffect } from 'react';\r\nimport './App.scss'\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  const [results, setResults] = useState([]) // set results to empty array\r\n  const [query, setQuery] = useState('react hooks');\r\n\r\n  try {\r\n      useEffect(() => {\r\n        const fetchData = async () => {\r\n        const results = await axios(\r\n          `http://hn.algolia.com/api/v1/search?query=${query}`,\r\n        );\r\n\r\n      // setstate of results to results array.\r\n        setResults(results.data.hits);\r\n        console.log(results.data.hits);\r\n      };\r\n\r\n      fetchData();\r\n\r\n    }, [query]); // only run on componentDidMount and componentUnmount and query state change\r\n        \r\n  } catch (error) {\r\n      console.log(error)\r\n  }\r\n\r\n  const setQueryHandler = e => {\r\n      setQuery(e.target.value);\r\n  }\r\n\r\n  return (\r\n      <div className=\"App\">\r\n     \r\n          <h4> Search Top 20 Results from API: </h4>\r\n          <input onChange = { setQueryHandler } type=\"text\"/><br/>\r\n        {\r\n            results.map(result => (\r\n              <div key = {result.objectID}> {result.title} </div>\r\n            ))\r\n          }\r\n      </div>\r\n  \r\n  );\r\n}\r\n\r\nexport default App;\r\n",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "heading-2",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "Simple API with form and useRef Hook",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "In this example we create a function getResults to set the state of the results from the query API. We call this function side useEffect so it runs on the initial page load.  We also create a searchEventHandler to only make calls to API on a form submission ( button search click or enter key )",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "import React, { useState, useEffect, useRef } from 'react';\r\nimport './App.scss'\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  const [results, setResults] = useState([]) // set results to empty array\r\n  const [query, setQuery] = useState('react hooks');\r\n  const searchInputRef = useRef();\r\n\r\n  // load search on componentDidMount, componentDidUpdate\r\n  useEffect( () => {\r\n    getResults();\r\n  },[]);\r\n\r\n  const getResults = async () => {\r\n    try {\r\n      const response = await axios.get(`http://hn.algolia.com/api/v1/search?query=${query}`);\r\n      setResults(response.data.hits);\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n  }\r\n\r\n  const searchEventHandler = e => {\r\n    console.log(\"search submit\");\r\n    e.preventDefault();\r\n    getResults();\r\n  }\r\n\r\n  const setQueryHandler = e => {\r\n      setQuery(e.target.value)\r\n  }\r\n\r\n  const clearSearchHandler = () => {\r\n    setQuery('');\r\n    searchInputRef.current.focus(); // put focus back into input handler.\r\n\r\n  }\r\n\r\n  return (\r\n      <div className=\"App\">\r\n     \r\n          <h4> Search Top 20 Results from API: </h4>\r\n          <form onSubmit = { searchEventHandler }>\r\n            <input \r\n              type=\"text\"\r\n              value = { query }\r\n              onChange = { setQueryHandler }\r\n              ref = { searchInputRef }\r\n            />\r\n\r\n            <br/>\r\n            <button type = \"submit\"> Search </button>\r\n            <button onClick = { clearSearchHandler } type = \"button\"> Clear </button>\r\n          </form>\r\n         \r\n\r\n          {\r\n            results.map(result => (\r\n              <div key = {result.objectID}> {result.title} </div>\r\n            ))\r\n          }\r\n      </div>\r\n  \r\n  );\r\n}\r\n\r\nexport default App;\r\n",
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "\nSee github for source code: ",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              },
              {
                "nodeType": "paragraph",
                "content": [
                  {
                    "nodeType": "text",
                    "value": "",
                    "marks": [
                    ],
                    "data": {
                    }
                  },
                  {
                    "nodeType": "hyperlink",
                    "content": [
                      {
                        "nodeType": "text",
                        "value": "https://github.com/arhoy/react-hooks-intro",
                        "marks": [
                        ],
                        "data": {
                        }
                      }
                    ],
                    "data": {
                      "uri": "https://github.com/arhoy/react-hooks-intro"
                    }
                  },
                  {
                    "nodeType": "text",
                    "value": "\n\n\n",
                    "marks": [
                    ],
                    "data": {
                    }
                  }
                ],
                "data": {
                }
              }
            ]
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-06-14T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "react hooks"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "1ZLjzoOKeEDO9YYSlOWsPV",
        "type": "Entry",
        "createdAt": "2019-07-05T20:59:36.651Z",
        "updatedAt": "2019-07-20T21:13:06.857Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 516,
        "publishedAt": "2019-07-20T21:13:06.857Z",
        "firstPublishedAt": "2019-07-20T21:13:06.857Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 517,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "blogPost"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Adding custom favicons to your react app"
        },
        "slug": {
          "en-US": "adding-custom-favicons-to-your-react-app"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "7o2BaLpSK1c7EloZ7nu1Vk"
            }
          }
        },
        "description": {
          "en-US": "Creating custom free favicons using favion.io and LunaPic."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In a previous post I mention a great site called",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://favicon.io"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": " favicon.io",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " for using a wide range of free favicons on your site. What if you would like your own custom favicon and or the options on the site do not suffice. There is a free and easy way to do this.\r\n\r\n\r\nUse the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://favicon.io/favicon-converter/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "favicon convertor",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " to convert an image to a favicon. Now you just need a custom image. If you don't have one and easy, free way to create a custom image is to use PiktoChart.  I created an image using PiktoChart and used a cool graphic from the graphics library. After downloading this as a PDF, I wanted to make the background transparent. For this, a used another free, easy to use online tool called ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www131.lunapic.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "LunaPic",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " which converted the background to transparent. This was then uploaded the the favicon convertor and by transparent custom favicon was ready.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Replacing this in a React site is easy. I simply replace the favicon file in the public folder. After a full page reload, you should see the new transparent favicon! ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-07-18T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "general",
            "web development"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "3UgojhWgiWEQFUlQnGtwMi",
        "type": "Entry",
        "createdAt": "2019-07-15T18:10:26.030Z",
        "updatedAt": "2019-07-15T23:58:06.704Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 1170,
        "publishedAt": "2019-07-15T23:58:06.704Z",
        "firstPublishedAt": "2019-07-15T20:41:26.186Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 6,
        "version": 1171,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "mongoDb"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Using Express with Mongoose"
        },
        "slug": {
          "en-US": "using-express-with-mongoose"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "6RWlUjNig50DgggZF9V9rW"
            }
          }
        },
        "description": {
          "en-US": "Using Express with Mongoose to find, query, filter, sort and manipulate our data to our liking."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Overview",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This post will assume that your comfortable or familiar with crud operations in express and have some familiarity with mongoose. As you know mongoose is an layer of abstraction or superset that sits on top of mongoDb, similar to how jQuery is a layer of abstraction sitting on top of javascript.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In the last section we create a Task model schema and in this section we will add a few more items to that model to give some examples of how we can make a more advanced API.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Starting Examples: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Here is a starting example, that will get all the results in the Tour model using the find method with no parameters.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Type         :   GET\r\n// Route        :   /api/tours\r\n// Description  :   Get all the tours\r\n// Access       :   Public - anyone can access.\r\nrouter.get('/', async (req, res) => {\r\n    try {\r\n        const tour = await Tour.find();\r  \r\n          // send back tours array.\r\n        res.json(tour)\r\n\r\n    } catch (error) {\r\n        res.status(400).json({msg: `There as an error with the /api/tours route`,error})\r\n    }\r\n})\r ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To set up filtering, we need the pass some arguments as key/value pairs to the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "find ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "method. For example the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "tour ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "document now becomes: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "  const tour = await Tour.find({\r\n            duration: 5,\r\n            difficulty: 'easy'\r\n        }); ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Alternatively using mongoose methods we can do something like: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const tour = await Tour.find()\r\n            .where('duration').equals(5)\r\n            .where('difficulty').equals('easy')  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The benefit of doing it this way is when we want to do some advanced filtering and take advantage of the built in mongoose methods like ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "gt",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "gte",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "lt",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "lte.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For example: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const tour = await Tour.find()\r\n            .where('duration').gt(5)\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Or alternatively: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const tour = await Tour.find({duration: {$gt:10}}) ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Using req.query:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Using ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "req.query ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "in the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "find ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "method allows us to parse our ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "query strings",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " from the url. For example, in postman make the following request to an endpoint with query strings like that below ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "http://localhost:5000/api/tours?duration=5&difficulty=easy",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Now to find, ie. return only the data with those parameters simply change the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "tour ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "document to: \n\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const tour = await Tour.find(req.query) ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Modifying our Express API.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "When you go to a website like amazon.com or indeed.com you often see more advanced query strings that implement sort and pagination. Since we don't want to query our data for things like ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "page=2",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " or ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "sort=ASC",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " we need to exclude these and not pass it into the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "find ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "method.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const queryObj = {...req.query}\r\n        const excludedFields = ['page', 'sort', 'limit', 'fields'];\r\n        excludedFields.forEach( el => delete queryObj[el] );\r\n        const tour = await Tour.find(queryObj)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This little trick enables us to exclude the page, sort, limit and fields query strings to the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "find ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "method.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\nApplying Greater than or Less than logic",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "So far our query strings can only handle simple requests, ie. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "duration=5",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". What if we need to handle more advanced filtering. For example when searching on a auto dealership website, we want to see all models between a certain price range. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The query string is could look something like this: \n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "http://localhost:5000/api/tours?duration[gte]=5&price[lte]500",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "req.query",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " we get back from the url is almost the same as the query needed to be passed into the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "mongoose.find",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " method to query the correct data. The only difference is that the query will not have a",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": " $ ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "symbol in front of it, which denotes an operator in mongoDb. \nUsing regular expressions we can add in this ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "$",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " sign in front of the operators. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The steps require using a regular expression to replace certain instances of keywords we want to look. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 1: Turn query object to query string:\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "  let queryString = JSON.stringify(queryObj)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 2: Replace the keywords, lte, lt, gt and gte with the mongoose equivalents.\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": " // replace gte, gt, lte, lt => $gte, $gt, $lte, $lt\r\n        queryString = queryString.replace(/\\b(gte|gt|lt|lte)\\b/g, match => `$${match}`);",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 3: Pass in this new queryString as an object to be filtered by the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "find ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "method\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const tour = await Tour.find(JSON.parse(queryString));",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Sorting ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For sorting, we can do the following. First will store the result into an intermediate variable, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "query ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "and then return the final tour document as shown below:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "let query = Tour.find(JSON.parse(queryString));\r\n\r\n        // Sorting\r\n        if( req.query.sort ) {\r\n             query.sort(req.query.sort);\r\n        }\r\n        const tour = await query;\r\n          // send back tours array.\r\n        res.json(tour) ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In postman, we can then make the following GET request:\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "http://localhost:5000/api/tours?sort=-ratingsAverage\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "which will sort the data by ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "ratingsAverage ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "in a descending order",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Sorting multiple parameters",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We can improve the sort functionality by allowing the user to sort by multiple parameters in the case there is a tie.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To handle the following request from postman:\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "http://localhost:5000/api/tours?sort=-ratingsAverage,name ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In mongoose, we can specify multiple sorts by passing in as many parameters as we like using spaces. Since the url does not spaces, but commas separating the sorting parameters we can fix this by.\n\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Sorting\r\n   if( req.query.sort ) {\r\n       const sortBy = req.query.sort.split(',').join(' ');\r\n        query.sort(sortBy);\r\n   } ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Selecting only certain fields",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To select only certain fields we can use the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "select ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "method that is available on a mongoose ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "document",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". The select method in mongoose you specify the fields you want separated by spaces so similar to the sort method we do the following: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Field limits\r\n        if( req.query.fields) {\r\n            const fields = req.query.fields.split(',').join(' ');\r\n            query.select(fields);\r\r\n        } ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Note if you want to exclude certain fields than prefix the field name with a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "-",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " symbol.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To hide a specific field, we can also go into the model and use: ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "select: false",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " option.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Pagination",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To implement pagination with the following simple formula on line 3. If the number of results to skip is greater than the actual number of results in the document, than we can throw an error.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": " // Pagination\r\n        const page = req.query.page * 1 || 1;\r\n        const limit = req.query.limit * 1 || 100;\r\n\r\n        const skip = (page - 1) * limit ;\r\n        if( req.query.page ) {\r\n            const numTours = await Tour.countDocuments();\r\n            if( skip >= numTours) {\r\n                throw new Error('This page does not exist!');\r\n            }\r\n        }\r\n\r\n        query.skip(skip).limit(limit);\r  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Creating a Top 5 query route.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "It could be handy to have a top 5 tours route. For this, we can predefine our price, limits and other things that must meet the criteria of a top 5 tour. For example: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Type         :   GET\r\n// Route        :   /api/tours/top-5-tours\r\n// Description  :   Get all top 5 tours\r\n// Access       :   Public - anyone can access.\r\nrouter.get('/top-5-tours', async (req,res) => {\r\n    try {\r\n        let query = Tour.find({\r\n            ratingsAverage: {$gte: 4.8}\r\n        });\r\n        query.limit(5).sort('-ratingsAverage -price').select('name price difficulty summary ratingsAverage');\r\n        const tour = await query;\r\n        res.json(tour)\r\n    } catch (error) {\r\n        res.status(400).json({msg: `There as an error with the /api/tours/top-5-tours route`,error})\r\n    }\r\n}) ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "1QTwqCZg8bYlS9ce9zBi5m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-06-20T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "Schema",
            "mongoose"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "2AkHdy6ru2csKDiuIXU3R6",
        "type": "Entry",
        "createdAt": "2019-07-18T21:22:15.038Z",
        "updatedAt": "2019-07-18T23:09:06.441Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 548,
        "publishedAt": "2019-07-18T23:09:06.441Z",
        "firstPublishedAt": "2019-07-18T23:09:06.441Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 549,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "mongoDb"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Aggregating data using mongo"
        },
        "slug": {
          "en-US": "aggregating-data-using-mongo"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "ipUEWWTCcqYCIW8g1UH0V"
            }
          }
        },
        "description": {
          "en-US": "For those familiar with querying and aggregating data via sql, doing it in using a nosql database like mongo is very similar. "
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For those familiar with querying and aggregating data via sql, doing it in using a nosql database like mongo is very similar.  Though the syntax looks very different (everything is grouped into objects )  the concepts are the same. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Building off the previous article, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.cravejs.com/articles/3UgojhWgiWEQFUlQnGtwMi"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "express with mongoose",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ",  it assumes you understand and are familiar with sending a receiving data using express and mongoose. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example 1: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Type             :   GET\r\n// Route            :   api/tasks/tour-stats\r\n// Description      :   Get the tours stats\r\n// Access           :   PUBLIC anyone can see stats\r\nrouter.get('/tour-stats', async (req,res) => {\r\n    try {\r\n        const stats = await Tour.aggregate([\r\n            {\r\n                $match: { ratingsAverage: { $gt: 4.5 } }\r\n            },\r\n            {\r\n                $group: { \r\n                    _id: {\r\n                        difficulty:'$difficulty',\r\n                        // averageRatings: '$ratingsAverage'\r\n                    },\r\n                    numTours:       { $sum  :1 },\r\n                    numRatings:     { $sum  :'$ratingsQuantity' },\r\n                    avgRating:      { $avg  :'$ratingsAverage' },\r\n                    avgPrice:       { $avg  :'$price' },\r\n                    minPrice:       { $min  :'$price' },\r\n                    maxPrice:       { $max  :'$price' }\r\n                }\r\n            },\r\n            {\r\n                $sort: {avgPrice: 1}\r\n            }\r\n                \r\n\r\n        ])\r\n        res.json(stats);\r\n    } catch (error) {\r\n        res.status(500).json({msg:`Error in get request /tour-stats, ${error}`})\r\n    }\r\n}) ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "1. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "$match, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "is a mongo operator similar to the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "WHERE ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "clause in SQL.  It filters the data to show only the data meeting the specified requirements.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "2. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "$group, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "is a mongo operator similar to the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "GROUP BY ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "clause in SQL.  It groups the data specified inside the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "_id object ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "which is required.  You can specify multiple \"columns\" to group where the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "key ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "is the name of the column you give and the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "value ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "is the column name (prefixed by the $ sign)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If you don't want to group by anything, than specify id as null like  ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "_id : null ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Also within the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "$group ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "object, specify what you want to aggregate, where the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "key ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "is again the name of the aggregation that you decide on and the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "value ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "is an object where you specify the aggregation operator and the column name.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "3. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "$sort, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "another mongo operator similar to ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "SORT BY",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " in SQL. When we get to sorting, our data is already grouped by the following columns specified in the group operation (ie. numTours, numRatings, etc). We have to pick one of these columns to sort by.  Ascending is 1 and descending is -1.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Once you understand that everything is specified as objects in mongo, it becomes much easier to understand what is going on, even if the syntax might look a bit strange for those familiar with querying with a flavour of SQL.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example 2: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Type             :   GET\r\n// Route            :   api/tasks/monthly-plan/:year\r\n// Description      :   Get the most popular tour months\r\n// Access           :   PUBLIC anyone can see stats\r\nrouter.get('/monthly-plan/:year', async (req,res) => {\r\n    try {\r\n        const year = req.params.year *1;\r\n        const plan = await Tour.aggregate([\r\n            {\r\n                $unwind: '$startDates'\r\n            },\r\n            {\r\n                $match: { \r\n                    startDates: {\r\n                        $gte: new Date(`${year}-01-01`),\r\n                        $lt:  new Date(`${year+1}-01-01`)\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: {\r\n                         $month: '$startDates'\r\n                    },\r\n                    countTours: {$sum: 1},\r\n                    tours: { $push: '$name' }\r\n                }\r\n            },\r\n            {\r\n                $addFields: { \r\n                    month: '$_id' \r\n                }\r\n            },\r\n            {\r\n                $sort:{\r\n                    month: 1\r\n                }\r\n            },\r\n            {\r\n                $project: {\r\n                    _id: 0\r\n                }\r\n            },\r\n            {\r\n                $limit: 10\r\n            },\r\n            {\r\n                $addFields: {\r\n                    month: {\r\n                        $let: {\r\n                            vars: {\r\n                                monthsInString: [, 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul','Aug','Sep','Oct','Nov','Dec']\r\n                            },\r\n                            in: {\r\n                                $arrayElemAt: ['$$monthsInString', '$month']\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        ]);\r\n\r\n        res.json({dataItems: plan.length, data: plan });\r\n    } catch (error) {\r\n        \r\n    }\r\n})",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-07-25T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "mongoose"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "7g7S0OUebOIxjmueNPeAx0",
        "type": "Entry",
        "createdAt": "2019-07-22T19:09:03.347Z",
        "updatedAt": "2019-07-22T22:05:51.486Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 1327,
        "publishedAt": "2019-07-22T22:05:51.486Z",
        "firstPublishedAt": "2019-07-22T22:05:51.486Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 1328,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "reactPosts"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Google Custom Search in a React/Redux app"
        },
        "slug": {
          "en-US": "google-custom-search-in-a-react-redux-app"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "7FGU80SFJeo06Zofgj7WL2"
            }
          }
        },
        "description": {
          "en-US": "Using the Google custom search API in your React / Redux app."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If you are looking for a simple to implement website search on your site, that is very easy to set up and handled completely by someone else, ie. Google,  then ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      },
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Google Custom Search",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " might be a good solution.  While you can directly get the code through this site: ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://cse.google.com/cse/all"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://cse.google.com/cse/all",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", I choose to go through the API route for three main reasons.  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "1. I can completely customize the front end UI. In fact, it does not even look like it is coming from Google on the front end. If you use the code above, it will be very clear that it is google powered. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "2. I can store the request in a Redux state and even a database, which could be important for various business or UX purposes. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "3. No Ads. By that I mean no ads while people are searching on your website. This is important as you want to drive people to ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "your",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " search results not some other ad sponsored search result",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Since this is an article on Google Custom Search in a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "React/Redux app ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I will assume you are comfortable or somewhat familiar with React/Redux. I will also be using Express/Postman for the backend so you should be comfortable with concepts like ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "async",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "await",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Overview",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Before writing any code,  I needed to think what exactly it is I wanted to do. I wanted to implement site wide custom search on my web app. This search input would be on the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Header.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file and would be on every page of my site. When a user types into it, the search results would be stored in redux and the user would be redirected to the Google indexed search results page.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 1: Google Custom Search Engine API",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Head over to ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://developers.google.com/custom-search/v1/overview"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://developers.google.com/custom-search/v1/overview",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " to get an custom search JSON API key from Google and create new project",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                  "target": {
                    "sys": {
                      "id": "7ANmVymGEOaar3aNLUXtBk",
                      "type": "Link",
                      "linkType": "Asset"
                    }
                  }
                },
                "content": [
                ],
                "nodeType": "embedded-asset-block"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Next head over to ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://cse.google.com/all"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://cse.google.com/all",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " and add a search engine for your web app.  Here you will need to grab the cx id, aka ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "search engine id",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". This will look like a long string like this sample cx id. You will need to use your own.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                  "target": {
                    "sys": {
                      "id": "EZxOxl5Q6r9lIoJaOBnTh",
                      "type": "Link",
                      "linkType": "Asset"
                    }
                  }
                },
                "content": [
                ],
                "nodeType": "embedded-asset-block"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://developers.google.com/custom-search/v1/using_rest"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://developers.google.com/custom-search/v1/using_rest",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Each request will require an API key, a custom search ID and query.  For example",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "https://www.googleapis.com/customsearch/v1?key=INSERT_YOUR_API_KEY&cx=CUSTOM_SEARCH_ID&q=products",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Here the query is ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "`products`",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You can try out the url in chrome or any web browser to see if it works.  If you have any issues so far refer to the docs ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://developers.google.com/custom-search/v1/using_rest"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "here",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n\n\nNow let's call the google custom search API on the server side. It will be in a file called  ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "gcse.js.",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "  For me, this file is going to be in the routes/api directory where all my other routes are stored. \n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "My gcse.js file in VS code looks like:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const express = require('express');\r\nconst request = require('request');\r\nconst router = express.Router();\r\n\r\nconst googleAPIKEY = require('../../config/keys').googleAPIKEY;\r\nconst customerSearchEngineID = require('../../config/keys').customerSearchEngineID; \r\n\r\nrouter.get('/', (req, res) => {\r\n    try {\r\n        res.json({msg:'GCSE works!'})\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n})\r\n\r\n// Type     :   GET\r\n// Route    :   api/google-custom-search/:query\r\n// Desc     :   Google custom search api\r\n// Access   :   Public, anyone can search.\r\nrouter.get('/:query', (req, res) => {\r\n\r\n    try {\r\n        const options = {\r\n            uri: `https://www.googleapis.com/customsearch/v1?key=${googleAPIKEY}&cx=${customerSearchEngineID}&q=${req.params.query}`,\r\n            method: 'GET',\r\n            headers : {'user-agent':'nodejs'}\r\n        }\r\n        request(options, (error, response, body)=> {\r\n            if( error ) console.log(error);\r\n            if(response.statusCode !== 200) return res.status(404).json({msg:'Query could not run'});\r\n            const data = JSON.parse(body).items;\r\n\r\n            // send back the array of items\r\n            if(data && data.length > 0){\r\n                res.json(data); \r\n            } else {\r\n                res.status(404).send('There is no data to return');\r\n            }\r\n         \r\n        })\r\n      \r\n    } catch (error) {\r\n        res.status(500).send('Server Error',error);\r\n    }\r\n  \r\n})\r\n\r\n\r\nmodule.exports = router;",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I have used a config file to hide my sensitive API keys and .gitignore to make sure I don't ever push the values to github. You can read more about that here and how to use this in a production environment using environment variables.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You can test this URL out in postman with the following sample call with react being the search query, q.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "http://localhost:3000/api/gcse/react",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I am using ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "request",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " library, but you could use ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "axios",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " or fetch if you prefer. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 2: Setting up our actions",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Inside the actions folder, I have created a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "searchActions.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file which will be called in ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Header.js ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "file when someone searches for something. This will be a fairly simple action file which can dispatch three types of options GOOGLE_SEARCH, GOOGLE_SEARCH_ERROR and CLEAR_GOOGLE_SEARCH.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The first action type will call the end point with a query from the input on the front end. It will send back a payload with the searchResults (an array) and a query (a string) of what the user searched. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The searchActions.js file: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import axios from 'axios';\r\nimport { GOOGLE_SEARCH, GOOGLE_SEARCH_ERROR, CLEAR_GOOGLE_SEARCH } from './types';\r\n\r\nexport const googleCustomSearch = query => async dispatch => {\r\n\r\n    try {\r\n        const res = await axios.get(`/api/gcse/${query}`);\r\n        if(res === null || res === [] || res === ''){\r\n            dispatch({\r\n                type: GOOGLE_SEARCH_ERROR,\r\n                payload: {msg: 'No Search Results'}\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: GOOGLE_SEARCH,\r\n                payload: {\r\n                    searchResults:res.data,\r\n                    query:query\r\n                }\r\n            })\r\n        }\r\n    \r\n    } catch (error) {\r\n        console.error(error);\r\n        dispatch({\r\n            type: GOOGLE_SEARCH_ERROR,\r\n            payload: {msg: 'Oops, could not find what you were searching for!'}\r\n        })\r\n    }\r\n}\r\n\r\nexport const clearGoogleCustomerSearch = () => dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: CLEAR_GOOGLE_SEARCH\r\n        })\r\n    } catch (error) {\r\n        console.error('Could not clear the search results', error)\r\n    }\r\n}",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In case you are wondering why I have types file. This is where I store all my action types so they are stored in variables, and I only need to update in one place.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The types.js file \n\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// GOOGLE CUSTOM SEARCH \r\nexport const GOOGLE_SEARCH = 'GOOGLE_SEARCH';\r\nexport const GOOGLE_SEARCH_ERROR = 'GOOGLE_SEARCH_ERROR';\r\nexport const CLEAR_GOOGLE_SEARCH = 'CLEAR_GOOGLE_SEARCH';\r ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "STEP 3. Adding in the search reducer",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Now that we have the action file set up, we need to set up the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "searchReducer.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file inside the reducers folder. A fairly standard set up is shown below:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import {\r\n    GOOGLE_SEARCH,\r\n    GOOGLE_SEARCH_ERROR,\r\n    CLEAR_GOOGLE_SEARCH\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    searchResults: [],\r\n    query: '',\r\n    loading: true,\r\n    error: {}\r\n}\r\n\r\nexport default function( state = initialState, action ){ \r\n    const { type, payload } = action;\r\n    switch( type ){\r\n       case GOOGLE_SEARCH:\r\n           return {\r\n               ...state,\r\n               searchResults: payload.searchResults,\r\n               loading: false,\r\n               query: payload.query,\r\n               error: {}\r\n           } \r\n        case GOOGLE_SEARCH_ERROR:\r\n            return {\r\n                ...state,\r\n                error: payload,\r\n                loading: false\r\n            }\r\n        case CLEAR_GOOGLE_SEARCH:\r\n            return {\r\n                ...state,\r\n                searchResults: [],\r\n                query: '',\r\n                loading: true,\r\n                error: {}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 4: Calling the Action in our React App",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We can finally call the googleCustomSearch and clearGoogleCustomSearch actions in our ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Header.js ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "file",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Will have a form component which will call ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "siteSearchHandler. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This function will than call the two actions above whenever our form is submitted.  In this case the form is a simple input, but I decided to wrap it in a form tag so that ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "siteSearchHandler",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " gets called when the enter key is pressed. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The form component: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "    <form \r\n        onSubmit = {siteSearchHandler.bind(this)}>\r\n    <div>\r\n        <input\r\n            type=\"text\" \r\n            id=\"site-search-google\" \r\n            name=\"query\" \r\n            title=\"Search Site\" \r\n            alt=\"Search Text\" maxLength=\"256\" \r\n            placeholder = \"Search Site\" \r\n            value = { query }\r\n            onChange={e => this.onChange(e)}\r\n        />\r\n    </div>\r\n    </form>",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "siteSearchHandler:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "    const siteSearchHandler = e => {\r\n        e.preventDefault();\r\r\n        clearGoogleCustomSearch();\r\n        googleCustomSearch(this.state.query);\r\n        history.push('/search');\r\n    } ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The Header.js file is your typical functional based component ( shortcut ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "racfp",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " + ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "tab",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " in VS code with the ReactJs code snippets extension ) ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import React, {useState} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { googleCustomSearch, clearGoogleCustomSearch } from '../../actions/searchActions';\r\n\r\nconst Header = ({googleCustomSearch, clearGoogleCustomSearch, history}) => {\r\n\r\n    const [query, setQuery] = useState('');\r\n\r\n    const siteSearchHandler = e => {\r\n        e.preventDefault();\r\n        clearGoogleCustomSearch();\r\n        googleCustomSearch(query);\r\n        history.push('/search');\r\n    }\r\n    const onChangeHandler = e => {\r\n        setQuery(e.target.value);\r\n    }\r\n    return (\r\n        <div> \r\n            <form \r\n                onSubmit = {siteSearchHandler.bind(this)}>\r\n                <div>\r\n                    <input\r\n                        type=\"text\" \r\n                        id=\"site-search-google\" \r\n                        name=\"query\" \r\n                        title=\"Search Site\" \r\n                        alt=\"Search Text\" maxLength=\"50\" \r\n                        placeholder = \"Search Site\" \r\n                        value = { query }\r\n                        onChange={e => onChangeHandler(e)}\r\n                    />\r\n                </div>\r\n            </form> \r\n        </div>\r\n    )\r\n}\r\n\r\nHeader.propTypes = {\r\n    search: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    search: state.search\r\n})\r\n\r\nexport default connect(mapStateToProps, { googleCustomSearch, clearGoogleCustomSearch })(withRouter(Header))\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Everything is based as props into the functional based Header component, including the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "history,",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " which we are getting by wrapping our Header component with the hoc (higher order component)  ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "withRouter",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". This allows as to move to a new route, '/search' where all our search results are displayed. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 5: Displaying the search results.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This should be quite straight forward now. All we need to do is grab our search results from the redux state and map over it, to show the different routes a user can go to in our site from the search results.  One thing I noticed was that Google was indexing some http results from my site. To fix that quickly I simply used a regular expression. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const link = url.replace(/^http:\\/\\//i, 'https://').replace(\"https://www.cravejs.com/\",\"/\");\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\nThe final ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "searchResults.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ":",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import React, { Fragment } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport LoadingSpinner from '../utils/LoadingSpinner';\r\n\r\nconst SearchResults = ({search: {loading, searchResults, error, query}, history}) => {\r\n    \r\n    const goToLink = url => {\r\n        const link = url.replace(/^http:\\/\\//i, 'https://').replace(\"https://www.cravejs.com/\",\"/\");\r\n       \r\n        history.push(link);\r\n    }\r\n    if ( loading ) return   <div className = \"SearchResults__summary\"> <LoadingSpinner/> </div>; \r\n\r\n    if(searchResults){\r\n\r\n        return (\r\n                error && error.msg ? \r\n                <div className = \"SearchResults__summary\"> Oops could not find what you were looking for </div> :\r\n\r\n                <Fragment>\r\n                    \r\n                    { \r\n                        searchResults.length > 0 ? \r\n                            <div className = \"SearchResults__summary\">\r\n                            There are { searchResults.length } results for <strong> {query} </strong> \r\n                            </div> : \r\n                            <div className = \"SearchResults__summary\">Please start searching at the top</div>\r\n                    }\r\n                  \r\n                <div className = \"SearchResults\">  \r\n                    <div className = \"SearchResults__list\">\r\n                    { searchResults && searchResults.map( (result,i) => (\r\n                        <div onClick = { goToLink.bind(this,result.link) } className = \"SearchResults__link\" to = {result.link} key = {`${i} - ${result.title}`} > \r\n                            <h4> { result.title } </h4>\r\n                            <p> {result.snippet}  </p>\r\n                        </div>\r\n                    )) }\r\n                    </div>\r\n                </div>\r\n                <div className = \"SearchResults__message\"> Still haven't find what you are looking for? Try the explore option above </div>\r\n                </Fragment>\r\n               \r\n        )      \r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    search: state.search\r\n})\r\n\r\nexport default connect( mapStateToProps )(withRouter(SearchResults))\r ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Summary",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This article quickly illustrates how to use React/Redux with Google Custom Search. The steps involved are first getting the API to work and testing the request and response with a tool like Postman. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Next an action file is created to call this API endpoint.  This action dispatches a type and payload which triggers the reducer to change the state of the app. In React, we can then use that state in various components by using connecting React component with Redux. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Final Thoughts",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In order for Google Custom Search to work better, we should submit a site map and make our app SEO friendly. This will make our site wide Google Custom search work better and will also enable us to appear in Google search results. Win win right ?! I will be writing an article on this soon.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " \n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-07-30T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "react",
            "redux",
            "react hooks",
            "intermediate react"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "4QDUlwUDI96rgB2P6ge3TG",
        "type": "Entry",
        "createdAt": "2019-10-08T19:26:20.455Z",
        "updatedAt": "2019-10-08T19:42:32.701Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 30,
        "publishedAt": "2019-10-08T19:42:32.701Z",
        "firstPublishedAt": "2019-10-08T19:32:34.874Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 4,
        "version": 31,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Validation in Express"
        },
        "slug": {
          "en-US": "validation-in-express"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "6ZP25WSCaur4DG6OLL8chp"
            }
          }
        },
        "description": {
          "en-US": "Validation in express with Express Validator is an easy way to validate your form fields."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To parse the data that is coming from post requests, you need to use the following express middleware.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "i.e in server.js ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Init Middleware\r\napp.use(express.json({ extended: false }));",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Depending on the version of express used, you don't need the body-parser module anymore as this comes with express.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-06-28T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "express",
            "validation in express"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "6lOjXbkEHNwhSyuqTbmgEs",
        "type": "Entry",
        "createdAt": "2019-10-08T19:43:46.456Z",
        "updatedAt": "2019-10-08T19:45:17.241Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 50,
        "publishedAt": "2019-10-08T19:45:17.241Z",
        "firstPublishedAt": "2019-10-08T19:45:17.241Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 51,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Some things to know when starting with Express"
        },
        "slug": {
          "en-US": "some-things-to-know-when-starting-with-express"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "6ZP25WSCaur4DG6OLL8chp"
            }
          }
        },
        "description": {
          "en-US": "Express is a #1 most popular framework for developers using node.js. Express is build real world applications and simplify the complexities and amount of code needed to be written in node.js."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "1. Middleware: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Middleware is blabh blah blah. To use middleware need use the use method. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Some examples of middleware are: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "// Init MiddleWare for put and post requests.\r\napp.use(express.json({extended:false}));\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "2. Postman",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For postman, for a post request you have many options on how to test your application.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "One method is to use Body and Raw and JSON(application/json) to test sending an request and response in your application. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Inside the postman body for example...",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "{\n\t\"username\":\"Alex\",\n\t\"email\":\"alex@cravejs.com\"\n}",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "3. Express-validator",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "It is crucial that you validate the data you collect in your app. There is a lot of different ways to do validation, but I think express-validator provides a clean and concise way to do validations in your app. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example: Here is a simple validation route for when a user registers. It includes there name, email and password. The code is fairly self explanatory and you can check the results are working with Postman!",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You can quickly get started by installing the express-validator package.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "npm i express-validator",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Once that is set up include the package in your relevant route file. Since we are registering users I will add the following in the users.js file under the routes/api folder.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const { check, validationResult } = require('express-validator');",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Here, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "validationResult ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "will be called later on the code and req object containing the name, email and password will be passed into it. If all the checks pass, then errors will be an empty object. Otherwise we can return an errors array.  As shown below, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "check ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "will have different methods such as ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "isEmail ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "withMessage ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "that checks whether the req ( user input ) is a email. If it fails to pass the isEmail check, than  withMessage will be called and the custom, specified error message will be shown.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "See full example.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// route:       GET api/users\r\n// description: Register a user\r\n// access     : Public \r\nrouter.post(\r\n    '/',\r\n    [\r\n        check('name','Name is required').not().isEmpty(),\r\n        check('email')\r\n            .isEmail()\r\n            .withMessage('Please enter a valid email'),\r\n        check('password','Please enter a password 8 characters or more')\r\n                .isLength({min:8,max:25})\r\n                .withMessage('Password must be between 8 and 25 characters!')\r\n                .matches(/^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?!.* )(?=.*[^a-zA-Z0-9]).{8,}$/, 'i')\r\n                .withMessage('Password must include one lowercase character, one uppercase character, a number, and a special character.')\r\n    ],\r\n    async (req,res)=> {\r\n        const errors = validationResult(req);\r\n        if(!errors.isEmpty()){\r\n            return res.status(400).json({errors: errors.array()})\r\n        }\r\n        try {\r\n            console.log(req.body);\r\n            res.json({msg:'user is working!'})\r\n        } catch (error) {\r\n            res.status(500).send('server error');\r\n        }\r\n    }\r\n)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We can make our validation as customized as desired as the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "matches ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "method allows us to pass in regular expressions. This rather complicated regular expression is used to check a password matches the following requirements in the message. For more on regular expressions visit my article here.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "4.  Creating a 404 not found route",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Express tries to find the routes in the order they are executed. If it cannot find a matching route, than the response will time out. To avoid that we can add a `404 not found` route after all the routes are defined. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": " // 404 route\r\napp.all('*', ( req, res, next ) => {\r\n  res.status(404).json({msg:`Requested route: ${req.originalUrl} not found!`})\r\n  next();\r\n})  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "5. Global Error Handling",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If we pass an argument into the next() middleware, express assumes that argument is going to be an error. argument. We can improve error handling, by calling next(error) in the catch block like so:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "router.post('/', auth, async (req, res, next) => {\r\n        try {\r\n            const user = await User.findById( req.user.id).select('-password');\r\n            if(!user.admin){\r\n                res.json({msg: 'Access denied'});\r\n            }\r\n            // create new tour from the req.body.\r\n            const tour = await Tour.create(req.body);\r\n            res.json(tour);\r\n        } catch (error) {\r\n            next(error);\r\n        }     \r\n}) ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "An example: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Lets take an example",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-06-28T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "express",
            "express overview",
            "express summary"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "4HZxpHqtsYitUBG07ZSWXF",
        "type": "Entry",
        "createdAt": "2019-10-08T19:45:42.043Z",
        "updatedAt": "2019-10-08T19:46:52.710Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 7,
        "publishedAt": "2019-10-08T19:46:52.710Z",
        "firstPublishedAt": "2019-10-08T19:46:52.710Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 8,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Protecting routes with Auth Middleware"
        },
        "slug": {
          "en-US": "protecting-routes-with-auth-middleware"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "6ZP25WSCaur4DG6OLL8chp"
            }
          }
        },
        "description": {
          "en-US": "Express is a #1 most popular framework for developers using node.js. Express is build real world applications and simplify the complexities and amount of code needed to be written in node.js."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Protecting routes with auth middleware is something that is crucial for any web app.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Here is an implementation of auth middleware that can be used to protect your routes. I have this in the directory, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "middleware ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "in an ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "auth.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": " const jwt = require('jsonwebtoken');\r\nconst jwtSecret = require('../config/keys').jwtSecret;\r\nconst AppError = require('../utils/appError');\r\n\r\nmodule.exports = async function(req, res, next) {\r\n  // Get token from header\r\n  const token = req.header('x-auth-token');\r\n\r\n  // Check if not token\r\n  if (!token) {\r\n    return res.status(401).json({ msg: 'No token, authorization denied' });\r\n  }\r\n\r\n  // Verify tokens\r\n  try {\r\n    // verify token\r\n    const decoded = jwt.verify(token, jwtSecret);\r\n    // verify user exists\r\n    const user = await User.findById(decoded.user.id).select('name role');\r\n    if(!user){\r\n      return next(new AppError('User and token mismatch!', 401));\r\n    }\r\n\r\n    // check if user changed password after token issued\r\n    if(user.changedPasswordAfter(decoded.iat) ) {\r\n      return next( new AppError('Password was recently changed',401));\r\n    }\r\n \r\n    // data to send back in request from auth middleware\r\n    req.user = user\r\n\r\n    // grant access to protected route.\r\n    next();\r\n\r\n  } catch (err) {\r\n    res.status(401).json({ msg: 'Token is not valid' });\r\n  }\r\n};\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This article will attempt to break down the code above in several steps. You should be familiar with Express and Mongoose however.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "  // Get token from header  const token = req.header('x-auth-token'); ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If a user is authenticated than they will have a token. This token is generated when the user is logged into the app. For more information about this visit",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      },
                      {
                        "type": "underline"
                      }
                    ],
                    "value": " Logging in users with express ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The first thing we do is check to see if we have a token and verify it using ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      },
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "jwt.verify",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "    // verify token\r\n    const decoded = jwt.verify(token, jwtSecret);",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The second thing we do is to make sure that user exists. We do this finding the user by Id. This Id was stored in the payload of the token, and we can ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "decode ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "it to get back the user in our db. Of course this will only work if you have the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "jwtSecret ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "as well, which is stored in a secure keys file, where the values are never pushed to github!",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "    if(!user){\r\n      return next(new AppError('User and token mismatch!', 401));\r\n    }\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "AppError is an extension of the Error object, see link here. Otherwise you could also do.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "    if(!user){\r\n      return res.status(401).json({msg:'User and token mismatch'});\r\n    }\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Next, we want to make sure the user did not recently change their password. If the password was changed ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "after ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "the token was issued then we will not grant them access to the protected route. On the front end, we can redirect them back to a sign in page.  Here ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "decoded.iat ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "is when the jwt token was issued at. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "   // check if user changed password after token issued\r\n    if(user.passwordRecentlyChanged(decoded.iat) ) {\r\n      return next( new AppError('Password was recently changed',401));\r\n    }",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Where ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "passwordRecentlyChanged ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "is a User method available on all user documents. Inside the User model: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// changed password\r\nUserSchema.methods.passwordRecentlyChanged = function(JWTTimestamp) {\r\n    if(this.passwordChangedAt){\r\n        const passwordChangedAtTimeStamp = parseInt(this.passwordChangedAt.getTime() / 1000,10);\r\n        return passwordChangedAtTimeStamp >= JWTTimestamp;\r\n    }\r\n    return false;\r\n}",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If none of those conditions are met, we will set req.user to user.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "  // data to send back in request from auth middleware\r\n    req.user = user\r\n    // grant access to protected route.\r\n    next();",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This sends back the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "name",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "role ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "of the user to the next function and grants access to the protected route. Note, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "req ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "is an object that is available in the request, response cycle. To this object, add user property and set to ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "user",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", the",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": " ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "document (",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "User ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "instance) from mongoose. I only want to get back ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "name ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "role",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", so select method is used. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "   const user = await User.findById(decoded.user.id).select('name role');",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\nThat is pretty much it for this auth middleware. Here is a simple sample request using the newly created ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "auth ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "middleware. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Type         :   GET\r\n// Route        :   api/users\r\n// Description  :   Get all users from the database\r\n// Access       :   Only logged in users can do this\nrouter.get('/', auth, async (req, res) => {\r\n    try {\r\n\r\n        const users = await User.find().select('-_id name email role');\r\n        res.json(users);\r\n    \r\n\r\n    } catch (error) {\r\n        console.error('There was an error', error);\r\n        res.status(500).send('server error');\r\n    }\r\n})",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If you want different ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "levels of access ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "for logged in users,  see ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "How to created restricted routes for specific users. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-06-28T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "express",
            "middleware",
            "protecting routes"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "zctJsEpnoOWQn1JcQUZrN",
        "type": "Entry",
        "createdAt": "2019-10-08T19:47:48.513Z",
        "updatedAt": "2019-10-08T19:49:57.140Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 24,
        "publishedAt": "2019-10-08T19:49:57.140Z",
        "firstPublishedAt": "2019-10-08T19:49:57.140Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 25,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Logging in a user using Express"
        },
        "slug": {
          "en-US": "logging-in-a-user-using-express"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "6ZP25WSCaur4DG6OLL8chp"
            }
          }
        },
        "description": {
          "en-US": "Logging in a user with Express using jwt and bcrypt in a React app"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "There are many methods to login a user. Here is on method using express, jwt and bcrypt.  See `Registering a user with express` if you have not already.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In our routes/api directory, we will create an auth.js file as below:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const express = require('express');\r\nconst router = express.Router();\r\n\r\nconst auth = require('../../middleware/auth');\r\nconst jwt = require('jsonwebtoken');\r\nconst config = require('../../config/keys').jwtSecret;\r\nconst { check, validationResult } = require('express-validator');\r\n\r\nconst User = require('../../models/User');",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// name         :   Login User\r\n// Type         :   POST\r\n// Route        :   api/auth\r\n// Description  :   Log user in and send token\r\n// Access       :   User must be registered. \r\nrouter.post(\r\n  '/',\r\n  [\r\n    check('email', 'Please include a valid email').isEmail(),\r\n    check('password', 'Password is required').exists()\r\n  ],\r\n  async (req, res) => {\r\n    const errors = validationResult(req);\r\n    if (!errors.isEmpty()) {\r\n      return res.status(400).json({ errors: errors.array() });\r\n    }\r\n\r\n    const { email, password } = req.body;\r\n \r\n    try {\r\n      \r\n      let user = await User.findOne({ email }).select('+password');\r\n\r\n      // user does not exist or password is not correct.\r\n      if (!user || !(await user.checkPassword(password, user.password)) ) {\r\n        return res\r\n          .status(400)\r\n          .json({ errors: [{ msg: 'Invalid Credentials' }] });\r\n      }\r\n    \r\n      const payload = {\r\n        user: {\r\n          id: user.id,\r\n          admin: user.admin\r\n        }\r\n      };\r\n\r\n      jwt.sign(\r\n        payload,\r\n        config,\r\n        { expiresIn: 360000 },\r\n        (err, token) => {\r\n          if (err) throw err;\r\n          res.json({ token });\r\n        }\r\n      );\r\n    } catch (err) {\r\n      console.error(err.message);\r\n      res.status(500).send('Server error');\r\n    }\r\n  }\r\n);\r\n\r\nmodule.exports = router;",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "There is a few steps here.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "1. Find user from database. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "2. Compare the input password the user enters to the password for that user in the database. Since our password is encrypted, we must first encrypt that inputPassword to compare the two passwords.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "That happens inside the User model: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// check password\r\nUserSchema.methods.checkPassword= async function( inputpassword, userPassword ) {\r\n    return await bcrypt.compare(inputpassword, userPassword);\r\n}",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We create this method called checkPassword which is then available on all User documents. It simply encrypts the inputPassword and compares it to our password stored in the database.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-06-28T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "express",
            "authentication",
            "logging in a user in express",
            "login with express"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "3ksgNlEMfK6pCudHQD1ujI",
        "type": "Entry",
        "createdAt": "2019-10-08T19:55:07.396Z",
        "updatedAt": "2019-10-08T20:00:53.517Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 21,
        "publishedAt": "2019-10-08T20:00:53.517Z",
        "firstPublishedAt": "2019-10-08T19:57:58.081Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 22,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Google Custom Search in a React/Redux app"
        },
        "slug": {
          "en-US": "google-custom-search-in-a-react-redux-app"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "6InRD35HLJjYRdVZNFGZHf"
            }
          }
        },
        "description": {
          "en-US": "Google Custom Search in a React/Redux app"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If you are looking for a simple to implement website search on your site, that is very easy to set up and handled completely by someone else, ie. Google,  then ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      },
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Google Custom Search",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " might be a good solution.  While you can directly get the code through this site: ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://cse.google.com/cse/all"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://cse.google.com/cse/all",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", I choose to go through the API route for three main reasons.  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "1. I can completely customize the front end UI. In fact, it does not even look like it is coming from Google on the front end. If you use the code above, it will be very clear that it is google powered. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "2. I can store the request in a Redux state and even a database, which could be important for various business or UX purposes. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "3. No Ads. By that I mean no ads while people are searching on your website. This is important as you want to drive people to ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "your",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " search results not some other ad sponsored search result",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Since this is an article on Google Custom Search in a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "React/Redux app ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I will assume you are comfortable or somewhat familiar with React/Redux. I will also be using Express/Postman for the backend so you should be comfortable with concepts like ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "async",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "await",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Overview",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Before writing any code,  I needed to think what exactly it is I wanted to do. I wanted to implement site wide custom search on my web app. This search input would be on the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Header.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file and would be on every page of my site. When a user types into it, the search results would be stored in redux and the user would be redirected to the Google indexed search results page.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 1: Google Custom Search Engine API",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Head over to ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://developers.google.com/custom-search/v1/overview"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://developers.google.com/custom-search/v1/overview",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " to get an custom search JSON API key from Google and create new project",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                  "target": {
                    "sys": {
                      "id": "7ANmVymGEOaar3aNLUXtBk",
                      "type": "Link",
                      "linkType": "Asset"
                    }
                  }
                },
                "content": [
                ],
                "nodeType": "embedded-asset-block"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Next head over to ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://cse.google.com/all"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://cse.google.com/all",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " and add a search engine for your web app.  Here you will need to grab the cx id, aka ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "search engine id",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". This will look like a long string like this sample cx id. You will need to use your own.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                  "target": {
                    "sys": {
                      "id": "EZxOxl5Q6r9lIoJaOBnTh",
                      "type": "Link",
                      "linkType": "Asset"
                    }
                  }
                },
                "content": [
                ],
                "nodeType": "embedded-asset-block"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://developers.google.com/custom-search/v1/using_rest"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://developers.google.com/custom-search/v1/using_rest",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Each request will require an API key, a custom search ID and query.  For example",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "https://www.googleapis.com/customsearch/v1?key=INSERT_YOUR_API_KEY&cx=CUSTOM_SEARCH_ID&q=products",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Here the query is ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "`products`",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You can try out the url in chrome or any web browser to see if it works.  If you have any issues so far refer to the docs ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://developers.google.com/custom-search/v1/using_rest"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "here",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n\n\nNow let's call the google custom search API on the server side. It will be in a file called  ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "gcse.js.",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "  For me, this file is going to be in the routes/api directory where all my other routes are stored. \n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "My gcse.js file in VS code looks like:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const express = require('express');\r\nconst request = require('request');\r\nconst router = express.Router();\r\n\r\nconst googleAPIKEY = require('../../config/keys').googleAPIKEY;\r\nconst customerSearchEngineID = require('../../config/keys').customerSearchEngineID; \r\n\r\nrouter.get('/', (req, res) => {\r\n    try {\r\n        res.json({msg:'GCSE works!'})\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n})\r\n\r\n// Type     :   GET\r\n// Route    :   api/google-custom-search/:query\r\n// Desc     :   Google custom search api\r\n// Access   :   Public, anyone can search.\r\nrouter.get('/:query', (req, res) => {\r\n\r\n    try {\r\n        const options = {\r\n            uri: `https://www.googleapis.com/customsearch/v1?key=${googleAPIKEY}&cx=${customerSearchEngineID}&q=${req.params.query}`,\r\n            method: 'GET',\r\n            headers : {'user-agent':'nodejs'}\r\n        }\r\n        request(options, (error, response, body)=> {\r\n            if( error ) console.log(error);\r\n            if(response.statusCode !== 200) return res.status(404).json({msg:'Query could not run'});\r\n            const data = JSON.parse(body).items;\r\n\r\n            // send back the array of items\r\n            if(data && data.length > 0){\r\n                res.json(data); \r\n            } else {\r\n                res.status(404).send('There is no data to return');\r\n            }\r\n         \r\n        })\r\n      \r\n    } catch (error) {\r\n        res.status(500).send('Server Error',error);\r\n    }\r\n  \r\n})\r\n\r\n\r\nmodule.exports = router;",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I have used a config file to hide my sensitive API keys and .gitignore to make sure I don't ever push the values to github. You can read more about that here and how to use this in a production environment using environment variables.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You can test this URL out in postman with the following sample call with react being the search query, q.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "http://localhost:3000/api/gcse/react",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I am using ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "request",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " library, but you could use ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "axios",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " or fetch if you prefer. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 2: Setting up our actions",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Inside the actions folder, I have created a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "searchActions.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file which will be called in ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Header.js ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "file when someone searches for something. This will be a fairly simple action file which can dispatch three types of options GOOGLE_SEARCH, GOOGLE_SEARCH_ERROR and CLEAR_GOOGLE_SEARCH.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The first action type will call the end point with a query from the input on the front end. It will send back a payload with the searchResults (an array) and a query (a string) of what the user searched. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The searchActions.js file: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import axios from 'axios';\r\nimport { GOOGLE_SEARCH, GOOGLE_SEARCH_ERROR, CLEAR_GOOGLE_SEARCH } from './types';\r\n\r\nexport const googleCustomSearch = query => async dispatch => {\r\n\r\n    try {\r\n        const res = await axios.get(`/api/gcse/${query}`);\r\n        if(res === null || res === [] || res === ''){\r\n            dispatch({\r\n                type: GOOGLE_SEARCH_ERROR,\r\n                payload: {msg: 'No Search Results'}\r\n            })\r\n        } else {\r\n            dispatch({\r\n                type: GOOGLE_SEARCH,\r\n                payload: {\r\n                    searchResults:res.data,\r\n                    query:query\r\n                }\r\n            })\r\n        }\r\n    \r\n    } catch (error) {\r\n        console.error(error);\r\n        dispatch({\r\n            type: GOOGLE_SEARCH_ERROR,\r\n            payload: {msg: 'Oops, could not find what you were searching for!'}\r\n        })\r\n    }\r\n}\r\n\r\nexport const clearGoogleCustomerSearch = () => dispatch => {\r\n    try {\r\n        dispatch({\r\n            type: CLEAR_GOOGLE_SEARCH\r\n        })\r\n    } catch (error) {\r\n        console.error('Could not clear the search results', error)\r\n    }\r\n}",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In case you are wondering why I have types file. This is where I store all my action types so they are stored in variables, and I only need to update in one place.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The types.js file \n\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// GOOGLE CUSTOM SEARCH \r\nexport const GOOGLE_SEARCH = 'GOOGLE_SEARCH';\r\nexport const GOOGLE_SEARCH_ERROR = 'GOOGLE_SEARCH_ERROR';\r\nexport const CLEAR_GOOGLE_SEARCH = 'CLEAR_GOOGLE_SEARCH';\r ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "STEP 3. Adding in the search reducer",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Now that we have the action file set up, we need to set up the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "searchReducer.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file inside the reducers folder. A fairly standard set up is shown below:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import {\r\n    GOOGLE_SEARCH,\r\n    GOOGLE_SEARCH_ERROR,\r\n    CLEAR_GOOGLE_SEARCH\r\n} from '../actions/types';\r\n\r\nconst initialState = {\r\n    searchResults: [],\r\n    query: '',\r\n    loading: true,\r\n    error: {}\r\n}\r\n\r\nexport default function( state = initialState, action ){ \r\n    const { type, payload } = action;\r\n    switch( type ){\r\n       case GOOGLE_SEARCH:\r\n           return {\r\n               ...state,\r\n               searchResults: payload.searchResults,\r\n               loading: false,\r\n               query: payload.query,\r\n               error: {}\r\n           } \r\n        case GOOGLE_SEARCH_ERROR:\r\n            return {\r\n                ...state,\r\n                error: payload,\r\n                loading: false\r\n            }\r\n        case CLEAR_GOOGLE_SEARCH:\r\n            return {\r\n                ...state,\r\n                searchResults: [],\r\n                query: '',\r\n                loading: true,\r\n                error: {}\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 4: Calling the Action in our React App",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We can finally call the googleCustomSearch and clearGoogleCustomSearch actions in our ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Header.js ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "file",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Will have a form component which will call ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "siteSearchHandler. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This function will than call the two actions above whenever our form is submitted.  In this case the form is a simple input, but I decided to wrap it in a form tag so that ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "siteSearchHandler",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " gets called when the enter key is pressed. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The form component: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "    <form \r\n        onSubmit = {siteSearchHandler.bind(this)}>\r\n    <div>\r\n        <input\r\n            type=\"text\" \r\n            id=\"site-search-google\" \r\n            name=\"query\" \r\n            title=\"Search Site\" \r\n            alt=\"Search Text\" maxLength=\"256\" \r\n            placeholder = \"Search Site\" \r\n            value = { query }\r\n            onChange={e => this.onChange(e)}\r\n        />\r\n    </div>\r\n    </form>",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "siteSearchHandler:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "    const siteSearchHandler = e => {\r\n        e.preventDefault();\r\r\n        clearGoogleCustomSearch();\r\n        googleCustomSearch(this.state.query);\r\n        history.push('/search');\r\n    } ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The Header.js file is your typical functional based component ( shortcut ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "racfp",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " + ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "tab",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " in VS code with the ReactJs code snippets extension ) ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import React, {useState} from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport PropTypes from 'prop-types';\r\nimport { googleCustomSearch, clearGoogleCustomSearch } from '../../actions/searchActions';\r\n\r\nconst Header = ({googleCustomSearch, clearGoogleCustomSearch, history}) => {\r\n\r\n    const [query, setQuery] = useState('');\r\n\r\n    const siteSearchHandler = e => {\r\n        e.preventDefault();\r\n        clearGoogleCustomSearch();\r\n        googleCustomSearch(query);\r\n        history.push('/search');\r\n    }\r\n    const onChangeHandler = e => {\r\n        setQuery(e.target.value);\r\n    }\r\n    return (\r\n        <div> \r\n            <form \r\n                onSubmit = {siteSearchHandler.bind(this)}>\r\n                <div>\r\n                    <input\r\n                        type=\"text\" \r\n                        id=\"site-search-google\" \r\n                        name=\"query\" \r\n                        title=\"Search Site\" \r\n                        alt=\"Search Text\" maxLength=\"50\" \r\n                        placeholder = \"Search Site\" \r\n                        value = { query }\r\n                        onChange={e => onChangeHandler(e)}\r\n                    />\r\n                </div>\r\n            </form> \r\n        </div>\r\n    )\r\n}\r\n\r\nHeader.propTypes = {\r\n    search: PropTypes.object.isRequired\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    search: state.search\r\n})\r\n\r\nexport default connect(mapStateToProps, { googleCustomSearch, clearGoogleCustomSearch })(withRouter(Header))\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Everything is based as props into the functional based Header component, including the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "history,",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " which we are getting by wrapping our Header component with the hoc (higher order component)  ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "withRouter",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". This allows as to move to a new route, '/search' where all our search results are displayed. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 5: Displaying the search results.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This should be quite straight forward now. All we need to do is grab our search results from the redux state and map over it, to show the different routes a user can go to in our site from the search results.  One thing I noticed was that Google was indexing some http results from my site. To fix that quickly I simply used a regular expression. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const link = url.replace(/^http:\\/\\//i, 'https://').replace(\"https://www.cravejs.com/\",\"/\");\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\nThe final ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "searchResults.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ":",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import React, { Fragment } from 'react'\r\nimport { connect } from 'react-redux';\r\nimport { withRouter } from 'react-router-dom';\r\nimport LoadingSpinner from '../utils/LoadingSpinner';\r\n\r\nconst SearchResults = ({search: {loading, searchResults, error, query}, history}) => {\r\n    \r\n    const goToLink = url => {\r\n        const link = url.replace(/^http:\\/\\//i, 'https://').replace(\"https://www.cravejs.com/\",\"/\");\r\n       \r\n        history.push(link);\r\n    }\r\n    if ( loading ) return   <div className = \"SearchResults__summary\"> <LoadingSpinner/> </div>; \r\n\r\n    if(searchResults){\r\n\r\n        return (\r\n                error && error.msg ? \r\n                <div className = \"SearchResults__summary\"> Oops could not find what you were looking for </div> :\r\n\r\n                <Fragment>\r\n                    \r\n                    { \r\n                        searchResults.length > 0 ? \r\n                            <div className = \"SearchResults__summary\">\r\n                            There are { searchResults.length } results for <strong> {query} </strong> \r\n                            </div> : \r\n                            <div className = \"SearchResults__summary\">Please start searching at the top</div>\r\n                    }\r\n                  \r\n                <div className = \"SearchResults\">  \r\n                    <div className = \"SearchResults__list\">\r\n                    { searchResults && searchResults.map( (result,i) => (\r\n                        <div onClick = { goToLink.bind(this,result.link) } className = \"SearchResults__link\" to = {result.link} key = {`${i} - ${result.title}`} > \r\n                            <h4> { result.title } </h4>\r\n                            <p> {result.snippet}  </p>\r\n                        </div>\r\n                    )) }\r\n                    </div>\r\n                </div>\r\n                <div className = \"SearchResults__message\"> Still haven't find what you are looking for? Try the explore option above </div>\r\n                </Fragment>\r\n               \r\n        )      \r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n    search: state.search\r\n})\r\n\r\nexport default connect( mapStateToProps )(withRouter(SearchResults))\r ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Summary",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This article quickly illustrates how to use React/Redux with Google Custom Search. The steps involved are first getting the API to work and testing the request and response with a tool like Postman. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Next an action file is created to call this API endpoint.  This action dispatches a type and payload which triggers the reducer to change the state of the app. In React, we can then use that state in various components by using connecting React component with Redux. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Final Thoughts",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In order for Google Custom Search to work better, we should submit a site map and make our app SEO friendly. This will make our site wide Google Custom search work better and will also enable us to appear in Google search results. Win win right ?! I will be writing an article on this soon.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " \n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-06-28T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "react",
            "redux",
            "google custom search",
            "search in react"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "4EMVOdpsc48LtLdOGIFNoC",
        "type": "Entry",
        "createdAt": "2019-10-08T20:00:59.221Z",
        "updatedAt": "2019-10-08T20:04:33.611Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 23,
        "publishedAt": "2019-10-08T20:04:33.611Z",
        "firstPublishedAt": "2019-10-08T20:02:21.333Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 24,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "React Hooks useRedux Hook Set up"
        },
        "slug": {
          "en-US": "react-hooks-useredux-hook-set-up"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "6InRD35HLJjYRdVZNFGZHf"
            }
          }
        },
        "description": {
          "en-US": "Simple set up for using useRedux hook with React Hooks. Create a counter function"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "See Link to github for cloning project: ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://github.com/arhoy/react-hooks-useReducer-basic"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://github.com/arhoy/react-hooks-useReducer-basic",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " and git clone and run npm i in integrated terminal ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The index.js file",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n\r\nexport const UserContext = React.createContext();\r\n\r\nconst name = 'Kamala';\r\n\r\nReactDOM.render(\r\n    <UserContext.Provider\r\n        value = { name }\r\n    >\r\n        <App />\r\n    </UserContext.Provider>\r\n    ,document.getElementById('root'));\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The App.js file",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import React, { useContext, useReducer } from 'react';\r\n\r\nimport { UserContext } from './index';\r\nimport './App.scss';\r\n\r\nconst initialState = {\r\n  count: 0\r\n}\r\n\r\nfunction reducer(state, action) {\r\n  switch(action.type) {\r\n    case 'increment':\r\n      return {\r\n        count: state.count + 1\r\n      }\r\n    case 'decrement':\r\n      return {\r\n        count: state.count -1\r\n      }\r\n    case \"reset\":\r\n      return {\r\n        count: initialState.count\r\n      }\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  const [state, dispatch] = useReducer(reducer, initialState)\r\n  const value = useContext(UserContext);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <p>Hey {value}</p>\r\n      <button onClick = { () => dispatch( { type: 'increment' }) } >Add more</button>\r\n      <button onClick = { () => dispatch( { type: 'decrement' }) } >Add less</button>\r\n      <button onClick = { () => dispatch( { type: 'reset' }) } > Reset</button>\r\n      <p> Count: { state.count } </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n\n\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-06-28T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "react",
            "use-redux",
            "react hooks"
          ]
        },
        "popular": {
          "en-US": true
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "56EuvcbDFlgW6gSfIRdIe8",
        "type": "Entry",
        "createdAt": "2019-10-08T20:05:48.881Z",
        "updatedAt": "2019-10-08T20:06:55.128Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 8,
        "publishedAt": "2019-10-08T20:06:55.128Z",
        "firstPublishedAt": "2019-10-08T20:06:55.128Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 9,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "React Hooks Intro"
        },
        "slug": {
          "en-US": "react-hooks-intro"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "6InRD35HLJjYRdVZNFGZHf"
            }
          }
        },
        "description": {
          "en-US": "React Hooks are a new feature of React that let you do things without classes.\nHooks useState and useEffect are covered."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "React Hooks are a new feature of React that let you do things without classes. This new way of thinking about React definitely encourages a more functional way of programming.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Hooks: useState",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The useState hook is used to update the state of your application. Here is a simple example to get started.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import React, { useState } from 'react';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [count,setCount] = useState(0);\r\n  const [fruit, setFruit] = useState('Bananas');\r\n\r\n  const myFruits = ['Apple','Stawberry','Peach', 'Bananas','Watermelon','Kiwi','Papaya','Blueberry'];\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n       <p> You have clicked me { count } times </p>\r\n       <p> The selected fruit is: { fruit } </p>\r\n       <button onClick = { () => setCount(count + 1) } > Click Me </button>\r\n       <button onClick = { () => setFruit( myFruits   [Math.floor(Math.random()*myFruits.length ) ] ) } > Random Fruit </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Above, useState is a react hook that allows as to return two things. The current state value and the function that updates this value.  We can have multiple useState hooks in each function. The first useState returns count and setCount with an inital state of 0. The initial state can be any data type. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "A popular way of handling events is to use event handlers.  With event handlers we define a new function rather than put the logic inside the onClick event. For example: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "function App() {\r\n  const [count,setCount] = useState(0);\r\n\r\n  const buttonCountHandler = () => {\r\n    setCount(prevCount => prevCount + 1);\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n       <p> You have clicked me { count } times </p>\r\n       <p> The selected fruit is: { fruit } </p>\r\n       <button onClick = { buttonCountHandler } > Click Me </button>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Here we also used prevCount which is like prevState but specific to count inside of useState. Doing it this way is cleaner in my opinion because you don't have all the logic of the function in the return statement. For the fruits we can simply update it using: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "  const updateFruitHandler = () => {\r\n    const myFruits = ['Apple','Stawberry','Peach', 'Bananas','Watermelon','Kiwi','Papaya','Blueberry'];\r\n    setFruit( myFruits[Math.floor(Math.random()*myFruits.length ) ] ) \r\n  }",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "and inside the return adding: \n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": " <button onClick = { updateFruitHandler } > new random Fruit </button>",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The Light Switch Example",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import React, { useState } from 'react';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n  const [isOn, setIsOn] = useState(false);\r\n\r\n  const toggleLightHandler = () => {\r\n    setIsOn( prevIsOn => !prevIsOn );\r\n  }\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n\r\n        <h2>Toggle a light</h2>\r\n        <div \r\n            style = {{\r\n              width: '10rem',\r\n              height: '10rem',\r\n              background: isOn ? 'yellow' : 'black' ,\r\n              margin: 'auto'\r\n            }}\r\n        />\r\n\r\n        <button\r\n           style = {{cursor:'pointer'}} \r\n           onClick = {toggleLightHandler}\r\n        > \r\n          {isOn ? 'Turn Off': 'Turn On'}\r\n        </button>\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Hook: useEffect",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Fetching data or interacting with any sort of API. Use effect replaces the component life cycles methods.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In this example we can use useEffect to replace componentDidMount and componentDidUpdate lifecycles. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import React, { useState, useEffect } from 'react';\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "useEffect( () => {\r\n    document.title = `The light is turned ${ isOn ? 'on' : 'off' } `;\r\n })",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example Mouse Positioning",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To track mouse positions, we reach out to the window API. The useEffect hook allow us to update mouse coordinates. Events like these required us to use componentDidMount and componentWillUnmount lifecycles methods. With Hooks in we can do the following:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import './App.css';\r\n\r\nfunction App() {\r\n\r\n  const [mousePosition,setMousePosition] = useState( { x: null, y: null } );\r\n\r\n  const setMousePositionHandler = event => {\r\n      setMousePosition( { x: event.x, y: event.y } );\r\n  }\r\n\r\n  useEffect( () => {\r\n    window.addEventListener('mousemove',setMousePositionHandler)\r\n\r\n    return () => {\r\n      window.removeEventListener('mousemove',setMousePositionHandler)\r\n    }\r\n  },[] )\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    <h2>Mouse Position</h2>\r\n    <p>The mouse coordinates x and y are { `${mousePosition.x} and ${mousePosition.y}` }  </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To only run on mount and unmount we pass the following empty array argument inside of useEffect. We can unmount the event listener by returning the window.removeEventListener.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Online or not?",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Using useEffect and navigator api to determine whether we are online or not.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import React, { useState, useEffect } from 'react';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n\r\n\r\n  const [ status, setStatus ] = useState( navigator.onLine );\r\n\r\n  const onlineEventHandler = () => {\r\n    setStatus(true);\r\n  }\r\n\r\n  const offlineEventHandler = () => {\r\n    setStatus(false);\r\n  }\r\n\r\n  useEffect( () => {\r\n    window.addEventListener('online', onlineEventHandler);\r\n    window.addEventListener('offline', offlineEventHandler);\r\n\r\n    return () => {\r\n      window.removeEventListener('online', onlineEventHandler);\r\n      window.removeEventListener('offline', offlineEventHandler);\r\n    }\r\n  },[] )\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    <h2> Online or not?</h2>\r\n    <p> You are now: { status ? 'Online' : 'Offline' } </p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Geolocation Example",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import React, { useState, useEffect } from 'react';\r\n\r\nimport './App.css';\r\n\r\nconst initLocationState = {\r\n  latitude: null,\r\n  longitude:null,\r\n  speed:null\r\n}\r\n\r\n\r\nfunction App() {\r\n\r\n  let mounted = true; // lets us mount and unmount after use\r\n  // es6 desctructuring on location\r\n  const [ {latitude,longitude,speed} , setLocation ] = useState( initLocationState );\r\n  \r\n  const geoLocationHandler = event => {\r\n    if (mounted) {\r\n      setLocation({\r\n        latitude: event.coords.latitude,\r\n        longitude: event.coords.longitude,\r\n        speed: event.coords.speed\r\n      })\r\n    }\r\n  }\r\n\r\n  useEffect( () => {\r\n\r\n    navigator.geolocation.getCurrentPosition(geoLocationHandler);\r\n    // update the geolocation\r\n    const watchId = navigator.geolocation.watchPosition(geoLocationHandler);\r\n\r\n\r\n    return () => {\r\n      // remove event listeners.\r\n      mounted = false;\r\n      navigator.geolocation.clearWatch(watchId);\r\n    }\r\n  },[] )\r\n\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    <h2> Geolocation </h2>\r\n    <p>Latitude: { latitude }</p>\r\n    <p>Longitude: { longitude }</p>\r\n    <p>Speed: { speed ? speed: '0' }</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Simple Form with Hooks",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Doing a simple login form with Hooks takes quite a lot of code up front. Here is a bare bones basis form",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import React, { useState } from 'react'\r\n\r\nconst Login = (  ) => {\r\n\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n\r\n  \r\n    const handleSubmit = event => {\r\n      event.preventDefault();\r\n      const userData = {\r\n        username,\r\n        password\r\n      };\r\n      \r\n      // form submit logic goes here.\r\n      console.log(userData);\r\n      // reset the form after\r\n      setUsername(\"\");\r\n      setPassword(\"\");\r\n    };\r\n\r\n\r\n    return (\r\n        <div>\r\n        <h2>Simple Form</h2>\r\n        <form\r\n\r\n          onSubmit={handleSubmit}\r\n        >\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Username\"\r\n            onChange={event => setUsername(event.target.value)}\r\n            value={username}\r\n          />\r\n          <input\r\n            type=\"password\"\r\n            placeholder=\"Password\"\r\n            onChange={event => setPassword(event.target.value)}\r\n            value={password}\r\n          />\r\n          <button type=\"submit\">Submit</button>\r\n        </form>\r\n  \r\n    \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Simple API Requests with Hooks",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import React, { useState, useEffect } from 'react';\r\nimport './App.scss'\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  const [results, setResults] = useState([]) // set results to empty array\r\n  const [query, setQuery] = useState('react hooks');\r\n\r\n  try {\r\n      useEffect(() => {\r\n        const fetchData = async () => {\r\n        const results = await axios(\r\n          `http://hn.algolia.com/api/v1/search?query=${query}`,\r\n        );\r\n\r\n      // setstate of results to results array.\r\n        setResults(results.data.hits);\r\n        console.log(results.data.hits);\r\n      };\r\n\r\n      fetchData();\r\n\r\n    }, [query]); // only run on componentDidMount and componentUnmount and query state change\r\n        \r\n  } catch (error) {\r\n      console.log(error)\r\n  }\r\n\r\n  const setQueryHandler = e => {\r\n      setQuery(e.target.value);\r\n  }\r\n\r\n  return (\r\n      <div className=\"App\">\r\n     \r\n          <h4> Search Top 20 Results from API: </h4>\r\n          <input onChange = { setQueryHandler } type=\"text\"/><br/>\r\n        {\r\n            results.map(result => (\r\n              <div key = {result.objectID}> {result.title} </div>\r\n            ))\r\n          }\r\n      </div>\r\n  \r\n  );\r\n}\r\n\r\nexport default App;\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Simple API with form and useRef Hook",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In this example we create a function getResults to set the state of the results from the query API. We call this function side useEffect so it runs on the initial page load.  We also create a searchEventHandler to only make calls to API on a form submission ( button search click or enter key )",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import React, { useState, useEffect, useRef } from 'react';\r\nimport './App.scss'\r\nimport axios from 'axios';\r\n\r\nfunction App() {\r\n  const [results, setResults] = useState([]) // set results to empty array\r\n  const [query, setQuery] = useState('react hooks');\r\n  const searchInputRef = useRef();\r\n\r\n  // load search on componentDidMount, componentDidUpdate\r\n  useEffect( () => {\r\n    getResults();\r\n  },[]);\r\n\r\n  const getResults = async () => {\r\n    try {\r\n      const response = await axios.get(`http://hn.algolia.com/api/v1/search?query=${query}`);\r\n      setResults(response.data.hits);\r\n\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n  }\r\n\r\n  const searchEventHandler = e => {\r\n    console.log(\"search submit\");\r\n    e.preventDefault();\r\n    getResults();\r\n  }\r\n\r\n  const setQueryHandler = e => {\r\n      setQuery(e.target.value)\r\n  }\r\n\r\n  const clearSearchHandler = () => {\r\n    setQuery('');\r\n    searchInputRef.current.focus(); // put focus back into input handler.\r\n\r\n  }\r\n\r\n  return (\r\n      <div className=\"App\">\r\n     \r\n          <h4> Search Top 20 Results from API: </h4>\r\n          <form onSubmit = { searchEventHandler }>\r\n            <input \r\n              type=\"text\"\r\n              value = { query }\r\n              onChange = { setQueryHandler }\r\n              ref = { searchInputRef }\r\n            />\r\n\r\n            <br/>\r\n            <button type = \"submit\"> Search </button>\r\n            <button onClick = { clearSearchHandler } type = \"button\"> Clear </button>\r\n          </form>\r\n         \r\n\r\n          {\r\n            results.map(result => (\r\n              <div key = {result.objectID}> {result.title} </div>\r\n            ))\r\n          }\r\n      </div>\r\n  \r\n  );\r\n}\r\n\r\nexport default App;\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\nSee github for source code: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://github.com/arhoy/react-hooks-intro"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://github.com/arhoy/react-hooks-intro",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n\n\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-06-28T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "react",
            "react hooks",
            "react hooks intro"
          ]
        },
        "popular": {
          "en-US": true
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "52pyBxSblRVGATjhVBRJxx",
        "type": "Entry",
        "createdAt": "2019-10-08T20:07:04.373Z",
        "updatedAt": "2019-10-08T20:08:24.529Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 10,
        "publishedAt": "2019-10-08T20:08:24.529Z",
        "firstPublishedAt": "2019-10-08T20:08:24.529Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 11,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Grabbing images in a local file in a React App"
        },
        "slug": {
          "en-US": "grabbing-images-in-a-local-file-in-a-react-app"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "6InRD35HLJjYRdVZNFGZHf"
            }
          }
        },
        "description": {
          "en-US": "Grabbing images in a local file in a React App"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Sometimes simple things in React, well are fairly simple, but if you don't know then it can be damn frustrating. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I have decided to write an article on this as I always forgot how the hell to import images from a local file in a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      },
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "sensible way. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I have seen some solutions online where each image is imported separately using import at the top, but I really don't think that is necessary at all. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "1. Put all your images in the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "public folder",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " that react creates. Inside this public folder I create another folder called ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "img ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "where all my images go. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "2. Next you can grab the image anywhere in your app using: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": " <img className = \"success__image\" src=\"img/my-wonderful-image.jpg\" alt=\"\"/> ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Now note this works anywhere in any of your components no matter where we are since we are specifying an absolute path that starts inside the public folder. (i.e the one created by Create React App by default )",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Hopefully that helps you solve this simple task and you can be on your way.\n\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-06-28T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "react",
            "react images",
            "local react images"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "5HGjEE9To6eHpUMHrEcCsE",
        "type": "Entry",
        "createdAt": "2019-10-09T18:16:35.452Z",
        "updatedAt": "2020-03-05T08:03:21.268Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 787,
        "publishedAt": "2020-02-15T21:13:53.142Z",
        "firstPublishedAt": "2019-10-09T23:41:32.180Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 4,
        "version": 799,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Custom Domains Using Netlify and NameCheap"
        },
        "slug": {
          "en-US": "pointing-your-name-server-to-netlify"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "3N8fBuH0PhC08GyOX6YrH3"
            }
          }
        },
        "description": {
          "en-US": "__Hosting__ a site with Gatsby Using Netlify and NameCheap.\n"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Overview",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You can host a custom domain name with Netlify by pointing your DNS (domain name server) to Netlify.  If you are using Github, Gitlab or BitBucket then simply select ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Add New Site",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " on Netlify and it will pull in your source code. This article assumes you have used one of the three above and have a site ready to be deployed to production ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Netlify",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Pseudo Custom Domain",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-5"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Netlify will automatically give you a random domain name ending with `",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": ".netlify.com` ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " or now `",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": ".netllify.app`",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " You can, however, change this by going to ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Settings  ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "and",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": " ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Domain management",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": ", ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " which will give you a custom name followed by `",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": ".netlify.com`.  ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "It is a pseudo custom domain because you can name it whatever you like, assuming it is not taken but it will still have trailing `",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": ".netlify.app",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "`. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                  "target": {
                    "sys": {
                      "id": "3SM733YvelHGS3FIw1iCoy",
                      "type": "Link",
                      "linkType": "Asset"
                    }
                  }
                },
                "content": [
                ],
                "nodeType": "embedded-asset-block"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Hooking Up A Custom Domain",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-5"
              },
              {
                "data": {
                  "target": {
                    "sys": {
                      "id": "5G5iUHK4vYoegocmcgM6rq",
                      "type": "Link",
                      "linkType": "Asset"
                    }
                  }
                },
                "content": [
                ],
                "nodeType": "embedded-asset-block"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Under ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Settings ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Domain Management ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "click the green button ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Add Custom Domain",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This will prompt you to add a custom domain, which you will need to verify that you own. If you do not own a custom domain, go ahead and purchase one on NameCheap and see you in a couple minutes.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Now that we have a custom domain, you can enter it in and click ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Verify",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                  "target": {
                    "sys": {
                      "id": "3lZCUtbGgjv3EiwbitgeZo",
                      "type": "Link",
                      "linkType": "Asset"
                    }
                  }
                },
                "content": [
                ],
                "nodeType": "embedded-asset-block"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This took me back the Domain Management View. You will need to to setup Netlify DNS on the domain you just verified. Make sure to get the name servers provided by Netlify during the set up process.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                  "target": {
                    "sys": {
                      "id": "2HOUn37bXX3hwuThDip4Ad",
                      "type": "Link",
                      "linkType": "Asset"
                    }
                  }
                },
                "content": [
                ],
                "nodeType": "embedded-asset-block"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In Step 2, make sure to update the domain's name servers with the ones provided to you by Netlify.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                  "target": {
                    "sys": {
                      "id": "6pvs84PWWhp2RBKiAcMgOG",
                      "type": "Link",
                      "linkType": "Asset"
                    }
                  }
                },
                "content": [
                ],
                "nodeType": "embedded-asset-block"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Namecheap",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I use Namecheap because they offer free WhoIsGuard protection. This means that they will keep your contact information such as your email, address and phone number from becoming publicly available. They also have great customer support and are similarly priced to Go Daddy. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In your Namecheap dashboard, do the following. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Go to your domain list and click on ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "italic"
                              }
                            ],
                            "value": "Manage-> Advanced DNS",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "italic"
                              }
                            ],
                            "value": " ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "Change the name server to ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "italic"
                              }
                            ],
                            "value": "Custom DNS",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " Paste in the values you got from Netlify into these fields.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "ordered-list"
              },
              {
                "data": {
                  "target": {
                    "sys": {
                      "id": "7BR4lNQ9TWUMeoCjc49gz6",
                      "type": "Link",
                      "linkType": "Asset"
                    }
                  }
                },
                "content": [
                ],
                "nodeType": "embedded-asset-block"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Once you have gone through the steps, it might take up to 48 hours for the changes to propagate. However, it typically takes no more than one hour.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-06-28T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "netlify",
            "custom domain name on netlify"
          ]
        },
        "new": {
          "en-US": true
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "4bQZdiW2gwTyu6gFwMsljO",
        "type": "Entry",
        "createdAt": "2019-10-13T06:33:32.406Z",
        "updatedAt": "2019-10-23T01:27:55.579Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 22,
        "publishedAt": "2019-10-23T01:27:55.579Z",
        "firstPublishedAt": "2019-10-13T06:37:44.296Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 23,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Avoiding duplicate reviews per user"
        },
        "slug": {
          "en-US": "avoiding-duplicate-reviews-per-user"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "kjchmjuZzccxBSCS01pO9"
            }
          }
        },
        "description": {
          "en-US": "How to avoid duplicate reviews in our model"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In our model, we want to make sure that there can only be one review for each business per user. This makes sense and to implement this is very easy. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "ReviewSchema.index({tour: 1, user: 1}, {unique: true});",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "That is all you need to do as that insures the combined tour and user must be unique. The simply sorts the tour and user.   Replace 1 with -1 to sort reversed.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "1QTwqCZg8bYlS9ce9zBi5m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-10-07T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "mongo",
            "avoid duplicates"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "4qIQHrsxgcoPol2zjYiMzW",
        "type": "Entry",
        "createdAt": "2019-10-13T06:38:21.916Z",
        "updatedAt": "2019-10-23T01:27:39.128Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 7,
        "publishedAt": "2019-10-23T01:27:39.128Z",
        "firstPublishedAt": "2019-10-13T06:39:54.935Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 8,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Updating a Review in a Database"
        },
        "slug": {
          "en-US": "updating-a-review-in-a-database"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "kjchmjuZzccxBSCS01pO9"
            }
          }
        },
        "description": {
          "en-US": "This article shows how to update a review for a given user"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Let's say you want to implement something like Google Reviews in your web App where a user can leave a review for something. Of course, you want to make sure that only the logged in user can edit this  and that the user who created the review can be the only one to edit it right?",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For this simple review system, the user can only change or make a review with a review rating and a review description.  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "1. using an auth middleware for our protected routes. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "2. For full validation you should findById first, than validate, than update  and then save to the database like so. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Name         :   Update Review\r\n// Type         :   PATCH\r\n// Route        :   api/reviews/:reviewId\r\n// Description  :   Update the review, note we are using reviewId\r\n// Access       :   Only review author can update.\r\nrouter.patch('/:reviewId', auth, async (req, res, next) => {\r\n    try {\r\n        const { rating, description } = req.body; \r\n        const review = await Review.findByIdAndUpdate(req.params.reviewId);\r\n        \r\n        // verify user\r\n        if(review.user.toString() !== req.user.id.toString()) return next (new AppError(`Sorry, you cannot edit this review`,403));\r\n\r\n        // update and save review\r\n        review.rating = rating;\r\n        review.description = description;\r\n        review.save();\r\n\r\n        // return review\r\n        res.json(review);\r\n    } catch (error) {\r\n        console.error(error);\r\n        next (new AppError(`${error}`,500));\r\n    }\r\n}) ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In summary, before we update a review, we want to compare the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "logged in user id ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "to the",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": " review author user id.",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " Then we update the rating and review using the user inputs from the req.body. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "However, while this works, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "update method ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "in mongoose is more efficient than ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "find",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " followed by ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "save.\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To do this we can use ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "findOneAndUpdate",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " method and pass in two criteria, the _id and and user like so:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Name         :   Update Review\r\n// Type         :   PATCH\r\n// Route        :   api/reviews/:reviewId\r\n// Description  :   Update the review, note we are using reviewId\r\n// Access       :   Only review author can update.\r\nrouter.patch('/:reviewId', auth, async (req, res, next) => {\r\n    try {\r\n        const { rating, description } = req.body; \r\n        const review = await Review.findOneAndUpdate(\r\n            {\r\n                _id: req.params.reviewId,\r\n                user: req.user.id.toString(),\r\n            },\r\n            {\r\n                rating,\r\n                description\r\n            },\r\n            {\r\n                new:true,\r\n                runValidators:true\r\n            }\r\n        )\r\n\r\n        // return review\r\n        res.json(review);\r\n    } catch (error) {\r\n        console.error(error);\r\n        next (new AppError(`${error}`,500));\r\n    }\r\n})",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The req.body we only extracted the fields needed. This is more of a security measure so that user cannot change any extra form fields if there was any on the front end. The second method is actually ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "simpler with less code ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "and more efficient. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-10-07T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "mongo"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "2sHURz1K5ISa9HFpONZqeM",
        "type": "Entry",
        "createdAt": "2019-10-13T06:40:15.754Z",
        "updatedAt": "2019-10-23T01:27:27.519Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 17,
        "publishedAt": "2019-10-23T01:27:27.519Z",
        "firstPublishedAt": "2019-10-13T06:41:41.885Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 18,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Using Virtual Populate instead of Child Embedding "
        },
        "slug": {
          "en-US": "using-virtual-populate-instead-of-child-embedding"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "kjchmjuZzccxBSCS01pO9"
            }
          }
        },
        "description": {
          "en-US": "Virtual Populate is a good solution to child embedding, especially if the child documents grow indefinitely larger."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "An example of using Virtual populate in our tour model",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Virtual Populate\r\nTourSchema.virtual('reviews', {\r\n  ref: 'Review',\r\n  foreignField: 'tour',\r\n  localField: '_id'\r\n})",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "1QTwqCZg8bYlS9ce9zBi5m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-10-07T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "mongo"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "34XXNAQNGuLLLE8FfBrRng",
        "type": "Entry",
        "createdAt": "2019-10-13T06:41:46.215Z",
        "updatedAt": "2019-10-23T01:26:44.222Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 17,
        "publishedAt": "2019-10-23T01:26:44.222Z",
        "firstPublishedAt": "2019-10-13T06:44:27.287Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 18,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Query Middleware in Mongoose"
        },
        "slug": {
          "en-US": "query-middleware-in-mongoose"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "kjchmjuZzccxBSCS01pO9"
            }
          }
        },
        "description": {
          "en-US": "A summary of using Query middleware (aka query hooks)"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Using the `pre find ` hook allows us to query documents and the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      },
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "this ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "keyword is pointing to the document or instance of the model, rather than the model itself.  We can use methods like find, findById, aggregate, to filter or aggregate the data to our liking. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Why should you use the a `pre find` hook?",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "It can be used to filter out documents that are sensitive and you don't want to show in your results. This hook gets executed each time before find gets called in the API.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For example: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "TourSchema.pre('find', function(next) {\r\n  this.find({ secretTour:{ $ne: true } })\r\n  next();\r\n})  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "There is one potential downside. This will only get called for find, and not for findById, or findByIdAndUpdate. This is because findById and findByIdAndUpdate use findOne behind the scenes.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "So we could potentially fetch a secret document when we use those commands. To ensure that does not happen, replace `find` with a regular expression.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-10-08T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "mongo",
            "query middleware"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "5hqZO3BqkBfQGiYP50bVRs",
        "type": "Entry",
        "createdAt": "2019-10-13T06:44:30.706Z",
        "updatedAt": "2019-10-23T01:26:28.880Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 8,
        "publishedAt": "2019-10-23T01:26:28.880Z",
        "firstPublishedAt": "2019-10-13T06:46:10.057Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 9,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Document Middleware with Mongoose"
        },
        "slug": {
          "en-US": "document-middleware-with-mongoose"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "kjchmjuZzccxBSCS01pO9"
            }
          }
        },
        "description": {
          "en-US": "An overview of document middleware with Mongoose and when and why to use"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Document middleware in Mongoose",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Using `pre` ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "middleware",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Using ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "`pre` ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "middleware aka (hooks) allow us to to specify what we want to do before a certain event takes place.  An example of an event could be saving or creating a document. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Here is an example of what is called a `",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "pre-save hook",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "`:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// DOCUMENT MIDDLEWARE -- runs before .save() and .create() // pre save hooks\r\nTourSchema.pre('save', function(next) {\r\n    this.slug = slugify(this.name, { lower: true });\r\n    next();\r\n})",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Note: The ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      },
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "this ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "keyword is pointing to the document",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Using",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": " `post` ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "middleware",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Using `post` middleware aka (hooks) allows us to specify what we to do after a certain event has occurred. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-08-08T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "mongo"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "273SZ2isNB0tSBxSNGwuLZ",
        "type": "Entry",
        "createdAt": "2019-10-13T06:46:25.045Z",
        "updatedAt": "2019-10-13T06:55:44.727Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 9,
        "publishedAt": "2019-10-13T06:55:44.727Z",
        "firstPublishedAt": "2019-10-13T06:55:18.432Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 10,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Virtual Attributes in mongoose"
        },
        "slug": {
          "en-US": "virtual-attributes-in-mongoose"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "kjchmjuZzccxBSCS01pO9"
            }
          }
        },
        "description": {
          "en-US": "Attributes that are convenient to have around but are not persisted to the mongo database."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Attributes that are convenient to have around but are not persisted to the mongo database. These are usually fields that we can get from the other values in our database. For example, if we store ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "first name",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "last name",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", we don't really need another field to store the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "full name.",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " The users' full name can be calculated and stored as a virtual attribute. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Let's get started with virtual attributes and calculate the price that the customer will pay for a tour:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We have the price and price discount stored, so we can write the following virtual method in our Tour model: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "TourSchema.virtual('customerPrice').get( function() {\r\n  return (this.price - priceDiscount) *1.07;\r\n} ) ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In order for the virtual attributes to show, we need to tell mongoose this by passing it in the options field right after the Schema is defined. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "{\r\n  toObject: { virtuals: true },\r\n  toJSON: { virtuals: true }\r\n} ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "It is good practice to store business logic inside the models you create rather than defining them later on in the request and response API. This keeps the logic, close to the source of the model and keeps the APIs ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "`slim`.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-08-16T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "mongo"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "7nJukGxMH2S8NkCLkixYK9",
        "type": "Entry",
        "createdAt": "2019-10-13T06:56:27.129Z",
        "updatedAt": "2019-10-13T07:25:39.443Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 7,
        "publishedAt": "2019-10-13T07:25:39.443Z",
        "firstPublishedAt": "2019-10-13T06:58:42.943Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 8,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Aggregating data using mongo"
        },
        "slug": {
          "en-US": "aggregating-data-using-mongo"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "kjchmjuZzccxBSCS01pO9"
            }
          }
        },
        "description": {
          "en-US": "For those familiar with querying and aggregating data via sql, doing it in using a nosql database like mongo is very similar. "
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For those familiar with querying and aggregating data via sql, doing it in using a nosql database like mongo is very similar.  Though the syntax looks very different (everything is grouped into objects )  the concepts are the same. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Building off the previous article, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.cravejs.com/articles/3UgojhWgiWEQFUlQnGtwMi"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "express with mongoose",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ",  it assumes you understand and are familiar with sending a receiving data using express and mongoose. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example 1: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Type             :   GET\r\n// Route            :   api/tasks/tour-stats\r\n// Description      :   Get the tours stats\r\n// Access           :   PUBLIC anyone can see stats\r\nrouter.get('/tour-stats', async (req,res) => {\r\n    try {\r\n        const stats = await Tour.aggregate([\r\n            {\r\n                $match: { ratingsAverage: { $gt: 4.5 } }\r\n            },\r\n            {\r\n                $group: { \r\n                    _id: {\r\n                        difficulty:'$difficulty',\r\n                        // averageRatings: '$ratingsAverage'\r\n                    },\r\n                    numTours:       { $sum  :1 },\r\n                    numRatings:     { $sum  :'$ratingsQuantity' },\r\n                    avgRating:      { $avg  :'$ratingsAverage' },\r\n                    avgPrice:       { $avg  :'$price' },\r\n                    minPrice:       { $min  :'$price' },\r\n                    maxPrice:       { $max  :'$price' }\r\n                }\r\n            },\r\n            {\r\n                $sort: {avgPrice: 1}\r\n            }\r\n                \r\n\r\n        ])\r\n        res.json(stats);\r\n    } catch (error) {\r\n        res.status(500).json({msg:`Error in get request /tour-stats, ${error}`})\r\n    }\r\n}) ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "1. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "$match, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "is a mongo operator similar to the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "WHERE ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "clause in SQL.  It filters the data to show only the data meeting the specified requirements.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "2. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "$group, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "is a mongo operator similar to the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "GROUP BY ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "clause in SQL.  It groups the data specified inside the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "_id object ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "which is required.  You can specify multiple \"columns\" to group where the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "key ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "is the name of the column you give and the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "value ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "is the column name (prefixed by the $ sign)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If you don't want to group by anything, than specify id as null like  ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "_id : null ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Also within the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "$group ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "object, specify what you want to aggregate, where the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "key ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "is again the name of the aggregation that you decide on and the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "value ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "is an object where you specify the aggregation operator and the column name.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "3. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "$sort, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "another mongo operator similar to ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "SORT BY",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " in SQL. When we get to sorting, our data is already grouped by the following columns specified in the group operation (ie. numTours, numRatings, etc). We have to pick one of these columns to sort by.  Ascending is 1 and descending is -1.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Once you understand that everything is specified as objects in mongo, it becomes much easier to understand what is going on, even if the syntax might look a bit strange for those familiar with querying with a flavour of SQL.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Example 2: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Type             :   GET\r\n// Route            :   api/tasks/monthly-plan/:year\r\n// Description      :   Get the most popular tour months\r\n// Access           :   PUBLIC anyone can see stats\r\nrouter.get('/monthly-plan/:year', async (req,res) => {\r\n    try {\r\n        const year = req.params.year *1;\r\n        const plan = await Tour.aggregate([\r\n            {\r\n                $unwind: '$startDates'\r\n            },\r\n            {\r\n                $match: { \r\n                    startDates: {\r\n                        $gte: new Date(`${year}-01-01`),\r\n                        $lt:  new Date(`${year+1}-01-01`)\r\n                    }\r\n                }\r\n            },\r\n            {\r\n                $group: {\r\n                    _id: {\r\n                         $month: '$startDates'\r\n                    },\r\n                    countTours: {$sum: 1},\r\n                    tours: { $push: '$name' }\r\n                }\r\n            },\r\n            {\r\n                $addFields: { \r\n                    month: '$_id' \r\n                }\r\n            },\r\n            {\r\n                $sort:{\r\n                    month: 1\r\n                }\r\n            },\r\n            {\r\n                $project: {\r\n                    _id: 0\r\n                }\r\n            },\r\n            {\r\n                $limit: 10\r\n            },\r\n            {\r\n                $addFields: {\r\n                    month: {\r\n                        $let: {\r\n                            vars: {\r\n                                monthsInString: [, 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul','Aug','Sep','Oct','Nov','Dec']\r\n                            },\r\n                            in: {\r\n                                $arrayElemAt: ['$$monthsInString', '$month']\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n        ]);\r\n\r\n        res.json({dataItems: plan.length, data: plan });\r\n    } catch (error) {\r\n        \r\n    }\r\n})",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-08-16T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "mongo",
            "aggregating data"
          ]
        },
        "popular": {
          "en-US": true
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "2TYRgJzjXqLrW7iSJLFjIQ",
        "type": "Entry",
        "createdAt": "2019-10-13T06:58:57.154Z",
        "updatedAt": "2019-10-13T07:02:46.271Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 19,
        "publishedAt": "2019-10-13T07:02:46.271Z",
        "firstPublishedAt": "2019-10-13T07:00:57.070Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 20,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Using Express with Mongoose"
        },
        "slug": {
          "en-US": "using-express-with-mongoose"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "kjchmjuZzccxBSCS01pO9"
            }
          }
        },
        "description": {
          "en-US": "Using Express with Mongoose to find, query, filter, sort and manipulate our data to our liking."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Overview",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This post will assume that your comfortable or familiar with crud operations in express and have some familiarity with mongoose. As you know mongoose is an layer of abstraction or superset that sits on top of mongoDb, similar to how jQuery is a layer of abstraction sitting on top of javascript.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In the last section we create a Task model schema and in this section we will add a few more items to that model to give some examples of how we can make a more advanced API.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Starting Examples: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Here is a starting example, that will get all the results in the Tour model using the find method with no parameters.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Type         :   GET\r\n// Route        :   /api/tours\r\n// Description  :   Get all the tours\r\n// Access       :   Public - anyone can access.\r\nrouter.get('/', async (req, res) => {\r\n    try {\r\n        const tour = await Tour.find();\r  \r\n          // send back tours array.\r\n        res.json(tour)\r\n\r\n    } catch (error) {\r\n        res.status(400).json({msg: `There as an error with the /api/tours route`,error})\r\n    }\r\n})\r ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To set up filtering, we need the pass some arguments as key/value pairs to the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "find ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "method. For example the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "tour ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "document now becomes: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "  const tour = await Tour.find({\r\n            duration: 5,\r\n            difficulty: 'easy'\r\n        }); ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Alternatively using mongoose methods we can do something like: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const tour = await Tour.find()\r\n            .where('duration').equals(5)\r\n            .where('difficulty').equals('easy')  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The benefit of doing it this way is when we want to do some advanced filtering and take advantage of the built in mongoose methods like ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "gt",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "gte",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "lt",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "lte.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For example: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const tour = await Tour.find()\r\n            .where('duration').gt(5)\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Or alternatively: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const tour = await Tour.find({duration: {$gt:10}}) ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Using req.query:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Using ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "req.query ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "in the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "find ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "method allows us to parse our ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "query strings",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " from the url. For example, in postman make the following request to an endpoint with query strings like that below ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "http://localhost:5000/api/tours?duration=5&difficulty=easy",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Now to find, ie. return only the data with those parameters simply change the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "tour ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "document to: \n\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const tour = await Tour.find(req.query) ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Modifying our Express API.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "When you go to a website like amazon.com or indeed.com you often see more advanced query strings that implement sort and pagination. Since we don't want to query our data for things like ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "page=2",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " or ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "sort=ASC",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " we need to exclude these and not pass it into the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "find ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "method.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const queryObj = {...req.query}\r\n        const excludedFields = ['page', 'sort', 'limit', 'fields'];\r\n        excludedFields.forEach( el => delete queryObj[el] );\r\n        const tour = await Tour.find(queryObj)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This little trick enables us to exclude the page, sort, limit and fields query strings to the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "find ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "method.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\nApplying Greater than or Less than logic",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "So far our query strings can only handle simple requests, ie. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "duration=5",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". What if we need to handle more advanced filtering. For example when searching on a auto dealership website, we want to see all models between a certain price range. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The query string is could look something like this: \n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "http://localhost:5000/api/tours?duration[gte]=5&price[lte]500",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "req.query",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " we get back from the url is almost the same as the query needed to be passed into the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "mongoose.find",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " method to query the correct data. The only difference is that the query will not have a",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": " $ ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "symbol in front of it, which denotes an operator in mongoDb. \nUsing regular expressions we can add in this ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "$",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " sign in front of the operators. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The steps require using a regular expression to replace certain instances of keywords we want to look. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 1: Turn query object to query string:\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "  let queryString = JSON.stringify(queryObj)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 2: Replace the keywords, lte, lt, gt and gte with the mongoose equivalents.\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": " // replace gte, gt, lte, lt => $gte, $gt, $lte, $lt\r\n        queryString = queryString.replace(/\\b(gte|gt|lt|lte)\\b/g, match => `$${match}`);",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 3: Pass in this new queryString as an object to be filtered by the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "find ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "method\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const tour = await Tour.find(JSON.parse(queryString));",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Sorting ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For sorting, we can do the following. First will store the result into an intermediate variable, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "query ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "and then return the final tour document as shown below:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "let query = Tour.find(JSON.parse(queryString));\r\n\r\n        // Sorting\r\n        if( req.query.sort ) {\r\n             query.sort(req.query.sort);\r\n        }\r\n        const tour = await query;\r\n          // send back tours array.\r\n        res.json(tour) ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In postman, we can then make the following GET request:\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "http://localhost:5000/api/tours?sort=-ratingsAverage\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "which will sort the data by ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "ratingsAverage ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "in a descending order",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Sorting multiple parameters",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We can improve the sort functionality by allowing the user to sort by multiple parameters in the case there is a tie.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To handle the following request from postman:\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "http://localhost:5000/api/tours?sort=-ratingsAverage,name ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In mongoose, we can specify multiple sorts by passing in as many parameters as we like using spaces. Since the url does not spaces, but commas separating the sorting parameters we can fix this by.\n\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Sorting\r\n   if( req.query.sort ) {\r\n       const sortBy = req.query.sort.split(',').join(' ');\r\n        query.sort(sortBy);\r\n   } ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Selecting only certain fields",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To select only certain fields we can use the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "select ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "method that is available on a mongoose ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "document",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". The select method in mongoose you specify the fields you want separated by spaces so similar to the sort method we do the following: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Field limits\r\n        if( req.query.fields) {\r\n            const fields = req.query.fields.split(',').join(' ');\r\n            query.select(fields);\r\r\n        } ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Note if you want to exclude certain fields than prefix the field name with a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "-",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " symbol.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To hide a specific field, we can also go into the model and use: ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "select: false",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " option.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Pagination",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To implement pagination with the following simple formula on line 3. If the number of results to skip is greater than the actual number of results in the document, than we can throw an error.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": " // Pagination\r\n        const page = req.query.page * 1 || 1;\r\n        const limit = req.query.limit * 1 || 100;\r\n\r\n        const skip = (page - 1) * limit ;\r\n        if( req.query.page ) {\r\n            const numTours = await Tour.countDocuments();\r\n            if( skip >= numTours) {\r\n                throw new Error('This page does not exist!');\r\n            }\r\n        }\r\n\r\n        query.skip(skip).limit(limit);\r  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Creating a Top 5 query route.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "It could be handy to have a top 5 tours route. For this, we can predefine our price, limits and other things that must meet the criteria of a top 5 tour. For example: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Type         :   GET\r\n// Route        :   /api/tours/top-5-tours\r\n// Description  :   Get all top 5 tours\r\n// Access       :   Public - anyone can access.\r\nrouter.get('/top-5-tours', async (req,res) => {\r\n    try {\r\n        let query = Tour.find({\r\n            ratingsAverage: {$gte: 4.8}\r\n        });\r\n        query.limit(5).sort('-ratingsAverage -price').select('name price difficulty summary ratingsAverage');\r\n        const tour = await query;\r\n        res.json(tour)\r\n    } catch (error) {\r\n        res.status(400).json({msg: `There as an error with the /api/tours/top-5-tours route`,error})\r\n    }\r\n}) ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-08-16T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "mongo",
            "apis with mongoose"
          ]
        },
        "popular": {
          "en-US": true
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "UvxZUO4PATcWETkLhhEEG",
        "type": "Entry",
        "createdAt": "2019-10-13T07:01:00.103Z",
        "updatedAt": "2019-10-13T07:02:00.422Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 6,
        "publishedAt": "2019-10-13T07:02:00.422Z",
        "firstPublishedAt": "2019-10-13T07:02:00.422Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 7,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Creating models in Mongoose"
        },
        "slug": {
          "en-US": "creating-models-in-mongoose"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "kjchmjuZzccxBSCS01pO9"
            }
          }
        },
        "description": {
          "en-US": "Models are constructors or blueprints for a how we store the data. An instance of a model is a document."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Models are constructors that take a schema (logic on how we store the data) and allow us to return a document ( an instance of a particular schema)\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const mongoose = require('mongoose');\r\n\r\nconst UserSchema = new mongoose.Schema({\r\n  name: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  email: {\r\n    type: String,\r\n    required: true,\r\n    unique: true\r\n  },\r\n  password: {\r\n    type: String,\r\n    required: true\r\n  },\r\n  avatar: {\r\n    type: String\r\n  },\r\n  date: {\r\n    type: Date,\r\n    default: Date.now\r\n  }\r\n});\r\n\r\nmodule.exports = User = mongoose.model('user', UserSchema);\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The model method of mongoose, takes in two arguments. 1. The name of the model that we give it and the Schema that we defined above. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-08-23T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "mongo"
          ]
        },
        "popular": {
          "en-US": true
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "1sT4UiRzjaTFQNDn4xEeVP",
        "type": "Entry",
        "createdAt": "2019-10-17T01:35:47.874Z",
        "updatedAt": "2020-03-20T01:31:20.958Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 1119,
        "publishedAt": "2020-02-03T10:44:50.038Z",
        "firstPublishedAt": "2020-02-03T10:36:10.633Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 3,
        "version": 1121,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Gatsby with Strapi Starter"
        },
        "slug": {
          "en-US": "gatsby-with-strapi"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "5ad8RpmaLFIqQY5ZIYiUkn"
            }
          }
        },
        "description": {
          "en-US": "Here we go Gatsby + Strapi. A quick intro or refresher to get you started. This tutorial will assume you are already familar with Strapi\n"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "1. Installing Strapi",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "npm i strapi@alpha -g",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "2.  Starting a new project",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "strapi new <Strapi Directory Name> --quickstart",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "quick start will install a SQL lite database and everything automatically.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "2. a ) ( optional ) starting up strapi again if needed",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "- ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "cd cms",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n- ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "strapi start",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n- open up localhost:1337/admin",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "3.  Set up Strapi in browser",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Go to localhost: 1337",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Now set up your api on the ui interface",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "4. Go to vs code and in the root directory do",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "gatsby new <front end directory to create>",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "5.  Inside the front end folder to start up gatsby in dev you can run:  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "gatsby develop",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Should have two terminals in vs code running a backend and a frontend ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "6. Install Strapi Source Plugin and add to the Gatsby config file review documentation under Gatsby plugins. Installing the Gatsby source Strapi plugin makes the data from Strapi available in the graphQL data layer inside Gatsby. The Strapi data will now be available inside this data object. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "npm i --save gatsby-source-strapi",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "7.  Inside the Gatsby config file paste the code from the documentation. Content Types should be made public in the array otherwise 403 error. There is also the possibility to login with a Strapi user when the content types are not publicly available. To do so specify the username and password when creating the Strapi app.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Deploying to Heroku ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "As of this writing, you need to make sure your node version is 10.x rather than 12 which is the current node version Heroku uses. In the cms directory, modify this part of your package.json file:  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": " \"engines\": {\r\n    \"node\": \"10.x\",\r\n    \"npm\": \">= 6.0.0\"\r\n  }",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "8. Installing  Heroku",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "- Have Heroku installed. Go to website and install Heroku on system, add Heroku as path of system environment variable ie. C:\\Program Files\\heroku\\bin. Restart VS Code and check install complete using in cmd line using ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "heroku --version",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "9. Login to heroku ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "heroku --login",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "10.  Update .gitignore inside cms directory by adding ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "package-lock.json",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "11. Initialize repo in cms directory and create a heroku instance\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "git init\ngit add .\ngit commit -am 'first commit'\nheroku create <your project name>",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "12. We can no longer use SQLITE when deploying to Heroku as that is meant to be a small demo database. Lets connect to a POSTGRES Database by running. This is the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "hobby-dev",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " version of the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "postgresql ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "database add on that Heroku provides.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "heroku addons:create heroku-postgresql:hobby-dev",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "13. The next step is to set the environment variables for our project.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "13. a ) In the terminal, run the following command to get the environment variables for you project",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "heroku config",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "13. b) Step a) Should provide a url like ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "postgres://ebitxebvixeeqd:dc59b16dedb3a1eef84d4999sb4baf@ec2-50-37-231-192.compute-2.amazonaws.com: 5432/d516fp1u21ph7b",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n\nUse the Heroku config to set these environment variables: ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "heroku config:set DATABASE_USERNAME=ebitxebvixeeqd\r\nheroku config:set DATABASE_PASSWORD=dc59b16dedb3a1eef84d4999a0be041bd419c474cd4a0973efc7c9339afb4baf\r\nheroku config:set DATABASE_HOST=ec2-50-37-231-192.compute-2.amazonaws.com\r\nheroku config:set DATABASE_PORT=5432\r\nheroku config:set DATABASE_NAME=d516fp1u21ph7b",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "14  Replace the `./config/environments/production/database.json` file with the following",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "{\r\n  \"defaultConnection\": \"default\",\r\n  \"connections\": {\r\n    \"default\": {\r\n      \"connector\": \"strapi-hook-bookshelf\",\r\n      \"settings\": {\r\n        \"client\": \"postgres\",\r\n        \"host\": \"${process.env.DATABASE_HOST}\",\r\n        \"port\": \"${process.env.DATABASE_PORT}\",\r\n        \"database\": \"${process.env.DATABASE_NAME}\",\r\n        \"username\": \"${process.env.DATABASE_USERNAME}\",\r\n        \"password\": \"${process.env.DATABASE_PASSWORD}\",\r\n        \"ssl\": true\r\n      },\r\n      \"options\": {}\r\n    }\r\n  }\r\n} ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "15  Install non-blocking PostgreSQL client for Node.js",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "npm i pg --save",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "16  push changes to heroku master",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "git add .\ngit commit -m 'database.json modified'\ngit push heroku master",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "17 Verify Strapi CMS is added to heroku.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You should see a welcome page. Navigate to admin and create a new user.\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://gatsby-with-strapi-demo-100.herokuapp.com/admin/plugins/users-permissions/auth/register"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://gatsby-with-strapi-demo-100.herokuapp.com/admin/plugins/users-permissions/auth/register",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "18. Add new user to production environment using the Strapi UI.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "19. Add new content to content models.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "20. Update roles and permissions to ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "find",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "findone ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "for user and other content models",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Cloudinary and Strapi ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "21. Go to cd plugins/upload and npm i --save strapi-provider-upload-cloudinary",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "22. Inside plugin folder:  git add .  git commit -m 'added cloudinary' git push heroku master",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "23.  Inside your production version of Strapi UI , got to plugins -> File Uploads -> Cloudinary and put in your API details\nMake sure you doing this inside your herokuapp ie. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://gatsby-with-strapi-demo-100.herokuapp.com/admin/plugins/upload/configurations/production"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://gatsby-with-strapi-demo-100.herokuapp.com/admin/plugins/upload/configurations/production",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "24. Delete images in `File Uploads` and re upload it in your content. These images will now be uploaded to Cloudinary. We can check this with an api call ie. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Netlify Deploy",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "25. Inside blog directory (Gatsby directory) create new repo\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "git init\ngit add README.md\ngit add .\ngit commit -m 'First Commit'\ngit remote add origin <repo name>\ngit push -u origin master",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n26. Once we have added and the front end of the app onto github with the correct env variables and the backend (CMS) push to heroku only we can then set up the front end with Netlify.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "On the blog (front end side)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// gatsby-config.js ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "  {\r\n      resolve: `gatsby-source-strapi`,\r\n      options: {\r\n        apiURL: process.env.DEPLOY_URL\r\n          ? \"https://gatsby-with-strapi-demo-100.herokuapp.com\"\r\n          : \"http://localhost:1337\",\r\n        queryLimit: 1000, // Default to 100\r\n        contentTypes: [`article`, `user`],\r\n        // Possibility to login with a strapi user, when content types are not publically available (optional).\r\n        loginData: {\r\n          identifier: process.env.STRAPI_USERNAME,\r\n          password: process.env.STRAPI_PASSWORD,\r\n        },\r\n      },\r\n    },",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Make sure to also add in the following at the top so we can see the process.env environment variables.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "require(\"dotenv\").config({\r\n  path: `.env.${process.env.NODE_ENV}`,\r\n})",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "The next steps can be done also through the front end of Netlify by adding your blog repo to Netlify and deploying it",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "27.   Install Netlify CLI globally (optional if already done)\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "npm i netlify-cli -g",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "28.  Set up Netlify and give site url name and select choose new site.\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "netlify init",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n\n29. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-08-16T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "strapi",
            "gatsby"
          ]
        },
        "popular": {
          "en-US": false
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "3Oy5PI3YaQmFhbN2gIDnmp",
        "type": "Entry",
        "createdAt": "2019-10-19T22:24:01.554Z",
        "updatedAt": "2019-10-19T22:56:57.649Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 285,
        "publishedAt": "2019-10-19T22:56:57.649Z",
        "firstPublishedAt": "2019-10-19T22:46:59.483Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 286,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "How to clone your own repo in github"
        },
        "slug": {
          "en-US": "how-to-clone-your-own-repo-in-github"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "2TdvrbJ1FG8PwCuacgUmN9"
            }
          }
        },
        "description": {
          "en-US": "You want to start a new project, but want to use an existing template project you already have on github. To do this ..."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In a new folder you want the project to be in",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "git clone <your-template-repo-url>",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Change the remote url of your project, you do not want to overwrite your template",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "git remote set-url origin https://github.com/<username>/<your-new-project-name>",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Now create a new repo from the command line (press enter a couple timesgit init\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "git add README.md\r\ngit commit -m \"first commit\"\r\ngit remote add origin https://github.com/<username>/<your-new-project-name>.git\r\ngit push -u origin maste",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Even faster go to github and select create new repo button and give your project a name a description, after continuing you should get the code to create a new repo and paste that into your code editor.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Now you will have a cloned repo with the original untouched and the full original commit history.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-10-19T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "github",
            "git",
            "how to clone your own repo with the commit history intact"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "6uYApAVrTZ8YsMtuBNmr2l",
        "type": "Entry",
        "createdAt": "2019-11-09T06:42:37.163Z",
        "updatedAt": "2019-12-06T11:48:15.840Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 4953,
        "publishedAt": "2019-12-06T11:48:15.840Z",
        "firstPublishedAt": "2019-11-09T23:56:24.189Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 20,
        "version": 4954,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Building an ecommerce site with Gatsby, Contentful and Snipcart"
        },
        "slug": {
          "en-US": "building-an-ecommerce-site-with-gatsby-contentful-and-snipcart"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "3zGDp3gWMN040WEnPYXCyA"
            }
          }
        },
        "description": {
          "en-US": "Coming from a React background with some experience in Gatsby a static site generator, I wanted to use the JAM stack to create a blazingly fast, free yet powerful ecommerce solution that could work for both small or med size companies and could scale easily. This article shows you how you can get started"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Intro",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The absence of speed kills. This is a known fact, and there have been numerous articles relating to how slow websites kill traffic. In fact, a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.thinkwithgoogle.com/marketing-resources/data-measurement/mobile-page-speed-new-industry-benchmarks/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                          {
                            "type": "underline"
                          }
                        ],
                        "value": "study",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " by Google shows that over ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "half ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "of your mobile visitors leave a page that takes longer than 3 seconds to load. As mobile users continue to grow, the demand and expectations for faster page loads are greater than ever.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "It is not just mobile users either that are impatient. A ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.gigaspaces.com/blog/amazon-found-every-100ms-of-latency-cost-them-1-in-sales/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                          {
                            "type": "underline"
                          }
                        ],
                        "value": "study",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " from Amazon showed that 100ms of page speed cost them 1% in sales!",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I experimented with several large ecommerce platforms like Shopify and WooCommerce. WooCommerce comes with the baggage of WordPress and WorPress is intrinsically slow and clunky. Shopify is also very slow, especially when you have lots of products. When I created and launched a Shopify store, with about a dozen or so products I experience load speeds of 5 seconds or more on desktop with fast wifi. This speed was agonizing and I knew I needed to build a better site with faster load times and better user experience. I also knew that if I wanted to move to complete customization and freedom than I had to move beyond any platform like WordPress or Shopify.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Since faster page loads translate to more site visits, better user experience, more conversions and ultimately greater revenue, I was determined to build an ecommerce site with speed as the #1 priority.  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "There is also the developer experience.  While WooCommerce and Shopify are easy to set up out of the box, customization is more difficult, especially if you are not familiar or specialized in PHP or Liquid.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Enter Gatsby. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.gatsbyjs.org/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                          {
                            "type": "underline"
                          }
                        ],
                        "value": "Gatsby",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " markets itself as a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      },
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "blazingly ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "fast static site generator. Being familiar with React, this open source framework, marketed for speed and built on top of React was an obvious go to choice. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The next task was finding a modern CMS solution that easily integrated with Gatsby and could provide an easy and scalable way to create, update and manage products. For this, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Contentful ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "comes to the rescue. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Finally, the last piece was how users were going to buy the products. I went with ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://snipcart.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                          {
                            "type": "underline"
                          }
                        ],
                        "value": "Snipcart",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " because it provides an easy to implement solution, with minimal costs compared to other related competitors. It’s new V3 version is the slick, streamlined and optimized checkout flow I was after. With Snipcart, you also get a product that is tested to increase your sales and conversions. Developer mode is free and you only pay once you go live. Starting at $10/month it is one of the more affordable options with lots supported e-commerce payment gateways, like Stripe, PayPal and Square.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "With these three pillars in place, I was ready to build my prototype. In this article, I outline a step by step process of how I did this.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Prerequisites",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Some knowledge of Gatsby would be helpful. In addition, basic React, JavaScript developer knowledge is assumed. I also assume you have node installed and are familiar with npm. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Overview",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We are going to be creating a bare bones, but extremely fast, powerful and scalable ecommerce starter using some amazing modern technology.  There will be a few optional sections which if you are familiar with you can skim or skip over. Let's dive right in.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "1. Starting up Gatsby (optional)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Let's jump straight into Gatsby. You will need to install Gatsby on your computer. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Install the Gatsby CLI",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "npm i -g gatsby-cli",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Create a new site and give it a name like below",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "gatsby new fashion-two",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Alternatively, if you are already inside your root project folder you can simply go ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "gatsby new .",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This will create a Gatsby Starter Default Project. Navigate to the inside the folder ( if needed ) and start the development server. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "gatsby develop",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You should now see a new Gatsby site on localhost: 8000 with a funky looking astronaut waiter guy, or some other welcome page.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "2. Initial Setup",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " a ) Installing the some additional dependencies. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Lets install some dependencies right now. I will install the other dependencies we need later on as needed.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "npm i @emotion/core @emotion/styled emotion-theming gatsby-plugin-emotion gatsby-image",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "These dependencies should be enough to get started. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "b ) My VS Code, Gatsby setup (optional)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In this optional section, I will quickly run through the some of overhead I use for a given project, will mostly keeping the existing starter file intact for brevity. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": ".pretterrc",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file I will change \"semi \"to true and \"single quotes\" to true for preference.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If you head over to ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "components/layout.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "  we can clean this up by getting rid of most of the stuff and keeping the following code",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": " ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// layout.js",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import React from \"react\"\r\nimport PropTypes from \"prop-types\"\r\n\r\nimport Header from \"./header\"\r\nimport \"./layout.css\"\r\n\r\nconst Layout = ({ children }) => {\r\n  return (\r\n    <>\r\n      <Header siteTitle=\"Gastby Fashion Demo\" />\r\n    </>\r\n  )\r\n}\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n}\r\n\r\nexport default Layout\r",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I will keep the standard layout.css file which will have some global css styles that we want to use in our app. You could elect to replace this with an scss file to keep your global styles more modular and organized. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "There will be some minimal styling in this app, using ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "Emotion",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". To add emotion, add the following to the plugins array in the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "gatsby-config.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "  {\r\n     resolve: `gatsby-plugin-emotion`,\r\n  },",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I want my colors to be consistent and easily maintainable. You could use scss variables but since we are using Emotion, I will insert an emotion theme into the layout component to make all the color variables available to any component. This way, if we decide to change the shade of red we are using, we only need to in one place.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Once this is done, the starter layout.js file looks something like:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport { ThemeProvider } from 'emotion-theming';\r\nimport styled from '@emotion/styled';\r\n\r\nimport Header from './header';\r\nimport './layout.css';\r\nimport { Footer } from './footer';\r\n\r\nconst theme = {\r\n  colors: {\r\n    primary: 'rgb(92, 52, 145)',\r\n    primaryDark: 'rgb(63, 3, 122)',\r\n    primaryLight: 'rgb(148, 103, 206)',\r\n    primaryVeryLight: 'rgb(232, 213, 250)',\r\n    primaryTransparent: 'rgba(92, 52, 145,0.2)',\r\n    white: '#fff',\r\n    black: '#1a1a1a',\r\n    blackTransparent: 'rgba(41, 43, 46, 0.4)',\r\n    red: 'rgb(218, 18, 31)',\r\n  },\r\n  pageWidth: {\r\n    fixed: '800px',\r\n  },\r\n  screenSize: {\r\n    mobileL: '600px',\r\n  },\r\n};\r\n\r\nconst Main = styled.section``;\r\n\r\nconst Layout = ({ children }) => {\r\n  return (\r\n    <>\r\n      <ThemeProvider theme={theme}>\r\n        <Header siteTitle=\"Gastby Fashion Demo\" />\r\n        <Main>{children}</Main>\r\n        <Footer />\r\n      </ThemeProvider>\r\n    </>\r\n  );\r\n};\r\n\r\nLayout.propTypes = {\r\n  children: PropTypes.node.isRequired,\r\n};\r\n\r\nexport default Layout;",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "3. Contentful ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " a ) Content Models",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Contentful is a modern, popular CMS where we will be storing our products. We will be using Contentful to create a \"Bag\" content model. This content model acts like a blue print or schema for the bag products we are going to add. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "After signing up ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.contentful.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "here",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "  create a new content model by clicking on ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "Content Model -> Add Content Type.",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "  My new content model is called ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "\"fashionTwoBags\"",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". Inside the Content Model we can declare the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "field name",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "field types",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " and any associated validation along side it in a super intuitive user interface.  Any product that is a bag on our store will have the following fields below.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                  "target": {
                    "sys": {
                      "id": "5YyAZbyurUJMygpYoj72Sg",
                      "type": "Link",
                      "linkType": "Asset"
                    }
                  }
                },
                "content": [
                ],
                "nodeType": "embedded-asset-block"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "slug field",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " is a short text, that we should set to be required. In addition, we can specify it to have an appearance of ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "\"slug\"",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " inside the field settings.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "tags field ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " is a short text list field that is useful for an storing an array of values. For this case I will use tags to describe certain attributes of my bag product such as classic, modern, new. etc.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "description field",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "  is a rich text field for long text where we have access to markdown options like heading and paragraph and styles like bold, italic, underline.  In addition, this WYSIWYG content editor lets you embed other assets and entries directly inside. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We cannot do any custom styling inside the Contentful UI.  However, later on we will add in custom formatting to the rendered rich text content.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The rest of the fields are relatively straight forward. Though your fields might be different with different names, the basic principles are the same. I have kept every field a required field with the exception of ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "otherImages",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". I left this field optional, because sometimes we might or might not have many images for a particular product. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In Contentful, we can also create a",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": " reference ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "to another content model.  If you have a larger store, references (aka relations) to other content models could come in handy. You might have \"Brand\" content model which would store fields about the brand of the bags such as the name, size, founder and history. Another good example to create references is for authors and articles. In Contentful, we don't need to specify whether it is a one-one relationship or one-many relationship. For simplicity, this demo will not use any references to other content models.   ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "4. Contentful - Creating Content",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "After creating our new Content Model, lets navigate to ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "Content -> Add Entry.",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " Here we can add some new content based on the fields we set up.  My favorite button for this is ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "Actions -> Duplicate",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " which allows us to easily duplicate content. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For content and images what should you use? You should use whatever you are selling on your website obviously. If you are a developing for a client, Lorem Ipsum generator or any other",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://hipsum.co/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": " variation",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " is a handy tool. For images, Adobe Stock is great but expensive. Free alternatives are ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://unsplash.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "unsplash",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://pixabay.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "pixabay",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://burst.shopify.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "burst",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ".",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "After creating several new product entries and publishing them lets create some ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "GraphQL ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "queries to render some content on the screen of our website. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "5. Rendering all our Products in Gatsby",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "a) Gatsby - Initial Setup",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "There is lots of other tutorials using ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "GraphQL ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "with Gatsby, so I will go fairly quick through this section. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "First go to or create a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "gatsby-config.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file where we store our site metadata and our other plugins.  At the top if this file add",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// gatsby-config.js\nrequire('dotenv').config({\r\n  path: `.env.${process.env.NODE_ENV}`,\r\n});",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "this allows us to bring in our environment variables stored in the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": ".env.development",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": ".env.production",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " files.  You can learn more about environment variables at ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://gatsby.dev/env-vars"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://gatsby.dev/env-vars",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Also, we will add the following to the plugins array \n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// gatsby-config.js\n{\r\n   resolve: `gatsby-source-contentful`,\r\n   options: {\r\n    spaceId: process.env.CONTENTFUL_ID,\r\n    accessToken: process.env.CONTENTFUL_ACCESS_TOKEN,\r\n    },\r\n},",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Inside the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": ".env.development",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file you should have something like",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// .env.development\nCONTENTFUL_ID=YourId\r\nCONTENTFUL_ACCESS_TOKEN=YourToken\nCONTENTFUL_PREVIEW_ACCESS_TOKEN=aaa111",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You will find these values for your app by going to ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "Contentful -> Settings ->  Api Keys => Access Tokens",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Note: Make sure you do NOT surround the values in quotes and you do not commit this file to github",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-6"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Finally let's install some Contentful plugins:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "npm i gatsby-source-contentful @contentful/rich-text-react-renderer @contentful/rich-text-types",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If you run into an error, make sure you have content inside Contentful first. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "b) Gatsby - GraphQL",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "After restarting the gatsby dev server, go to ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "http://localhost:8000/___graphql"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "http://localhost:8000/___graphql",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\nOn the left hand side of this ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "Graphiql ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "interface you should see an ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "Explorer ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "with a host of graphQL queries. You can build the queries using the explorer interface. Another handy command is using ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "ctrl ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "+ ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "spacebar",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      },
                      {
                        "type": "bold"
                      }
                    ],
                    "value": " ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "to get a preview of the selection you can use. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "With the Contentful plugin successfully installed you should also see your Contentful queries in there ( after refreshing page ).",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Since this is not a graphQL tutorial, I will not explain the query in depth.  I used the following query to get all entries from the Contentful content model. The fields below are specified below.  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "{\r\n  allItems: allContentfulFashionTwoBags {\r\n    nodes {\r\n      id\r\n      productName\r\n      productSlug\r\n      shortDescription\r\n      price\r\n      discountPrice\r\n      tags\r\n      rating\r\n      displayBadge\r\n      mainImage {\r\n        fluid(quality: 90, maxWidth: 300) {\r\n          src\r\n        }\r\n      }\r\n    }\r\n  }\r\n}",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Running this query inside Graphiql should return a response object with all of our fields.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "c) Gatsby - Rendering all our products",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Next we are going to need to call this query inside of our ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "index.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file.  To do this we will need to just import graphql from Gatsby and render the page query, which we created above",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import React from 'react';\r\nimport { Link, graphql } from 'gatsby';\r\nimport styled from '@emotion/styled';\r\nimport Image from 'gatsby-image';\r\nimport Layout from '../components/layout';\r\n\r\nexport const query = graphql`\r\n  {\r\n    allItems: allContentfulFashionTwoBags {\r\n      nodes {\r\n        id\r\n        productName\r\n        productSlug\r\n        shortDescription\r\n        price\r\n        discountPrice\r\n        tags\r\n        rating\r\n        displayBadge\r\n        mainImage {\r\n          fluid(quality: 90, maxWidth: 300) {\r\n            ...GatsbyContentfulFluid_withWebp\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst StyledImage = styled(Image)`\r\n  width: 20rem;\r\n  height: 20rem;\r\n`;\r\n\r\nconst index = ({ data }) => {\r\n  const products = data.allItems.nodes;\r\n  return (\r\n    <Layout>\r\n      {products.map(product => (\r\n        <Link key={product.productSlug} to={`/products/${product.productSlug}`}>\r\n          <h4>{product.productName}</h4>\r\n          <div> $ {product.price} USD</div>\r\n          <div>\r\n            <StyledImage fluid={product.mainImage.fluid} />\r\n          </div>\r\n        </Link>\r\n      ))}\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default index;\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The result of this query is a data object which we pass into the index page component like shown above",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Also note we have replaced ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "src  ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "with ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": " ...GatsbyContentfulFluid_withWebp\r",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " because we want to take advantage of Gatsby's built in image optimization features, which you can read more about ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.gatsbyjs.org/packages/gatsby-image/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "here",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". This new Contentful hook will return an array of items, which are all of our Contentful entries.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Great, we have all product names and a link to each product slug along with an Image optimized by Gatsby.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You might haved noticed that the links currently go to a 404 page. In the next section we will fix this by writing some code to create a new page for each of these products programmatically.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "6.  Rending each product page in Gatsby",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " a) Gatsby - gatsby-node.js",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We want to create a new page programmatically for each of our content entries in our ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "fashionTwoBags",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " content model. We will want to write a GraphQL query that outputs all of our product slugs and creates a page for each of these slugs. Luckily, we can use the Gatsby  ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "createPages ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "API",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": " ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "to help us:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// gatsby-nodes.js\nconst path = require('path');",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "\r// use gatsby create pages api and query for all product slugs\nexports.createPages = async ({ actions, graphql }) => {\r\n  const { createPage } = actions;\r\n  const { data } = await graphql(`\r\n    {\r\n      allBags: allContentfulFashionTwoBags {\r\n        nodes {\r\n          productSlug\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\r\n // create page for each product and list\n// them all in /products/:productSlug \ndata.allBags.nodes.forEach(item => {\r\n    createPage({\r\n      path: `products/${item.productSlug}`,\r\n      component: path.resolve('./src/templates/Bag.js'),\r\n      context: {\n         // Data passed to context is available\r\n         // in page queries as GraphQL variables.\n        slug: item.productSlug,\r\n      },\r\n    });\r\n  });\r\r\n};\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The next thing is to create a new template component, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "Bag.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "  in the directory you specify in ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "path.resolve ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "and pass the product slug into the context. Before doing this let's head over to GraphiQL again to render our page specific query.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "b) GraphiQL - Page specific queries",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " Inside GraphiQL ( ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "http://localhost:8000/___graphql"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "http://localhost:8000/___graphql",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ") you see another query called ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "contentfulFashionTwoBags.",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "   This returns a bag instead of all the bags. To specify which bag to return we will need to create a new query. In this query we will create a new slug variable and pass it in as type string",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "  query bagTemplateQuery($slug: String!) {\r\n\r\n    item: contentfulFashionTwoBags(productSlug: { eq: $slug }) {\r\n      id\r\n      productSlug\r\n      productName\r\n      shortDescription\r\n      description {\r\n        json\r\n      }\r\n\r\n      mainImage {\r\n        fluid {\r\n          src\r\n        }\r\n      }\r\n      otherImages {\r\n        fluid {\r\n         src\r\n        }\r\n      }\r\n      price\r\n      discountPrice\r\n      tags\r\n      rating\r\n      color\r\n    }\r\n  }",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Inside the query variables, pass in a specific slug name from your content.  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "{\r\n  \"slug\":\"monnet-lime-green-bag\"\r\n}",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Recall that our ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "description field",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " inside Contentful was a Rich Text Field that returns a JSON data object. It looks rather intimidating here to parse it and render it on the page.  We will use a library to help us render this. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "c) Gatsby - Product Template",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We can create our product template called Bag.js and use the query we made in GraphiQL above but replacing ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "src ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "with ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "...GatsbyContentfulFluid_withWebp ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "like earlier. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I am also invoking the library ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "@contentful/rich-text-react-renderer ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "to helps us format the json data object from the description field. \n\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// src/templates/Bag.js\r\nimport React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport { graphql } from 'gatsby';\r\nimport Img from 'gatsby-image';\r\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\r\nimport Layout from '../components/layout';\r\n\r\n// run template query\r\nexport const query = graphql`\r\n  query BagTemplateQuery($slug: String!) {\r\n    item: contentfulFashionTwoBags(productSlug: { eq: $slug }) {\r\n      id\r\n      productSlug\r\n      productName\r\n      shortDescription\r\n      description {\r\n        json\r\n      }\r\n\r\n      mainImage {\r\n        fluid {\r\n          ...GatsbyContentfulFluid_withWebp\r\n        }\r\n      }\r\n      otherImages {\r\n        fluid {\r\n          ...GatsbyContentfulFluid_withWebp\r\n        }\r\n      }\r\n      price\r\n      discountPrice\r\n      tags\r\n      rating\r\n      color\r\n    }\r\n    site {\r\n      siteMetadata {\r\n        siteUrl\r\n      }\r\n    }\r\n  }\r\n`;",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "\r\nconst StyledImage = styled(Img)`\r\n  width: 30rem;\r\n  height: 30rem;\r\n`;\r\n\r\nconst BagTemplate = ({ data: { item } }) => {\r\n  const options = {\r\n    // options for rich text formating\r\n  };\r\n\r\n  return (\r\n    <Layout>\r\n      <h2>{item.productName}</h2>\r\n      <div>{item.rating} stars</div>\r\n      <div>{item.shortDescription}</div>\r\n      <StyledImage fluid={item.mainImage.fluid} />\r\n      {/* render the rich text format description */}\r\n      <main>{documentToReactComponents(item.description.json, options)}</main>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default BagTemplate;\r\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "After restarting the dev server, the links to each product page should work and we should have a unique product page for each slug. We are making good progress!",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Note, I have also added a small query at the end so we can get our site url, which will be used in our Snipcart section",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To render our rich text format, we called the function ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "documentToReactComponents ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "which excepts a JSON object and an options object as arguments. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "As mentioned earlier, we can custom style the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "block",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "marks ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "inlines ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "from the WYSIWYG content editor.  Add the following to the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "Bag.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file to style the paragraph tags orange and the hyperlinks purple with an orange background. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// import rich-text-types\nimport { BLOCKS, MARKS, INLINES } from '@contentful/rich-text-types';",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": " // Add in some styling\nconst Bold = styled.span`\r\n  font-weight: bold;\r\n  color: red;\r\n`;\r\n\r\nconst P = styled.p`\r\n  color: orangered;\r\n`;\r\n\r\nconst StyledHyperLink = styled.span`\r\n  color: purple;\r\n  padding: 1px 2px;\r\n  background: orange;\r\n  cursor: pointer;\r\n`;\r\n\r\n// render the styling\nconst RTFBold = ({ children }) => <Bold>{children}</Bold>;\r\nconst Text = ({ children }) => <P>{children}</P>;\r\nconst HyperLink = ({ children }) => (\r\n  <StyledHyperLink>{children}</StyledHyperLink>\r\n);\n\n// modifying the options\n const options = {\r\n    renderMark: {\r\n      [MARKS.BOLD]: text => <RTFBold>{text}</RTFBold>,\r\n    },\r\n\r\n    renderNode: {\r\n      [BLOCKS.PARAGRAPH]: (node, children) => <Text>{children}</Text>,\r\n      [INLINES.HYPERLINK]: (node, children) => (\r\n        <HyperLink>{children}</HyperLink>\r\n      ),\r\n    },\r\n  };",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " We have now just created custom rendering styles that is scoped only to the Bag.js template using emotion CSS in JS. Of course you probably don't want to have purple colored, orange background hyperlinks for your template, but the options for customization is there. For more information on rendering rich text, refer to this library ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://github.com/contentful/rich-text/tree/master/packages/rich-text-react-renderer"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "here",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We now have all our products stored in Contentful, a robust content model and products on the screen.  The last major component of our project is the checkout process so users can purchase our products.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "7. Snipcart",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "a) Getting started",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Now that we have some content rendered, we can add in Snipcart to aid our checkout process. Snipcart v3 has been recently released (Oct 2019) so I will be using this. You will also need to set up a payment gateway. I used Stripe to do this. If you do not have a Stripe account and want to use Stripe as the payment gateway you will also need to set up a Stripe developer account.  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Sign up for Snipcart: ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://snipcart.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://snipcart.com/",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\nSign up with Stripe: ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://stripe.com/en-ca"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://stripe.com/en-ca",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "b) Snipcart Dashboard",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Inside the Snipcart dashboard there is two main navigation tabs. The left black one, which has information about your orders, sales, abandoned carts, discounts, products and a whole slew of other features. The other navigation tab is the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "store configurations/ account ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "navigation bar which can be accessed by clicking on the top right user icon.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In the middle top of our dashboard, we can toggle between live mode and test mode. Make sure test mode is selected.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In the account navigation you can find your api keys under ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "Account -> API Keys.",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In the store configuration navigation under ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "Domains and URL ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "you will need to add your site domain name. At this point you might not yet have a domain. If that is the case, revisit this step at the end of this article ( we will be deploying with Netlify and creating a temp url which you can use )",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In your preferred payment gateway , get the associated API keys. For Stripe, you can visit ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://dashboard.stripe.com/dashboard"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://dashboard.stripe.com/dashboard",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "c) Adding Snipcart to Gatsby",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-4"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Install the snipcart gatsby plugin",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "npm i gatsby-plugin-snipcart",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In the gatsby-config.js file we will need to add the following into our plugin array",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "  {\r\n      resolve: 'gatsby-plugin-snipcart',\r\n      options: {\r\n        apiKey: process.env.SNIPCART_API,\r\n        autopop: true,\r\n        js: 'https://cdn.snipcart.com/themes/v3.0.0/default/snipcart.js',\r\n        styles: 'https://cdn.snipcart.com/themes/v3.0.0/default/snipcart.css',\r\n      },\r\n },\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Near the top will also need to add our URL, which you can do now or after you have a domain url set up:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Define site URL here\r\nlet URL;\r\nif (process.env.NODE_ENV === 'production') {\r\n  URL = 'https://gatbsy-ecommerce-demo.netlify.com';\r\n} else {\r\n  URL = 'http://localhost:8000';\r\n}\r\n\r\nmodule.exports = {\r\n  siteMetadata: {\r\n    title: `Gatsby Ecommerce Demo`,\r\n    description: `Your next ecommerce Gatsby site powered with Contentful and Snipcart.`,\r\n    author: `aquasar.io`,\r\n    siteUrl: URL,\r\n  },",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Inside the",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": " .env.development",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file add your snipcart API key without quotes.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "SNIPCART_API=aaa111\nSTRIPE_SECRET_KEY=sk_test_aaa111\nGATSBY_STRIPE_PUBLIC_KEY=pk_test_aaa111",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The Snipcart api key to use is the Public Test Api key to use in bold at the very top.  Restart the Gatsby dev server and add the following code into the Bag.js template where you want the checkout button to appear.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// src/templates/bag.js \n <button\r\n        className={`snipcart-add-item`}\r\n        data-item-id={item.id}\r\n        data-item-name={item.productName}\r\n        data-item-image={item.mainImage.fluid.src}\r\n        data-item-price={item.discountPrice ? item.discountPrice : item.price}\r\n        data-item-url={`${site.siteMetadata.siteUrl}/products/${item.productSlug}`}\r\n      >\r\n        Add to Cart\r\n    </button>",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The checkout button should now work and you should see a popup with the cart details when you hit 'Add to Cart'",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You can test this checkout flow using some VISA test numbers. This won't work on localhost without some additional setup. If you need to test on localhost than refer to this article ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://snipcart.com/blog/develop-a-snipcart-powered-website-locally-using-ngrok"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "here",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Under ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "Payment Gateway",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " you can connect and choose from a number of options such as Stripe, Paypal and Square. You can also use PayPal express in addition to the gateway of your choice.  I believe ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://stripe.com/en-ca/pricing"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "Stripe",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " at this time has the best rates for a new startup ecommerce site. Rates however will vary by region and volume. I currently see a starting rate of 2.9% per succesful card charge + $0.30 with no monthly fees. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Under",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": " Orders & Invoices",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " you can add your Company Name and Company Logo. This will be sent to as a order confirmation to a customer when they purchase.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In the Snipcart store configurations there is a ton of other options like Shipping, Taxes and Email Templates which we will not cover as they are not essential features. You should however, play around with these settings and customize them for your business or client.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "8. Deploying to Netlify",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Netlify is an amazing service for Front-End modern sites. If you haven't done so, please create a Netlify account. Before deploying to Netlify, lets push this repo to Github.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Before pushing to Github make sure you do NOT push your sensitive API keys to that are stored in your .env.development and .env.production files. For this demo both development and production files will have the same keys and be exactly the same. The .env.production file here is merely for reference. Make sure you go to .gitignore and add in the following to make sure this files wont be sent to Github.\n\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// .gitignore\n# dotenv environment variables file\r\n.env\r\n.env.production\r\n.env.development\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Push these files to github (In VS Code Integrated Terminal)\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "git add .\ngit commit -am 'first commit'\ngit push origin master",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Now inside Netlify, you need to find the repo we just pushed and deploy your new site from github. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The deploy will fail unless we add our environment variables inside the deploy settings. \nThis can be found by going to ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "Settings -> Build & Deploy -> Environment -> Environment Variables -> Edit Variables.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                  "target": {
                    "sys": {
                      "id": "2bC86pMHrLQOLkMwnYWAg2",
                      "type": "Link",
                      "linkType": "Asset"
                    }
                  }
                },
                "content": [
                ],
                "nodeType": "embedded-asset-block"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Add all the keys and values exactly the same as in the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": ".env.development",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " or ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": ".env.production ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "files. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We can then select ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "Trigger Deploy -> Deploy site",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " to redeploy. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This usually takes a few minutes but you should have a new site up and running.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Netlify will give you a random url that ends with .netlify.com. You can add your own url under domain settings, or change this random name to a more preferable one by going to",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": " Custom domains -> Edit Site Name",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "9. Testing ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If you did not have a domain name, at this point you should add in the Netlify created domain name into the Snipcart Domain and URLs settings.  You can add as many domains or sub domains as you like.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                  "target": {
                    "sys": {
                      "id": "4be5KFEEdih8px1J8JOIrn",
                      "type": "Link",
                      "linkType": "Asset"
                    }
                  }
                },
                "content": [
                ],
                "nodeType": "embedded-asset-block"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We have not yet tested our checkout process. Depending on your region you can use for example ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "USA\r: 4242 4242 4242 4242\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\r\nCANADA\r: 4000 0012 4000 0000\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The csv or security code can be any three digit number and the date can be any date in the future. You can also use any name and valid address you like.  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "10. Creating a Contentful Hook",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If we update our products than ideally we want to automatically trigger a site deploy so that our new products are available on your site without having to manually deploy our site again. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To do this, create a new hook in Netlify and then go over to Contentful and past this new hook by going to ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "underline"
                      }
                    ],
                    "value": "Contentful -> Settings -> Webhooks",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We are now automatically triggering site deploys once we add new products.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Recap:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We have a simple MVP ecommerce site that is powered by Gatsby, Contentful and Snipcart. It has been a pleasure to share my ecommerce JAMstack experience with you and I hope this article has helped you with your Ecommerce project.  If you have any questions or would like to report any errors, please reach out to me.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The full github repo is at  \n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://github.com/arhoy/gatsby-ecommerce-demo"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://github.com/arhoy/gatsby-ecommerce-demo"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://github.com/arhoy/gatsby-ecommerce-demo",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To view this demo live please:\n",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://gatbsy-ecommerce-demo.netlify.com/#/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://gatbsy-ecommerce-demo.netlify.com/#/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://gatbsy-ecommerce-demo.netlify.com/#/",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-11-09T00:00-07:00"
        },
        "tags": {
          "en-US": [
            "gatsby",
            "contentful",
            "snipcart"
          ]
        },
        "new": {
          "en-US": true
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "7jpvwpjTeA2aVmq2WiGQEs",
        "type": "Entry",
        "createdAt": "2019-11-13T20:25:40.538Z",
        "updatedAt": "2019-11-13T21:50:02.551Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 588,
        "publishedAt": "2019-11-13T21:50:02.551Z",
        "firstPublishedAt": "2019-11-13T21:02:41.929Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 589,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Setting up Google Analytics with Gatsby in a Jiffy"
        },
        "slug": {
          "en-US": "setting-up-google-analytics-with-gatsby-in-a-jiffy"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "5ad8RpmaLFIqQY5ZIYiUkn"
            }
          }
        },
        "description": {
          "en-US": "Setting up Google Anaytics with Gatsby in a Jiffy. Well not quite, but this will be fairly quick and painless I promise."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 1: Creating a Google Analytics Account",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Sign up for Google analytics if you haven't yet and and then navigate to all accounts or your ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://analytics.google.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "dashboard",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Currently at the very left bottom you will see and admin / settings tab with a gear icon. Click on that. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Click on Create New Account and fill out all the instructions with your website name. In our case this will be a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "website ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "with our website name and website url.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Once you have filled out your industry name and timezone you will see a page with an tag looking something like this",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "<!-- Global site tag (gtag.js) - Google Analytics -->\r\n<script async src=\"https://www.googletagmanager.com/gtag/js?id=UA-123456789-1\"></script>\r\n<script>\r\n  window.dataLayer = window.dataLayer || [];\r\n  function gtag(){dataLayer.push(arguments);}\r\n  gtag('js', new Date());\r\n\r\n  gtag('config', 'UA-123456789-1');\r\n</script>",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In our case, this example tag is UA-123456789-1. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Google weirdly does not allow you to just copy and paste the ID only, so I just copy the whole thing into NotePad first and then copy and paste the ID.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 2: Gatsby Plugin",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Head over to your code editor and in your project install the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.gatsbyjs.org/packages/gatsby-plugin-google-analytics/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "Gatsby Google Analytics Plugin",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " which is an official Gatsby plugin.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "npm i gatsby-plugin-google-analytics",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Now inside the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "gatsby-config.js",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file I really only care about the Tracking ID. Inside the plugins array I simply add ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": " {\r\n      resolve: `gatsby-plugin-google-analytics`,\r\n      options: {\r\n        trackingId: process.env.GATSBY_GOOGLE_ANALYTICS_ID,\r\n      },\r\n }",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I have use environmental variables here for best practice. I don't really know if Google Analytics ID is super sensitive info, regardless I don't want to share it to the rest of the world when pushing it to a repo. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " For this I create a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": ".env.development",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " file and ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      }
                    ],
                    "value": ".env.production ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "file in the root directory of my project like such",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "GATSBY_GOOGLE_ANALYTICS_ID=UA-123456789-1",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Once that is done, push it the gatsby-config changes to your repo and we are all set...Hurrah!",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If you are using Netlify, which I strongly recommend if you are a using Gatsby or a developing with the JAMstack then simply add the environment variables to Netlify as well.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 3 Testing",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We can now head back to Google Analytics and under real time see if there is any users on our site by going to a page on your site that nobody else if going probably going on and seeing if it shows up in your Google Analytics Dashboard.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Step 4 One Last Thing",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "We should create a IP exclusion view in Google Analytics, so we don't count ourselves us users visiting the site.  You can do that by creating a new view and setting up a IP exclusion or IP exclusion list. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " Summary",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This was a short and sweet article on how to get Google Analytics up and running with Gatsby. Of course there is a ton of other configurations and settings you can tinker with and these are all available in the official Google Analytics and Gatsby docs",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-11-14T00:00-07:00"
        },
        "tags": {
          "en-US": [
            "gatsby",
            "google analytics"
          ]
        },
        "new": {
          "en-US": true
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "621yevOYrq9JLL4nLFVzTW",
        "type": "Entry",
        "createdAt": "2019-12-17T14:18:38.202Z",
        "updatedAt": "2019-12-17T14:56:38.220Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 690,
        "publishedAt": "2019-12-17T14:56:38.220Z",
        "firstPublishedAt": "2019-12-17T14:56:38.220Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 691,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Getting Amazing Images on the Web for little to no cost for your website"
        },
        "slug": {
          "en-US": "getting-amazing-images-on-the-web-for-little-to-no-cost-for-your-website"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "3zGDp3gWMN040WEnPYXCyA"
            }
          }
        },
        "description": {
          "en-US": "What I have used to get amazing images on the web with litte to no cost."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Getting great images on the web",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Getting images for your website is a time consuming process. There is a lot of different websites out there that provide free images with or without attribution. When getting images for free without attribution (i.e not displaying image credits on your site) it is good karma and practice to give credit to the author some other way such as mentioning the photo/photographer on your twitter feed or buying them a coffee, especially if you are using several of there photos on a production site. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Best Sources of for Photos (IMHO)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Adobe Stock (Paid, Free Trial)",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Adobe Stock is by far the best source for stock photos that I have come across. However, Adobe Stock is ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      },
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "extremely ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "expensive. I mention it here because you are able to sign up for a no obligation trial on the site, as of this writing,  where you can get a dozen or so images for free. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Ali Express",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If you are drop shipping products or intend to on your site, you can reach out to the Ali Express vendor and ask them for permission to be able to drop ship their products and use there images on your website.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You can easily get the images by ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      },
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "right click inspect",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " on the image, locating the image url, opening the image in a new tab and saving it your local file or cloud. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Sometimes the images are a annoying ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "WebP ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "format. You can very easily convert this to JPG using this",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://ezgif.com/webp-to-jpg"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": " free converter",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Pixabay",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://pixabay.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "Pixabay ",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "is a very popular and well known site for getting free pictures and the my favorite of its kind. It is nice it gives you several options to choose the size of the photo, so you don't always need to use an image optimizer like ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://tinypng.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "TinyPNG",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " to optimize your photo or scale it down in Photoshop or some other free online editor like ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www4.lunapic.com/editor/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "LunaPic",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ".",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Unsplashed",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://unsplash.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "Unsplashed",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " tends to skew towards the more \"artsy\" pictures. I tend to use this site for landing pages or other images that are less conventional and want to stand out. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Envato Elements",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://elements.envato.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "Envato Elements",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " requires a subscription, which is well worth and very affordable compare to Adobe Stock and other premium paid stock photo subscriptions. With Envato Elements you get access to photos, logos, website templates and much more. If you are a freelance developer or designer I highly recommend this site. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This is not meant as a comprehensive list. I am aware of others like Pexels and Flickr but I did not think they are worth mentioning, since I don't particularly like the images I searched for on the site and believe the above list are better options.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2019-12-18T00:00-07:00"
        },
        "tags": {
          "en-US": [
            "images"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "2aGzj46Qx8lKP3Zwe9vWYB",
        "type": "Entry",
        "createdAt": "2020-01-11T14:22:47.285Z",
        "updatedAt": "2020-01-11T15:13:03.252Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 472,
        "publishedAt": "2020-01-11T15:13:03.252Z",
        "firstPublishedAt": "2020-01-11T14:53:07.515Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 3,
        "version": 473,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Redirects on popup plugin using WordPress"
        },
        "slug": {
          "en-US": "redirects-on-pop-up-plugin-using-wordpress"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "7uu4ZHk5GkUX9Urb1CWd7N"
            }
          }
        },
        "description": {
          "en-US": "A short article on wordpress redirects with popup plugin"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If you are a freelancer or web design agency you probably have created or need to create a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "popup ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "for your client's WordPress site.  WordPress is something I am really not a fan of, but it makes up a large portion of small business and personal sites that you cannot really get away without using it from time to time. This is true when you are creating changes on a existing wp site created by someone else.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This time, a simple popup was needed, for which there is a zillion plugins for most of them which are paid plugins to access all the features. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For this task I used a popup plugin called ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://en-ca.wordpress.org/plugins/popup-maker/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "`Popup Maker`",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " which has quite a few nice features you can read up and is free.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I also used the popular plugin ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://en-ca.wordpress.org/plugins/insert-headers-and-footers/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "`Insert Headers and Footers`",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " which allows for insertion of custom CSS and JavaScript code into the headers and footers of your site. This plugin or some variation of it is pretty much necessary for every site since that is also where you would insert your Google Analytics Tracking or Facebook Pixel to measure and learn about your sites users. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Using the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Popup Maker",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " UI, I created a popup with an image that would show up on the site after 5 seconds. To create a redirect I to added the following script after the opening body tag using the Headers and Footers Plugin.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "<script type=\"text/javascript\" >\r\n\r\nfunction addMyEventListener(){\r\n   document.getElementById(\"popupImage\").addEventListener(\"click\", myFunction);\r\n}\r\n\r\nsetTimeout(addMyEventListener,5000);\r\n\r\nfunction myFunction() {\r\nconsole.log('I was clicked');\r\n location.href = \"https://example.com/products/\";\r\n  \r\n}\r\n</script> ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "  ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I ensured that the image had an id of popupImage so that I could an a click event listener on it. In addition, I needed to use ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "setTimeout ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "to ensure the function would only get called after 5 seconds, since that is when the popup with the id popupImage would appear on the screen.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Once a user clicked,  they were than redirected to example.com/products. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Hope this example helps with your popup redirects and saves you some time and / or money so you don't need to purchase a popup plugin to access this functionality. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2020-01-11T00:00-07:00"
        },
        "tags": {
          "en-US": [
            "wordpress",
            "popup"
          ]
        },
        "popular": {
          "en-US": false
        },
        "trending": {
          "en-US": false
        },
        "new": {
          "en-US": false
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "6YvB75KC1eT4PSQw35CfcU",
        "type": "Entry",
        "createdAt": "2020-01-12T23:30:56.604Z",
        "updatedAt": "2020-03-06T00:45:54.014Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 783,
        "publishedAt": "2020-01-20T09:07:23.814Z",
        "firstPublishedAt": "2020-01-13T00:07:24.691Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 798,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Generating Contentful Pages Dynamically with Gatsby Node.js"
        },
        "slug": {
          "en-US": "generating-contentful-pages-dynamically-with-gatsby-node-js"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "5ad8RpmaLFIqQY5ZIYiUkn"
            }
          }
        },
        "description": {
          "en-US": "BLAH df sdf sdf  BLAH BLAH Generating pages dynamically is one of the best and most powerful features when it Gatsby. Combine this using Contentful in the right way and you have a potential WordPress distruptor. "
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Overview",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " BdsdfsfLAH BLAH BLAH This overview assumes you have some familiarity with Gatsby and Contentful. In this article I will be using a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "italic"
                      },
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Menu Items ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "content model from Contentful for a hypothetical cafe store ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      },
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "Aquasar Cafe",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". The Menu Items will have the following content fields such as title, subtitle, description, pictures, slug, price. We will be creating pages out of all the menu items. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Creating a Content Model and Some Content in Gatsby",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I have the following Content Model ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "`Menu Items`",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " set up where",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "title - A short text field, required (required and unique)",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "slug - A short text field, with appearance set to slug (required and unique)",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "subtitle - A long text field (regular not rich text format)",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "description - A long rich text field",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "pictures - Media, many files",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "category - Short text List",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "subcategory - Short text List",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "price - Decimal number",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Your Content model might be quite different of course, but I have laid out the required items because this effects how you write your graph query.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\nOnce that is done, go ahead and some content for your new content model.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Gatsby Node JS",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Inside of the gatsby-node.js file in your text editor, we can use createPages method to render a page for each content you created with your content model above.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "const path = require('path');\r\n\r\nexports.createPages = async ({ actions, graphql }) => {\r\n  const { createPage } = actions;\r\n\r\n  const { data } = await graphql(`\r\n    {\r\n      menuItems: allContentfulMenuItems {\r\n        nodes {\r\n          slug\r\n        }\r\n      }\r\n    }\r\n  `);\r\n\r\n  // creates pages Menu\r\n  data.menuItems.nodes.forEach(item => {\r\n    createPage({\r\n      path: `menu/${item.slug}`,\r\n      component: path.resolve('./src/templates/MenuItemTemplate.js'),\r\n      context: {\r\n        slug: item.slug,\r\n      },\r\n    });\r\n  });\n}",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n\nEach page is using a template called MenuItemTemplate from the unique slugs in Contentful. Lets go ahead and create this.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Template File",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I have created a very simple template file which will be able to render your content including pictures and rich text which hopefully is enough for you to get started and customized it in your own project.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// Use as reference starting point for different page queries\r\nimport React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport Image from 'gatsby-image';\r\nimport { documentToReactComponents } from '@contentful/rich-text-react-renderer';\r\nimport { BLOCKS, MARKS } from '@contentful/rich-text-types';\r\nimport Layout from '../components/layouts/Layout';\r\nimport { Bold, P } from '../components/reusableStyles/typography/Typography';\r\n\r\n// run the template query\r\nexport const query = graphql`\r\n  query menuSimpleTemplateQuery($slug: String!) {\r\n    menu: allContentfulMenuItems(filter: { slug: { eq: $slug } }) {\r\n      nodes {\r\n        title\r\n        subtitle {\r\n          subtitle\r\n        }\r\n        description {\r\n          json\r\n        }\r\n        pictures {\r\n          fluid(maxWidth: 500) {\r\n            ...GatsbyContentfulFluid_withWebp\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nconst RTFBold = ({ children }) => <Bold>{children}</Bold>;\r\nconst Text = ({ children }) => <P>{children}</P>;\r\n\r\nconst MenuItemTemplate = ({ data: { menu } }) => {\r\n  const {\r\n    title,\r\n    subtitle: { subtitle },\r\n    description: { json },\r\n    pictures,\r\n  } = menu.nodes[0];\r\n\r\n  const options = {\r\n    renderMark: {\r\n      [MARKS.BOLD]: text => <RTFBold>{text}</RTFBold>,\r\n    },\r\n\r\n    renderNode: {\r\n      [BLOCKS.PARAGRAPH]: (node, children) => <Text>{children}</Text>,\r\n    },\r\n  };\r\n  return (\r\n    <Layout>\r\n      <div>{title}</div>\r\n      <div>{subtitle}</div>\r\n      <Image fluid={pictures[0].fluid} />\r\n      <main>{documentToReactComponents(json, options)}</main>\r\n    </Layout>\r\n  );\r\n};\r\nexport default MenuItemTemplate;\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "At the top I am using a graphql query to render and filter for each menu item based on the current slug passed in. It knows which page to render because we build and created this in gatsby-node.js file earlier.  Make sure you have installed the necessary packages imported at the top, namely the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      },
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "Contentful Packages",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " which you help to customize your content from the rich text editor.  There currently is not as many formatting options in the rich text editor as I would like. There have been many requests to expand on it, so I hope the team at Contentful is aware and looks to address this need in the future. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "One thing that is not super clear is that when using the rich text editor you will need to query the description as ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "json ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "similar to above",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "To ensure images are optimized Contentful has its own image processor so inside fluid make sure to pass in  ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      },
                      {
                        "type": "italic"
                      }
                    ],
                    "value": "...GatsbyContentfulFluid_withWebp ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "or some other similar option.\n\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For more info or questions please reach out to me directly or view this repo on",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://github.com/arhoy/small-business-template"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "https://github.com/arhoy/small-business-template",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n\nIf it helpful please consider to star the repo",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2020-01-13T00:00-07:00"
        },
        "tags": {
          "en-US": [
            "contentful",
            "gatsby"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "1qFY8mcVwbt3y2MD1tNVPd",
        "type": "Entry",
        "createdAt": "2020-01-20T09:07:27.141Z",
        "updatedAt": "2020-01-20T09:37:58.111Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 447,
        "publishedAt": "2020-01-20T09:37:58.111Z",
        "firstPublishedAt": "2020-01-20T09:37:58.111Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 448,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Using the React Slick Library in Gatsby"
        },
        "slug": {
          "en-US": "using-the-react-slick-library-in-gatsby"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "5ad8RpmaLFIqQY5ZIYiUkn"
            }
          }
        },
        "description": {
          "en-US": "React-Slick is a popular library for creating carousels. There is some great documentation [here](https://react-slick.neostack.com/ \"here\") regarding React Slick. Make sure to include the css files as well! I will give a quick rundown of the React Slick Library used in Gatsby."
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Overview",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Why should you use React Slick for your Carousels in Gatsby? In summary, it is the most popular React Carousel library out there with 8000 stars as of this writing. There is a ton of customization too such as `pause on hover` and `responsive carousels` which let you determine how many images to show at once depending on the screen size.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Installation",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Install the two packages",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "npm i react-slick slick-carousel",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Import the CSS",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Make sure to import the CSS! This is important otherwise your images will not show up!",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "I think the cleanest way is to use the CDN, which is adding the following to the index.html file",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "// before the closing head tag public ->index.html",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "  <link\r\n      rel=\"stylesheet\"\r\n      type=\"text/css\"\r\n      charset=\"UTF-8\"\r\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick.min.css\"\r\n    />\r\n    <link\r\n      rel=\"stylesheet\"\r\n      type=\"text/css\"\r\n      href=\"https://cdnjs.cloudflare.com/ajax/libs/slick-carousel/1.6.0/slick-theme.min.css\"\r\n    />",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Rendering the Slider",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In the file you want your slider to show up we will need two things. 1st thing is the import the Slider component from `react slick`. After will need to call this with some settings.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "import React from 'react';\r\nimport styled from '@emotion/styled';\r\nimport Slider from 'react-slick';\r\n\rimport Image from 'gatsby-image';\r\nimport ImageDataHook from '../hooks/contentful/ImageDataHook';\n\r\r\r\nconst MyFunkySlider= () => {\r\n  const settings = {\r\n    dots: true,\r\n    infinite: true,\r\n    speed: 1000,\r\n    autoplaySpeed: 3000,\r\n    fadeIn: false,\r\n    autoplay: true,\r\n    pauseOnHover: false,\r\n    slidesToShow: 3,\r\n    slidesToScroll: 1,\r\n    responsive: [\r\n      {\r\n        breakpoint: 1000,\r\n        settings: {\r\n          slidesToShow: 2,\r\n          slidesToScroll: 1,\r\n          infinite: true,\r\n          dots: true,\r\n        },\r\n      },\r\n      {\r\n        breakpoint: 600,\r\n        settings: {\r\n          slidesToShow: 1,\r\n          slidesToScroll: 1,\r\n        },\r\n      },\r\n    ],\r\n  };\r\n  const data = imageDataHook();\r\n\r\n  // destructuring\r\n  const {\r\n    pictures,\r\n  } = data;\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "  const StyledImage = styled(Image)`\r\n    border-radius: 1rem;\r\n    max-width: 80rem;\r\n    margin: 0 auto;\r\n    margin-bottom: 2rem;\r\n  `;\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "code"
                      }
                    ],
                    "value": "  return (\r\n        <ImageContainerSlider>\r \r\n          <Slider {...settings}>\r\n            {data.pictures.map((image, i) => (\r\n              <SliderContainer2 key={i}>\r\n                <StyledImage fluid={image.fluid} />\r\n                <span>{image.description}</span>\r\n              </SliderContainer2>\r\n            ))}\r\n          </Slider>\r\n        </ImageContainerSlider>\r\n};\r\n\r\nexport default MyFunkySlider;\r\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Hopefully that is pretty self explanatory. Inside the defined settings variable is where all the slider settings can be tweaked.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2020-01-13T00:00-07:00"
        },
        "tags": {
          "en-US": [
            "contentful",
            "gatsby",
            "react-slick",
            "carousel"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "2bBjXiua1YsAPTsQMqFwei",
        "type": "Entry",
        "createdAt": "2020-01-20T09:38:42.874Z",
        "updatedAt": "2020-01-20T20:26:55.032Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 610,
        "publishedAt": "2020-01-20T20:26:55.032Z",
        "firstPublishedAt": "2020-01-20T20:26:55.032Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 611,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Using Zapier Hooks to send Facebook Lead forms to an email"
        },
        "slug": {
          "en-US": "using-zapier-hooks-to-send-facebook-lead-forms-to-an-email"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "bmbXv4yncX7PacY4R3Z1y"
            }
          }
        },
        "description": {
          "en-US": "In this short article we cover how to link up Facebook Lead Forms with Zapier so that you don't need to download a Facebook CSV file manually to send to your clients or sales team. "
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Overview",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If your goal is lead generation in the form of emails or phone numbers and your spending money on FB I would sure hope you are using FB Lead Forms as a tool to get high quality low cost leads for your business. If not, go set up some FB Lead Forms and come back. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For those using FB Lead forms, you probably are aware of how it can be extremely painful, time consuming to manually download leads to a csv file and then email off to the right people to follow up with.  This is something that should be automated so that your team can easily follow up with the leads as soon as they come in, in real time.  Luckily Zapier's platform allows for easier integration with FB Lead Forms so that you automatically get an email for any lead that comes in. You can also easily integrate this with messenger or your CRM system...the possibilities are endless. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Creating Your First Zap",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "After signing up you can create your first Zap. You will need to create a ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Facebook Lead Ads Zap",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                  "target": {
                    "sys": {
                      "id": "2MQE8qnHZ5ni15Rm2E4Hju",
                      "type": "Link",
                      "linkType": "Asset"
                    }
                  }
                },
                "content": [
                ],
                "nodeType": "embedded-asset-block"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Go through the steps of choosing your FB Account and Page where you have set up your FB Lead form. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You will then need to select the form that your ad is in. When that is done select ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Test & Continue ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Choose an App & Event",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In Zapier, there is a ton of choices for the events we can do once the FB Lead Form is received. We have gmail, Webhooks,  Sales Force and Mail Chimp integration to name a few.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                  "target": {
                    "sys": {
                      "id": "OqdWuK7fzVGrGY789sUgH",
                      "type": "Link",
                      "linkType": "Asset"
                    }
                  }
                },
                "content": [
                ],
                "nodeType": "embedded-asset-block"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In this case we will simple pick ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "gmail",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", since we want to alert ourselves of a lead on FB. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Will set the action to send email. Enter your business account email and the other email addresses you want to forward this lead of to if needed.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "For the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "subject ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "we can simply call it a new Lead.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In the ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "body ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "we can insert the details of the lead from the fb lead form like the name, email and phone number.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Next, hit continue, send some test data and turn on your newly created Zap!",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "15jwOBqpxqSAOy2eOO4S0m"
            }
          }
        },
        "publishDate": {
          "en-US": "2020-01-13T00:00-07:00"
        },
        "tags": {
          "en-US": [
            "fb lead forms",
            "zapier",
            "automation"
          ]
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "1qm3R5FdEcu68uFWxodFvr",
        "type": "Entry",
        "createdAt": "2020-03-05T08:03:25.599Z",
        "updatedAt": "2020-03-06T21:38:35.852Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 335,
        "publishedAt": "2020-03-06T21:38:35.852Z",
        "firstPublishedAt": "2020-03-05T08:20:52.645Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 3,
        "version": 336,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "alexQuasarArticles"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Best IDE Software Integrated Environments 2020"
        },
        "slug": {
          "en-US": "Best-IDE-Software-Integrated-Environments-2020"
        },
        "heroImage": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Asset",
              "id": "sswWUdWOCaFlaxVFEev6D"
            }
          }
        },
        "description": {
          "en-US": "A comprehensive overview of IDEs and the top 10 best ones for 2020\n"
        },
        "bodyRichText": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Overview",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "An Integrated Development Environment (IDE) is a software that consolidates the basic tools needed for software testing and writing. Without IDE, a developer would have to select and manage all these tools separately, but IDE brings all these tools together as a single framework or service. Needless to say, IDE helps a web developer’s work to be more precise and quicker.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "In this guide, we will introduce you to 10 best IDE web development options, which include feature-rich support with multiple code languages.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "But before starting, let’s answer the common question“What is an IDE?” in more detail as well as how to pick the best IDE for your specific needs. ",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Let’s dig in.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "What is an IDE?",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "An Integrated Development Environment (IDE) is a software that you can load onto your computer. They’re designed to streamline the web development process as mentioned earlier.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "An IDE includes these main features:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Text editor\n ",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "– An IDE is a text editor that includes several other specific features.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Compiler or Interpreter",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " ",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      },
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "– An integrated program that translates your code into a computer-readable language. This lets your code run, referred to as having your script executed. An interpreter is a program that’s included. Its purpose is to execute code without it needing to be compiled first.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Build or Make Integration\n",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "– These are included ways to automate necessary processes.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Debugger\n",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "– An included program that tests your code for errors so you can resolve them.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Syntax Highlighter",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " \n– Parts of your code are displayed in colors that correspond with different elements such as properties, tags, attributes, and all the rest. This helps make your code visually easier to scan and see where you made small errors such as forgetting to close a tag.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Graphical User Interface (GUI)\n",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "– This is a screen that’s human-readable and that’s straightforward to navigate as well as accomplish tasks. It can include buttons, a menu, and other similar elements instead of just text and the option to enter a text command.\n",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Other possible features\n",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "– Many IDEs develop and include new features that other IDEs may not offer.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "How to Find the Right IDE for You",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "When deciding on an IDE that you want to use, it’s essential that you first determine what you need out of it. This is so because each IDE can differ between the features that are offered.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "That also means your favorite IDE may differ from that of your peers so just pick the one that works for you at the end of the day.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Features You May Need in Your Pick for Best IDE",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Here’s a short list of the possible features you may need outside of the typical components of an IDE as listed earlier:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Programming language support\n",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "– The IDE you choose should support the code languages you need for your projects.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Customizable text editors",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      },
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " – Some IDEs offer the ability to edit the GUI.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Unit testing\n",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "– This is the option of being able to add mock objects to sections of your code so it can be tested straight away without having to complete that section first.\n",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Source code library\n",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "– Some IDEs have resources that include scripts and source code you can use.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Error diagnostics and reports\n",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "– If you need errors to be detected and listed for you, then this is a feature to consider in your pick for best IDE web development projects need.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Code completion",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " ",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      },
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "– Many IDEs can intelligently finish your code for you. For example, an IDE can detect when you’re ready to close a tag and will close it for you to save you time.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Integrations and plugins\n",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "– with GitHub and Apache’s Subversion",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Code search\n",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "– You can search through your code quickly for whatever element you want.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Hierarchy diagrams\n",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "– Your files can be set up and displayed in a hierarchy for larger projects containing many files and scripts that all work together in a specific way. Displaying a hierarchy diagram can help you see the order in which files are executed as well as which files and scripts are related to each other.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                              {
                                "type": "bold"
                              }
                            ],
                            "value": "Model-driven development (MDD)",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      },
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": " – This is a process where a developer creates a model of what they want to code, then the IDE helps you code it. After that, the IDE automates debugging and testing to some degree so it’s easier for you to do some more debugging and testing on your own.",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Be sure to make note of what features you need when you check out the best IDE for web development below.\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "The 10 Best IDE for Web Development",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This list focuses on the most popular, powerful, feature-rich, and as a result, the best IDE options.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "1. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://visualstudio.microsoft.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "Visual Studio",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "The Visual Studio IDE",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " is one of the most popular and best IDE web development options available. It uses AI to learn from your edits as you code so it can finish your sentences – er, lines of code.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "On top of that, you can collaborate with your team, live, when you’re editing and debugging. You can also share servers, terminals, and comments.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Visual Studio supports web, mobile, app, and game development, ASP.NET, Python, Node.js, C++, Unity as well as support for Azure.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You can also create development environments in the cloud and a lot more while being available for Windows, Mac, Android, iOS, web, and in the cloud.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "2. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.jetbrains.com/idea/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "IntelliJ IDEA",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "IntelliJ IDEA ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " is certainly one of the best IDE for Java. It focuses on features to help you be as productive as possible without cluttering up the GUI.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "It indexes your code to give you relevant suggestions, and to complete your code for you. IntelliJ IDEA also automates several tasks that would otherwise be annoyingly repetitive.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "It’s all that and a bag of chips, er, computer chips because it has an amazing out-of-the-box experience and doesn’t just have to be used for Java.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "While it’s focused on it, it’s still great for SQL, JPQL, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://websitesetup.org/html-tutorial-beginners/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "HTML",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", JavaScript, and other languages including when you inject a language into a string literal. You still get all the benefits of this IDE.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "3. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "http://www.aptana.com/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "Aptana Studio 3",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Aptana Studio 3",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " is one of the best IDE web development options available and it’s also open source.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You can customize the GUI, it has a built-in terminal, Git integration, a debugger as well as a deployment wizard. Autocomplete is also available for HTML, CSS, and JavaScript.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "4. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.jetbrains.com/pycharm/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "PyCharm",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "PyCharm",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " is primarily one of the best IDE for Python, but the premium version also supports other languages for web development.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "It checks for errors as you code and also has autocomplete. It has a sleek, minimal GUI for uncluttered development, and also checks the quality of your code to make sure it’s up to snuff.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "5. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.jetbrains.com/phpstorm/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "PhpStorm",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "PhpStorm",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " is another option to consider for one of the best IDE for web development. It’s focused on PHP, but front-end languages are also fully supported including HTML 5, CSS, Sass, Less, JavaScript, and more.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "It also includes support for major software to create websites such as WordPress, Drupal, ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://websitesetup.org/build-website-with-joomla/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "Joomla!",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ", Laravek, and others.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "It’s easy to navigate, has code autocomplete, debugging and testing tools as well as quick (and safe) refactoring.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "6. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.jetbrains.com/webstorm/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "WebStorm",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "WebStorm ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "is on the list as one of the best IDE for web development because it’s excellent for JavaScript. It includes not only code autocompletion and live error-detection, but it also has a debugger, unit testing, and many integrations such as Git, GitHub, Mercurial, and others.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "It loads quickly on startup and can automate many tedious tasks for increased productivity.\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\n7. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://netbeans.org/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "NetBeans",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "You can’t have a list of the best IDE for web development without including ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "NetBeans",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". It’s among one of the most popular options for the best IDE because it’s a no-nonsense software for Java, JavaScript, PHP, HTML 5, CSS, and more.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "It also helps you create bug-free websites by highlighting code not just syntactically, but also semantically. It also has a lot of powerful refactoring tools while being open source.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "8. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.eclipse.org/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "Eclipse",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "This article also wouldn’t be complete without mentioning ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Eclipse",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": ". It’s an open-source and community-driven IDE for Javascript, mainly, but there are tools, for example, HTML, CSS.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Its contributors include Google, Netflix, Facebook, GE, and Walmart. So, you can be sure you’re getting one of the best IDE for web development.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "9. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.jetbrains.com/ruby/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "RubyMine",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "RubyMine",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": " is focused on Ruby and Ruby on Rails, but it’s also tailored for JavaScript, CSS, Sass, Less, and more. It has syntax and error-highlighting, code completion, an advanced search for any class, file, or symbol, and fast navigation, to name just a few of the features.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "10. ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://www.activestate.com/products/komodo-ide/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "Komodo IDE",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                      {
                        "type": "bold"
                      }
                    ],
                    "value": "Komodo IDE",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "  is one of the best IDE for web development, but it’s a premium option. It has a lot of features including autocomplete, visual debugger, unit testing, add-ons, team collaboration, project management tools, and more.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "It supports Git, Mercurial, Subversion, CVS, Perforce, and Bazaar as well as all programming languages.\n\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "\nWhich is the Best IDE for Web Development?",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-2"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "As mentioned earlier, when you want to know which is the best IDE for web development, it all comes down to your specific needs. Everyone’s needs are different for their projects. Your pick for the best IDE may not be the same as one of your colleagues.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "That’s okay. Sometimes, the smallest feature makes a world of difference.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Best IDE Alternatives",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "heading-3"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "If you’re looking at the list of features IDEs typically have and you’re thinking, “That’s just too much for me,” there are other options available.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Not only are there other IDEs out there, but there are also text editors that have some features in common with IDEs that are popular, quite powerful, and that you may find sufficient for your needs.",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Here’s a short-list of the best IDE alternatives to check out:",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                              "uri": "https://www.vim.org/"
                            },
                            "content": [
                              {
                                "data": {
                                },
                                "marks": [
                                ],
                                "value": "Vim",
                                "nodeType": "text"
                              }
                            ],
                            "nodeType": "hyperlink"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                              "uri": "https://www.sublimetext.com/3"
                            },
                            "content": [
                              {
                                "data": {
                                },
                                "marks": [
                                ],
                                "value": "Sublime Text 3",
                                "nodeType": "text"
                              }
                            ],
                            "nodeType": "hyperlink"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                              "uri": "https://notepad-plus-plus.org/"
                            },
                            "content": [
                              {
                                "data": {
                                },
                                "marks": [
                                ],
                                "value": "NotePad++",
                                "nodeType": "text"
                              }
                            ],
                            "nodeType": "hyperlink"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                              "uri": "https://www.activestate.com/products/komodo-ide/downloads/edit/"
                            },
                            "content": [
                              {
                                "data": {
                                },
                                "marks": [
                                ],
                                "value": "Komodo Edit",
                                "nodeType": "text"
                              }
                            ],
                            "nodeType": "hyperlink"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                              "uri": "http://brackets.io/"
                            },
                            "content": [
                              {
                                "data": {
                                },
                                "marks": [
                                ],
                                "value": "Brackets",
                                "nodeType": "text"
                              }
                            ],
                            "nodeType": "hyperlink"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  },
                  {
                    "data": {
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "content": [
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "",
                            "nodeType": "text"
                          },
                          {
                            "data": {
                              "uri": "https://atom.io/"
                            },
                            "content": [
                              {
                                "data": {
                                },
                                "marks": [
                                ],
                                "value": "Atom",
                                "nodeType": "text"
                              }
                            ],
                            "nodeType": "hyperlink"
                          },
                          {
                            "data": {
                            },
                            "marks": [
                            ],
                            "value": "",
                            "nodeType": "text"
                          }
                        ],
                        "nodeType": "paragraph"
                      }
                    ],
                    "nodeType": "list-item"
                  }
                ],
                "nodeType": "unordered-list"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              },
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "Please see the original article ",
                    "nodeType": "text"
                  },
                  {
                    "data": {
                      "uri": "https://websitesetup.org/best-ide-software/"
                    },
                    "content": [
                      {
                        "data": {
                        },
                        "marks": [
                        ],
                        "value": "here",
                        "nodeType": "text"
                      }
                    ],
                    "nodeType": "hyperlink"
                  },
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        },
        "author": {
          "en-US": {
            "sys": {
              "type": "Link",
              "linkType": "Entry",
              "id": "3WkSZyL46NbNyvv4wkKHws"
            }
          }
        },
        "publishDate": {
          "en-US": "2020-03-05T00:00-06:00"
        },
        "tags": {
          "en-US": [
            "ide",
            "code editor",
            "vs code"
          ]
        },
        "new": {
          "en-US": true
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "3WkSZyL46NbNyvv4wkKHws",
        "type": "Entry",
        "createdAt": "2020-03-05T08:17:47.329Z",
        "updatedAt": "2020-03-05T08:19:32.667Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 74,
        "publishedAt": "2020-03-05T08:19:32.667Z",
        "firstPublishedAt": "2020-03-05T08:19:32.667Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 75,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "person"
          }
        }
      },
      "fields": {
        "name": {
          "en-US": "Jenni "
        },
        "title": {
          "en-US": "Writer "
        },
        "company": {
          "en-US": "Aquasar"
        },
        "shortBio": {
          "en-US": "Jenni is a technical writer and blogger writing"
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "79gJfeSS4SMXY5zSrRPaxw",
        "type": "Entry",
        "createdAt": "2020-04-22T18:25:40.778Z",
        "updatedAt": "2020-04-22T18:30:08.381Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 9,
        "publishedAt": "2020-04-22T18:30:08.381Z",
        "firstPublishedAt": "2020-04-22T18:30:08.381Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 10,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "contentType": {
          "sys": {
            "type": "Link",
            "linkType": "ContentType",
            "id": "realtorProperties"
          }
        }
      },
      "fields": {
        "images": {
          "en-US": [
            {
              "sys": {
                "type": "Link",
                "linkType": "Asset",
                "id": "1yUCBuETFcIX9dHC6BZz7L"
              }
            },
            {
              "sys": {
                "type": "Link",
                "linkType": "Asset",
                "id": "XXE3Hru8fzHGNojbFkucj"
              }
            },
            {
              "sys": {
                "type": "Link",
                "linkType": "Asset",
                "id": "30iiaszehf4IX3Jo9HTPWa"
              }
            }
          ]
        },
        "address": {
          "en-US": "4315 NW 37a Ave"
        },
        "city": {
          "en-US": "Edmonton"
        },
        "description": {
          "en-US": {
            "data": {
            },
            "content": [
              {
                "data": {
                },
                "content": [
                  {
                    "data": {
                    },
                    "marks": [
                    ],
                    "value": "2000 SQFT BUNGALOW WITH OVERSIZED TRIPLE ATTACHED GARAGE, .3 ACRE LOT AND SIDING MILL CREEK RAVINE! This is a truly unique custom and quality built bungalow that is one of a kind. The main floor offers 2 beds, formal and informal living rooms, dining areas (one could easily be turned into a den) and a bright kitchen. The open concept is sure to please, making entertaining friends and family a breeze. The master bedroom is very spacious and features a distinctive layout but has plenty of room to redesign if one wants too. Moving to the heart of this home, you will love the kitchen with built in s.s. appliances, loads of cabinetry and counter space. The basement is fully finished with 2 more beds, rec room, craft room and a wet bar. But lets face it, you're buying this home for its awesome 3 (maybe 4) car garage that has a third overhead door that accesses the backyard, .3 acre massive lot that sides the ravine and the endless possibilities that over 3500 sqft of living space brings! (id:32586)\n\n",
                    "nodeType": "text"
                  }
                ],
                "nodeType": "paragraph"
              }
            ],
            "nodeType": "document"
          }
        }
      }
    }
  ],
  "assets": [
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "4ZgqXGrYXJf6EgJfI5EC60",
        "type": "Asset",
        "createdAt": "2019-04-20T18:49:32.922Z",
        "updatedAt": "2019-10-19T22:58:12.465Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 68,
        "publishedAt": "2019-10-19T22:58:12.465Z",
        "firstPublishedAt": "2019-04-20T19:09:21.248Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 3,
        "version": 69,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Data Analysis"
        },
        "description": {
          "en-US": "SQL to Excel Reporting Tricks to help automate your work flow"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/4ZgqXGrYXJf6EgJfI5EC60/65013a4bd400396a514c3a942e8a8a6f/data-1.jpg",
            "details": {
              "size": 100165,
              "image": {
                "width": 640,
                "height": 426
              }
            },
            "fileName": "data-1.jpg",
            "contentType": "image/jpeg"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "16OwWznMHBDOCjFJG4NnyZ",
        "type": "Asset",
        "createdAt": "2019-04-26T16:59:04.492Z",
        "updatedAt": "2019-04-27T09:55:51.902Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 37,
        "publishedAt": "2019-04-27T09:55:51.902Z",
        "firstPublishedAt": "2019-04-26T16:59:48.878Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 38,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Hiking"
        },
        "description": {
          "en-US": "Malibu Creek State Park"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/16OwWznMHBDOCjFJG4NnyZ/c81dacd99a6aa51364947fc3de7083e3/nat-3-large.jpg",
            "details": {
              "size": 215892,
              "image": {
                "width": 1000,
                "height": 667
              }
            },
            "fileName": "nat-3-large.jpg",
            "contentType": "image/jpeg"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "2HcNwoU6NUg50LD7EjqDKn",
        "type": "Asset",
        "createdAt": "2019-04-27T09:10:07.056Z",
        "updatedAt": "2019-04-27T09:11:36.289Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 55,
        "publishedAt": "2019-04-27T09:11:36.289Z",
        "firstPublishedAt": "2019-04-27T09:11:36.289Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 56,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Alex Quasar"
        },
        "description": {
          "en-US": "About the Author -- Alex Quasar"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/2HcNwoU6NUg50LD7EjqDKn/01799c6c53a24b93354c4d045d8d20fa/profileImage.jpg",
            "details": {
              "size": 25325,
              "image": {
                "width": 460,
                "height": 460
              }
            },
            "fileName": "profileImage.jpg",
            "contentType": "image/jpeg"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "7tJ3kRuTskZKaFQ4Ni4GTB",
        "type": "Asset",
        "createdAt": "2019-05-06T23:04:32.223Z",
        "updatedAt": "2019-05-09T19:33:35.429Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 51,
        "publishedAt": "2019-05-09T19:33:35.429Z",
        "firstPublishedAt": "2019-05-06T23:04:51.416Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 3,
        "version": 52,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "React With Contentful"
        },
        "description": {
          "en-US": "A quick overview of my Contentful experience"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/7tJ3kRuTskZKaFQ4Ni4GTB/e09aefd096630149a2d39949a55b2027/react-contentful.png",
            "details": {
              "size": 14392,
              "image": {
                "width": 1280,
                "height": 905
              }
            },
            "fileName": "react-contentful.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "YWYHfqNFCKRj8fLxiQRbe",
        "type": "Asset",
        "createdAt": "2019-05-09T15:17:09.952Z",
        "updatedAt": "2019-05-09T19:24:19.617Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 26,
        "publishedAt": "2019-05-09T19:24:19.617Z",
        "firstPublishedAt": "2019-05-09T15:19:08.693Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 27,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "PostGres Logo"
        },
        "description": {
          "en-US": "By Daniel Lundin - https://wiki.postgresql.org/images/a/a4/PostgreSQL_logo.3colors.svg, PostgreSQL License, https://commons.wikimedia.org/w/index.php?curid=1395316"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/YWYHfqNFCKRj8fLxiQRbe/485d037b6f33b0a182bb25768629c5cf/1024px-Postgresql_elephant.svg.png",
            "details": {
              "size": 23038,
              "image": {
                "width": 1024,
                "height": 1056
              }
            },
            "fileName": "1024px-Postgresql_elephant.svg.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "7jhejwJ6ftAN2IsU11GQJ1",
        "type": "Asset",
        "createdAt": "2019-05-09T19:19:28.529Z",
        "updatedAt": "2019-05-09T19:22:41.766Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 70,
        "publishedAt": "2019-05-09T19:22:41.765Z",
        "firstPublishedAt": "2019-05-09T19:22:41.765Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 71,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "pandas"
        },
        "description": {
          "en-US": "Quick Summary of Python Pandas basics"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/7jhejwJ6ftAN2IsU11GQJ1/ca9da7df8eab10e205f9d5602de3717e/panda.png",
            "details": {
              "size": 84470,
              "image": {
                "width": 1280,
                "height": 942
              }
            },
            "fileName": "panda.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "5bfG6xbKtjwvkLXxHFZYkP",
        "type": "Asset",
        "createdAt": "2019-05-16T02:50:16.168Z",
        "updatedAt": "2019-05-16T02:55:13.266Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 36,
        "publishedAt": "2019-05-16T02:55:13.266Z",
        "firstPublishedAt": "2019-05-16T02:51:02.264Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 37,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Xampp"
        },
        "description": {
          "en-US": "Popular free open source web server"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/5bfG6xbKtjwvkLXxHFZYkP/8560bf97d4ae10f38b998bbd544f24db/xamp_logo.png",
            "details": {
              "size": 29604,
              "image": {
                "width": 512,
                "height": 512
              }
            },
            "fileName": "xamp_logo.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "2oxUo3GAEgf3b6dmOAJ3yB",
        "type": "Asset",
        "createdAt": "2019-05-19T18:49:11.942Z",
        "updatedAt": "2019-05-19T18:50:03.569Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 43,
        "publishedAt": "2019-05-19T18:50:03.569Z",
        "firstPublishedAt": "2019-05-19T18:50:03.569Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 44,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Keeper"
        },
        "description": {
          "en-US": "Keeping your API keys Safe"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/2oxUo3GAEgf3b6dmOAJ3yB/7656d7508296e835415698334cacb220/lock_and_chain.jpg",
            "details": {
              "size": 55412,
              "image": {
                "width": 640,
                "height": 426
              }
            },
            "fileName": "lock_and_chain.jpg",
            "contentType": "image/jpeg"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "2CKs3yYKcURjz26tMiUdmE",
        "type": "Asset",
        "createdAt": "2019-05-20T05:48:10.072Z",
        "updatedAt": "2019-05-20T05:49:20.544Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 38,
        "publishedAt": "2019-05-20T05:49:20.544Z",
        "firstPublishedAt": "2019-05-20T05:49:20.544Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 39,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Express js"
        },
        "description": {
          "en-US": "Minimalist unopinionated nodejs framework"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/2CKs3yYKcURjz26tMiUdmE/b8418fd797ebd2754e333591a1513898/expressjs.png",
            "details": {
              "size": 18308,
              "image": {
                "width": 2400,
                "height": 1800
              }
            },
            "fileName": "expressjs.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "6cJOb8hbGrj6sO9oJP0YB",
        "type": "Asset",
        "createdAt": "2019-05-20T20:08:34.692Z",
        "updatedAt": "2019-05-20T20:26:30.941Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 45,
        "publishedAt": "2019-05-20T20:26:30.941Z",
        "firstPublishedAt": "2019-05-20T20:09:08.635Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 46,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Heroku Deployment"
        },
        "description": {
          "en-US": "A quick summary of deploying a node js app with Heroku"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/6cJOb8hbGrj6sO9oJP0YB/20a1b6f3731049820196dcd879b82509/heroku_deployment.png",
            "details": {
              "size": 140792,
              "image": {
                "width": 2400,
                "height": 1800
              }
            },
            "fileName": "heroku_deployment.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "7yP6bV2JP8P6344lF0EQE2",
        "type": "Asset",
        "createdAt": "2019-05-24T23:26:55.241Z",
        "updatedAt": "2019-05-24T23:27:38.202Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 57,
        "publishedAt": "2019-05-24T23:27:38.202Z",
        "firstPublishedAt": "2019-05-24T23:27:38.202Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 58,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "The basics of Regular Expressions"
        },
        "description": {
          "en-US": "Any expression or pattern is possible"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/7yP6bV2JP8P6344lF0EQE2/be9875a7fb1ae5d47ff16d76b80e333a/001.png",
            "details": {
              "size": 176214,
              "image": {
                "width": 2400,
                "height": 1800
              }
            },
            "fileName": "001.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "4z42QdeizlIEBY7wl8w0vC",
        "type": "Asset",
        "createdAt": "2019-05-28T04:59:04.584Z",
        "updatedAt": "2019-05-28T05:00:25.519Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 29,
        "publishedAt": "2019-05-28T05:00:25.519Z",
        "firstPublishedAt": "2019-05-28T05:00:25.519Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 30,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Anna Merinky"
        },
        "description": {
          "en-US": "Don't find the fault, find the remedy"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/4z42QdeizlIEBY7wl8w0vC/f7617106faa52dd40fe3100ab6328977/anna_merinsky.jpg",
            "details": {
              "size": 60138,
              "image": {
                "width": 640,
                "height": 427
              }
            },
            "fileName": "anna_merinsky.jpg",
            "contentType": "image/jpeg"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "2aL1WMXM9hQU1TNyVejVks",
        "type": "Asset",
        "createdAt": "2019-05-28T07:53:32.305Z",
        "updatedAt": "2019-05-28T07:55:07.171Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 65,
        "publishedAt": "2019-05-28T07:55:07.171Z",
        "firstPublishedAt": "2019-05-28T07:54:32.716Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 2,
        "version": 66,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Mongo Atlas"
        },
        "description": {
          "en-US": "Connecting Mongo Atlas using mongoose"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/2aL1WMXM9hQU1TNyVejVks/dec403b9d3d86bb71683e1e65a05b9ac/_RPBHM19.png",
            "details": {
              "size": 49569,
              "image": {
                "width": 2400,
                "height": 1800
              }
            },
            "fileName": "$RPBHM19.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "99u4tUDCZ6OIP2m5Q6Pmg",
        "type": "Asset",
        "createdAt": "2019-06-01T06:25:45.076Z",
        "updatedAt": "2019-06-01T06:28:34.882Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 105,
        "publishedAt": "2019-06-01T06:28:34.882Z",
        "firstPublishedAt": "2019-06-01T06:28:34.882Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 106,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Express"
        },
        "description": {
          "en-US": "Getting started with express"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/99u4tUDCZ6OIP2m5Q6Pmg/18b6aed9e9ed72f588d3ce34f98dd939/express_getting_started.png",
            "details": {
              "size": 37739,
              "image": {
                "width": 2400,
                "height": 1800
              }
            },
            "fileName": "express_getting_started.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "4PjcjKuMNUtP0xqlTtihkp",
        "type": "Asset",
        "createdAt": "2019-06-02T17:27:00.509Z",
        "updatedAt": "2019-06-02T17:27:17.822Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 18,
        "publishedAt": "2019-06-02T17:27:17.822Z",
        "firstPublishedAt": "2019-06-02T17:27:17.822Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 19,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Redux "
        },
        "description": {
          "en-US": "Redux Boilerplate"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/4PjcjKuMNUtP0xqlTtihkp/57e5534bff565009900efa289f6f0e18/Redux_Redux-Boilerplate.png",
            "details": {
              "size": 24122,
              "image": {
                "width": 2400,
                "height": 1800
              }
            },
            "fileName": "Redux Redux-Boilerplate.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "1ss3nAfVWRdBGIYUfJqzVW",
        "type": "Asset",
        "createdAt": "2019-06-06T21:21:04.175Z",
        "updatedAt": "2019-06-06T21:21:21.221Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 16,
        "publishedAt": "2019-06-06T21:21:21.221Z",
        "firstPublishedAt": "2019-06-06T21:21:21.221Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 17,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Ui Path "
        },
        "description": {
          "en-US": "Case Study"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/1ss3nAfVWRdBGIYUfJqzVW/e7bbf1374813dd69e6994a34d4dfed96/uipath.png",
            "details": {
              "size": 20187,
              "image": {
                "width": 2400,
                "height": 1800
              }
            },
            "fileName": "uipath.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "3T1rSqWaYsHXwoDd9Zt6XA",
        "type": "Asset",
        "createdAt": "2019-06-09T23:51:46.359Z",
        "updatedAt": "2019-06-09T23:52:51.642Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 91,
        "publishedAt": "2019-06-09T23:52:51.642Z",
        "firstPublishedAt": "2019-06-09T23:52:51.642Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 92,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Resources and Links"
        },
        "description": {
          "en-US": "Web Developer resources I use on a day to day as a freelance web developer"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/3T1rSqWaYsHXwoDd9Zt6XA/75dd1728c36dae06490808a99fcef4d7/chain.jpg",
            "details": {
              "size": 26750,
              "image": {
                "width": 640,
                "height": 426
              }
            },
            "fileName": "chain.jpg",
            "contentType": "image/jpeg"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "3TamBfAkJ6S2zIOTIE1RMy",
        "type": "Asset",
        "createdAt": "2019-06-20T23:28:16.910Z",
        "updatedAt": "2019-06-20T23:30:31.283Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 63,
        "publishedAt": "2019-06-20T23:30:31.283Z",
        "firstPublishedAt": "2019-06-20T23:30:31.283Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 64,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "ExpressJS Validation"
        },
        "description": {
          "en-US": "Validating fields using express-validator library"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/3TamBfAkJ6S2zIOTIE1RMy/93be3d21346be0b481619af6483d5580/ExpressJs-Validation.png",
            "details": {
              "size": 32458,
              "image": {
                "width": 2400,
                "height": 1800
              }
            },
            "fileName": "ExpressJs-Validation.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "211cEJdRLm6ENDFc9Pnx0e",
        "type": "Asset",
        "createdAt": "2019-06-22T21:44:48.584Z",
        "updatedAt": "2019-06-22T21:45:48.448Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 69,
        "publishedAt": "2019-06-22T21:45:48.448Z",
        "firstPublishedAt": "2019-06-22T21:45:48.448Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 70,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Quick Landing Pages No Fuss"
        },
        "description": {
          "en-US": "Using HTML 5 to create a quick custom landing page"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/211cEJdRLm6ENDFc9Pnx0e/e664439d755faa51a55fe90a46c4aada/pic_head.jpg",
            "details": {
              "size": 354144,
              "image": {
                "width": 1920,
                "height": 1355
              }
            },
            "fileName": "pic_head.jpg",
            "contentType": "image/jpeg"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "2WAa7r5uFELddB0WoKWdYM",
        "type": "Asset",
        "createdAt": "2019-06-22T21:48:56.021Z",
        "updatedAt": "2019-06-22T21:50:00.917Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 93,
        "publishedAt": "2019-06-22T21:50:00.917Z",
        "firstPublishedAt": "2019-06-22T21:50:00.917Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 94,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "html5 up"
        },
        "description": {
          "en-US": "Blazingly fast landing pages and website with html5 templates"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/2WAa7r5uFELddB0WoKWdYM/7b82f74f54d560e54c6d35d1f39bce5d/html5_up.jpg",
            "details": {
              "size": 98623,
              "image": {
                "width": 640,
                "height": 451
              }
            },
            "fileName": "html5_up.jpg",
            "contentType": "image/jpeg"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "7MzifYFKnSFYBkCrglUJ6o",
        "type": "Asset",
        "createdAt": "2019-06-24T16:51:33.313Z",
        "updatedAt": "2019-06-24T16:52:09.931Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 48,
        "publishedAt": "2019-06-24T16:52:09.931Z",
        "firstPublishedAt": "2019-06-24T16:52:09.931Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 49,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Web Development 2019"
        },
        "description": {
          "en-US": "Overview of Tools and Tech in 2019"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/7MzifYFKnSFYBkCrglUJ6o/9265c12d671a9d8ec0a479610325597f/web_dev_2019.png",
            "details": {
              "size": 24995,
              "image": {
                "width": 1600,
                "height": 1200
              }
            },
            "fileName": "web_dev_2019.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "2KlB7uoCYfUp1czK5sPYsu",
        "type": "Asset",
        "createdAt": "2019-06-27T17:17:38.431Z",
        "updatedAt": "2019-06-27T17:19:05.297Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 51,
        "publishedAt": "2019-06-27T17:19:05.297Z",
        "firstPublishedAt": "2019-06-27T17:19:05.297Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 52,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "React Hooks Intro"
        },
        "description": {
          "en-US": "A simplified overview of React Hooks"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/2KlB7uoCYfUp1czK5sPYsu/50417946f93b7bdfce3114a82805144b/react_hooks.png",
            "details": {
              "size": 47175,
              "image": {
                "width": 1600,
                "height": 1200
              }
            },
            "fileName": "react_hooks.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "6RWlUjNig50DgggZF9V9rW",
        "type": "Asset",
        "createdAt": "2019-07-15T18:10:55.405Z",
        "updatedAt": "2019-07-15T18:13:31.026Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 32,
        "publishedAt": "2019-07-15T18:13:31.026Z",
        "firstPublishedAt": "2019-07-15T18:13:31.026Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 33,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "APIs with Mongoose"
        },
        "description": {
          "en-US": "Using Express with Mongoose Models"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/6RWlUjNig50DgggZF9V9rW/dc1e3e996d04a1354ff2d231a575b04a/apis_with_mongoose.png",
            "details": {
              "size": 27449,
              "image": {
                "width": 1600,
                "height": 1200
              }
            },
            "fileName": "apis with mongoose.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "ipUEWWTCcqYCIW8g1UH0V",
        "type": "Asset",
        "createdAt": "2019-07-18T22:58:24.984Z",
        "updatedAt": "2019-07-18T23:06:50.313Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 23,
        "publishedAt": "2019-07-18T23:06:50.313Z",
        "firstPublishedAt": "2019-07-18T23:06:50.313Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 24,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Aggregating data with mongoose"
        },
        "description": {
          "en-US": "Aggregating data with mongoose"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/ipUEWWTCcqYCIW8g1UH0V/06373bdd87daab57723e585dfa28958e/Aggregating_data_with_mongoose.png",
            "details": {
              "size": 36100,
              "image": {
                "width": 1600,
                "height": 1200
              }
            },
            "fileName": "Aggregating data with mongoose.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "229PlnUW2r5QfOlU4OaVC8",
        "type": "Asset",
        "createdAt": "2019-07-20T20:57:07.535Z",
        "updatedAt": "2019-07-20T20:57:32.200Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 30,
        "publishedAt": "2019-07-20T20:57:32.200Z",
        "firstPublishedAt": "2019-07-20T20:57:32.200Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 31,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "tableau dynamic dates"
        },
        "description": {
          "en-US": "Dynamic dates in Tableau"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/229PlnUW2r5QfOlU4OaVC8/5658aa622feaed5324290a6d05062bc1/tableau-dynamic-dates.png",
            "details": {
              "size": 24718,
              "image": {
                "width": 1600,
                "height": 1200
              }
            },
            "fileName": "tableau-dynamic-dates.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "7o2BaLpSK1c7EloZ7nu1Vk",
        "type": "Asset",
        "createdAt": "2019-07-20T21:09:49.459Z",
        "updatedAt": "2019-07-20T21:10:37.693Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 47,
        "publishedAt": "2019-07-20T21:10:37.693Z",
        "firstPublishedAt": "2019-07-20T21:10:37.693Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 48,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Favicons"
        },
        "description": {
          "en-US": "Everything you need to know to add some favicons to your react app"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/7o2BaLpSK1c7EloZ7nu1Vk/443da64c27c4b64ffc1832040421072c/favicons.png",
            "details": {
              "size": 11279,
              "image": {
                "width": 1600,
                "height": 1200
              }
            },
            "fileName": "favicons.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "7ANmVymGEOaar3aNLUXtBk",
        "type": "Asset",
        "createdAt": "2019-07-22T19:48:27.415Z",
        "updatedAt": "2019-07-22T19:48:56.989Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 21,
        "publishedAt": "2019-07-22T19:48:56.989Z",
        "firstPublishedAt": "2019-07-22T19:48:56.989Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 22,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Enable Custom Search API"
        },
        "description": {
          "en-US": "Enable Custom Search API Image"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/7ANmVymGEOaar3aNLUXtBk/ee7467ad7ec3add06f629510a155d90d/Enable_Custom_Search_API.PNG",
            "details": {
              "size": 8214,
              "image": {
                "width": 600,
                "height": 246
              }
            },
            "fileName": "Enable Custom Search API.PNG",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "EZxOxl5Q6r9lIoJaOBnTh",
        "type": "Asset",
        "createdAt": "2019-07-22T20:27:04.664Z",
        "updatedAt": "2019-07-22T20:27:15.302Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 4,
        "publishedAt": "2019-07-22T20:27:15.302Z",
        "firstPublishedAt": "2019-07-22T20:27:15.302Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 5,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Search Engine ID"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/EZxOxl5Q6r9lIoJaOBnTh/258e3f52143db088d02d6ff3920032ba/Search_Engine_ID.PNG",
            "details": {
              "size": 4030,
              "image": {
                "width": 612,
                "height": 53
              }
            },
            "fileName": "Search Engine ID.PNG",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "7FGU80SFJeo06Zofgj7WL2",
        "type": "Asset",
        "createdAt": "2019-07-22T20:58:25.676Z",
        "updatedAt": "2019-07-22T21:01:29.422Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 57,
        "publishedAt": "2019-07-22T21:01:29.422Z",
        "firstPublishedAt": "2019-07-22T21:01:29.422Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 58,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Google Custom Search w/ React Redux"
        },
        "description": {
          "en-US": "Using Google Custom Search in a React/ Redux app"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/7FGU80SFJeo06Zofgj7WL2/ab136814713a76ae64557011a4831d58/Google_Custom_Search_with_React_and_Redux.png",
            "details": {
              "size": 144017,
              "image": {
                "width": 1600,
                "height": 1200
              }
            },
            "fileName": "Google Custom Search with React and Redux.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "6ZP25WSCaur4DG6OLL8chp",
        "type": "Asset",
        "createdAt": "2019-10-08T19:27:24.539Z",
        "updatedAt": "2019-10-08T19:31:01.424Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 33,
        "publishedAt": "2019-10-08T19:31:01.424Z",
        "firstPublishedAt": "2019-10-08T19:31:01.424Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 34,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Express Logo"
        },
        "description": {
          "en-US": "Logo used for all Alex Quasar Express articles"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/6ZP25WSCaur4DG6OLL8chp/36af3c1e1c1c96f183e57566efc3509f/express.png",
            "details": {
              "size": 82234,
              "image": {
                "width": 840,
                "height": 701
              }
            },
            "fileName": "express.png",
            "contentType": "image/jpeg"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "6InRD35HLJjYRdVZNFGZHf",
        "type": "Asset",
        "createdAt": "2019-10-08T19:55:38.500Z",
        "updatedAt": "2019-10-08T19:56:59.721Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 47,
        "publishedAt": "2019-10-08T19:56:59.721Z",
        "firstPublishedAt": "2019-10-08T19:56:59.721Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 48,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "React Logo"
        },
        "description": {
          "en-US": "This is the React Logo to use for all React related articles on alexquasar.com"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/6InRD35HLJjYRdVZNFGZHf/b23f026901aea9bdd58d05da2725fca3/react.png",
            "details": {
              "size": 57063,
              "image": {
                "width": 1200,
                "height": 848
              }
            },
            "fileName": "react.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "3N8fBuH0PhC08GyOX6YrH3",
        "type": "Asset",
        "createdAt": "2019-10-09T23:20:42.467Z",
        "updatedAt": "2019-10-09T23:21:31.353Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 51,
        "publishedAt": "2019-10-09T23:21:31.353Z",
        "firstPublishedAt": "2019-10-09T23:21:31.353Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 52,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Netlify Logo"
        },
        "description": {
          "en-US": "This is the logo for Netlify used in Aquasar.io blog for non commercial purposes."
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/3N8fBuH0PhC08GyOX6YrH3/7537531506883864d5d9557e22c02078/netlify.png",
            "details": {
              "size": 119735,
              "image": {
                "width": 500,
                "height": 500
              }
            },
            "fileName": "netlify.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "kjchmjuZzccxBSCS01pO9",
        "type": "Asset",
        "createdAt": "2019-10-13T06:34:30.910Z",
        "updatedAt": "2019-10-13T06:35:06.715Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 17,
        "publishedAt": "2019-10-13T06:35:06.715Z",
        "firstPublishedAt": "2019-10-13T06:35:06.715Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 18,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Mongo DB Logo"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/kjchmjuZzccxBSCS01pO9/2562d2d75e9df30b0b8160c9cdb565a3/mongodb-logo.png",
            "details": {
              "size": 18211,
              "image": {
                "width": 400,
                "height": 277
              }
            },
            "fileName": "mongodb-logo.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "5ad8RpmaLFIqQY5ZIYiUkn",
        "type": "Asset",
        "createdAt": "2019-10-17T01:42:18.082Z",
        "updatedAt": "2019-10-17T01:42:47.230Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 36,
        "publishedAt": "2019-10-17T01:42:47.230Z",
        "firstPublishedAt": "2019-10-17T01:42:47.230Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 37,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "gatsby logo png"
        },
        "description": {
          "en-US": "This is the gatsby icon logo to use for all Alex Quasar Articles"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/5ad8RpmaLFIqQY5ZIYiUkn/4a51d6ceca611da8400cd0e60d97fc11/Gatsby.png",
            "details": {
              "size": 21212,
              "image": {
                "width": 512,
                "height": 512
              }
            },
            "fileName": "Gatsby.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "2TdvrbJ1FG8PwCuacgUmN9",
        "type": "Asset",
        "createdAt": "2019-10-19T22:56:30.674Z",
        "updatedAt": "2019-10-19T22:56:49.461Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 18,
        "publishedAt": "2019-10-19T22:56:49.461Z",
        "firstPublishedAt": "2019-10-19T22:56:49.461Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 19,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "github"
        },
        "description": {
          "en-US": "this is the github logo"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/2TdvrbJ1FG8PwCuacgUmN9/1060c47a3d2be4cacced1d7e300eba83/github.png",
            "details": {
              "size": 129886,
              "image": {
                "width": 2400,
                "height": 2400
              }
            },
            "fileName": "github.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "3zGDp3gWMN040WEnPYXCyA",
        "type": "Asset",
        "createdAt": "2019-11-09T06:43:18.508Z",
        "updatedAt": "2019-11-09T06:44:11.383Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 19,
        "publishedAt": "2019-11-09T06:44:11.383Z",
        "firstPublishedAt": "2019-11-09T06:44:11.383Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 20,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Logo Image"
        },
        "description": {
          "en-US": "Gatsby Image"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/3zGDp3gWMN040WEnPYXCyA/4fcfeee8597b5567bed6ce4325106cd3/Aquasar_Logo.jpg",
            "details": {
              "size": 27672,
              "image": {
                "width": 163,
                "height": 164
              }
            },
            "fileName": "Aquasar Logo.jpg",
            "contentType": "image/jpeg"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "5YyAZbyurUJMygpYoj72Sg",
        "type": "Asset",
        "createdAt": "2019-11-12T19:54:06.927Z",
        "updatedAt": "2019-11-12T19:54:15.601Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 4,
        "publishedAt": "2019-11-12T19:54:15.601Z",
        "firstPublishedAt": "2019-11-12T19:54:15.601Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 5,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Ecommerce FashionTwo Bags ContentModel"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/5YyAZbyurUJMygpYoj72Sg/28c89ed2ab54e86099030b06cc85ebe2/Ecommerce_FashionTwo_Bags_ContentModel.png",
            "details": {
              "size": 38612,
              "image": {
                "width": 794,
                "height": 788
              }
            },
            "fileName": "Ecommerce FashionTwo Bags ContentModel.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "2bC86pMHrLQOLkMwnYWAg2",
        "type": "Asset",
        "createdAt": "2019-11-14T20:21:27.486Z",
        "updatedAt": "2019-11-14T20:21:43.530Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 17,
        "publishedAt": "2019-11-14T20:21:43.530Z",
        "firstPublishedAt": "2019-11-14T20:21:43.530Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 18,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Netlify Environment Variables"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/2bC86pMHrLQOLkMwnYWAg2/557e479a05b2584e97bf7029ff1d19ba/Netlify_-_Environment_Variables2.png",
            "details": {
              "size": 22438,
              "image": {
                "width": 434,
                "height": 544
              }
            },
            "fileName": "Netlify - Environment Variables2.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "4be5KFEEdih8px1J8JOIrn",
        "type": "Asset",
        "createdAt": "2019-11-14T20:33:51.906Z",
        "updatedAt": "2019-11-14T20:34:08.055Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 4,
        "publishedAt": "2019-11-14T20:34:08.055Z",
        "firstPublishedAt": "2019-11-14T20:34:08.055Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 5,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "SnipCart Add Domains"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/4be5KFEEdih8px1J8JOIrn/9253ca0c53ecf5186865614038adacde/SnipCart_Add_Domains.png",
            "details": {
              "size": 28794,
              "image": {
                "width": 1081,
                "height": 392
              }
            },
            "fileName": "SnipCart Add Domains.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "7uu4ZHk5GkUX9Urb1CWd7N",
        "type": "Asset",
        "createdAt": "2020-01-11T15:11:58.267Z",
        "updatedAt": "2020-01-11T15:12:09.784Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 4,
        "publishedAt": "2020-01-11T15:12:09.784Z",
        "firstPublishedAt": "2020-01-11T15:12:09.784Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 5,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "wp"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/7uu4ZHk5GkUX9Urb1CWd7N/1e16ac06a975e4440305fd600f0471b1/wp.png",
            "details": {
              "size": 251723,
              "image": {
                "width": 960,
                "height": 960
              }
            },
            "fileName": "wp.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "bmbXv4yncX7PacY4R3Z1y",
        "type": "Asset",
        "createdAt": "2020-01-20T09:41:20.599Z",
        "updatedAt": "2020-01-20T09:41:49.690Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 31,
        "publishedAt": "2020-01-20T09:41:49.690Z",
        "firstPublishedAt": "2020-01-20T09:41:49.690Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 32,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "zapier-logo"
        },
        "description": {
          "en-US": "Zapier is a automation workflow platform"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/bmbXv4yncX7PacY4R3Z1y/6845bbbae14f5da6129722b444b35df8/zapier-logo-png-transparent.png",
            "details": {
              "size": 69554,
              "image": {
                "width": 2400,
                "height": 2400
              }
            },
            "fileName": "zapier-logo-png-transparent.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "2MQE8qnHZ5ni15Rm2E4Hju",
        "type": "Asset",
        "createdAt": "2020-01-20T20:13:26.735Z",
        "updatedAt": "2020-01-20T20:13:48.071Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 16,
        "publishedAt": "2020-01-20T20:13:48.071Z",
        "firstPublishedAt": "2020-01-20T20:13:48.071Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 17,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Make A New Zap"
        },
        "description": {
          "en-US": "Create a new Zap in Zapier"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/2MQE8qnHZ5ni15Rm2E4Hju/5c4d38839a83b2bb4f6a9c3d26601db0/Make_A_New_Zap.PNG",
            "details": {
              "size": 41148,
              "image": {
                "width": 927,
                "height": 526
              }
            },
            "fileName": "Make A New Zap.PNG",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "OqdWuK7fzVGrGY789sUgH",
        "type": "Asset",
        "createdAt": "2020-01-20T20:26:15.816Z",
        "updatedAt": "2020-01-20T20:26:31.730Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 14,
        "publishedAt": "2020-01-20T20:26:31.730Z",
        "firstPublishedAt": "2020-01-20T20:26:31.730Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 15,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "Zapier - Events"
        },
        "description": {
          "en-US": "Events in Zapier"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/OqdWuK7fzVGrGY789sUgH/2ae0d4a8d04c9e02b57bfb9a7ab51a2f/Zapier_-_Events.PNG",
            "details": {
              "size": 41516,
              "image": {
                "width": 843,
                "height": 525
              }
            },
            "fileName": "Zapier - Events.PNG",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "7BR4lNQ9TWUMeoCjc49gz6",
        "type": "Asset",
        "createdAt": "2020-02-14T22:28:03.876Z",
        "updatedAt": "2020-02-14T22:28:25.580Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 3,
        "publishedAt": "2020-02-14T22:28:25.580Z",
        "firstPublishedAt": "2020-02-14T22:28:25.580Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 4,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "custom DNS Name Servers"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/7BR4lNQ9TWUMeoCjc49gz6/a609e9a9af75bb8fb73555cb03ce792a/custom_DNS_Name_Servers.PNG",
            "details": {
              "size": 7648,
              "image": {
                "width": 829,
                "height": 220
              }
            },
            "fileName": "custom DNS Name Servers.PNG",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "5G5iUHK4vYoegocmcgM6rq",
        "type": "Asset",
        "createdAt": "2020-02-14T22:37:26.695Z",
        "updatedAt": "2020-02-14T22:37:39.113Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 3,
        "publishedAt": "2020-02-14T22:37:39.113Z",
        "firstPublishedAt": "2020-02-14T22:37:39.113Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 4,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "netlify-add-custom-domain"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/5G5iUHK4vYoegocmcgM6rq/1d0ddb60cfa8a01844fcab11a19b8d3c/netlify-add-custom-domain.PNG",
            "details": {
              "size": 39274,
              "image": {
                "width": 1258,
                "height": 470
              }
            },
            "fileName": "netlify-add-custom-domain.PNG",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "3SM733YvelHGS3FIw1iCoy",
        "type": "Asset",
        "createdAt": "2020-02-14T22:49:12.414Z",
        "updatedAt": "2020-02-14T22:49:49.736Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 7,
        "publishedAt": "2020-02-14T22:49:49.736Z",
        "firstPublishedAt": "2020-02-14T22:49:49.736Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 8,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "pseudo-custom-domain-name-netlify"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/3SM733YvelHGS3FIw1iCoy/c59658e64f05a927c9843b82811072fd/pseudo-custom-domain-name.PNG",
            "details": {
              "size": 13779,
              "image": {
                "width": 926,
                "height": 248
              }
            },
            "fileName": "pseudo-custom-domain-name.PNG",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "3lZCUtbGgjv3EiwbitgeZo",
        "type": "Asset",
        "createdAt": "2020-02-14T22:59:22.346Z",
        "updatedAt": "2020-02-14T22:59:30.712Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 3,
        "publishedAt": "2020-02-14T22:59:30.712Z",
        "firstPublishedAt": "2020-02-14T22:59:30.712Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 4,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "add and verify custom domain"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/3lZCUtbGgjv3EiwbitgeZo/f88973dfff6456926b63c76dae98c7b6/add_and_verify_custom_domain.PNG",
            "details": {
              "size": 19747,
              "image": {
                "width": 759,
                "height": 379
              }
            },
            "fileName": "add and verify custom domain.PNG",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "2HOUn37bXX3hwuThDip4Ad",
        "type": "Asset",
        "createdAt": "2020-02-14T23:04:49.211Z",
        "updatedAt": "2020-02-14T23:05:01.300Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 3,
        "publishedAt": "2020-02-14T23:05:01.300Z",
        "firstPublishedAt": "2020-02-14T23:05:01.300Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 4,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "setup netlify dns"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/2HOUn37bXX3hwuThDip4Ad/357c78857cc714fe3ea33ad533920cdc/setup_netlify_dns.PNG",
            "details": {
              "size": 40003,
              "image": {
                "width": 927,
                "height": 469
              }
            },
            "fileName": "setup netlify dns.PNG",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "6pvs84PWWhp2RBKiAcMgOG",
        "type": "Asset",
        "createdAt": "2020-02-14T23:07:57.255Z",
        "updatedAt": "2020-02-14T23:08:13.753Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 3,
        "publishedAt": "2020-02-14T23:08:13.753Z",
        "firstPublishedAt": "2020-02-14T23:08:13.753Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 4,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "setup netlify dns for your domain"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/6pvs84PWWhp2RBKiAcMgOG/0bb822539ddf57a9d685c39efcb3bd45/setup_netlify_dns_for_your_domain.PNG",
            "details": {
              "size": 26766,
              "image": {
                "width": 882,
                "height": 631
              }
            },
            "fileName": "setup netlify dns for your domain.PNG",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "sswWUdWOCaFlaxVFEev6D",
        "type": "Asset",
        "createdAt": "2020-03-05T08:06:31.828Z",
        "updatedAt": "2020-03-05T08:07:24.551Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 26,
        "publishedAt": "2020-03-05T08:07:24.551Z",
        "firstPublishedAt": "2020-03-05T08:06:56.961Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 3,
        "version": 27,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "vs-code"
        },
        "description": {
          "en-US": "VS Code Logo"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/sswWUdWOCaFlaxVFEev6D/1bc4af1d7a0d1ba70880413108c6d0e3/vs-code.png",
            "details": {
              "size": 69498,
              "image": {
                "width": 1200,
                "height": 1200
              }
            },
            "fileName": "vs-code.png",
            "contentType": "image/png"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "1yUCBuETFcIX9dHC6BZz7L",
        "type": "Asset",
        "createdAt": "2020-04-22T18:27:13.502Z",
        "updatedAt": "2020-04-22T18:27:43.375Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 3,
        "publishedAt": "2020-04-22T18:27:43.375Z",
        "firstPublishedAt": "2020-04-22T18:27:43.375Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 4,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "image"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/1yUCBuETFcIX9dHC6BZz7L/de476fd66ad7b79224b0bab135b460e1/image.jpeg",
            "details": {
              "size": 143731,
              "image": {
                "width": 992,
                "height": 745
              }
            },
            "fileName": "image.jpeg",
            "contentType": "image/jpeg"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "XXE3Hru8fzHGNojbFkucj",
        "type": "Asset",
        "createdAt": "2020-04-22T18:28:37.760Z",
        "updatedAt": "2020-04-22T18:28:54.577Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 4,
        "publishedAt": "2020-04-22T18:28:54.577Z",
        "firstPublishedAt": "2020-04-22T18:28:54.577Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 5,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "https://assets-listings.rew.ca/crea_ddf/ereb/E4193704/20200409174145/02.jpeg"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/XXE3Hru8fzHGNojbFkucj/7124e9386c037fb17546a501b9190155/02.jpeg",
            "details": {
              "size": 110579,
              "image": {
                "width": 1280,
                "height": 854
              }
            },
            "fileName": "02.jpeg",
            "contentType": "image/jpeg"
          }
        }
      }
    },
    {
      "sys": {
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "id": "30iiaszehf4IX3Jo9HTPWa",
        "type": "Asset",
        "createdAt": "2020-04-22T18:29:34.670Z",
        "updatedAt": "2020-04-22T18:29:44.636Z",
        "environment": {
          "sys": {
            "id": "master",
            "type": "Link",
            "linkType": "Environment"
          }
        },
        "publishedVersion": 4,
        "publishedAt": "2020-04-22T18:29:44.636Z",
        "firstPublishedAt": "2020-04-22T18:29:44.636Z",
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "publishedCounter": 1,
        "version": 5,
        "publishedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        }
      },
      "fields": {
        "title": {
          "en-US": "https://assets-listings.rew.ca/crea_ddf/ereb/E4193704/20200409174145/03.jpeg"
        },
        "file": {
          "en-US": {
            "url": "//images.ctfassets.net/rhk3uw4rws0r/30iiaszehf4IX3Jo9HTPWa/ffb4af0b35d0b8404ca1181e1b9a2f9c/03.jpeg",
            "details": {
              "size": 108812,
              "image": {
                "width": 1280,
                "height": 854
              }
            },
            "fileName": "03.jpeg",
            "contentType": "image/jpeg"
          }
        }
      }
    }
  ],
  "locales": [
    {
      "name": "U.S. English",
      "code": "en-US",
      "fallbackCode": null,
      "default": true,
      "contentManagementApi": true,
      "contentDeliveryApi": true,
      "optional": false,
      "sys": {
        "type": "Locale",
        "id": "3ol5MkhEnxwxLUgGK0CDP1",
        "version": 2,
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "environment": {
          "sys": {
            "type": "Link",
            "linkType": "Environment",
            "id": "master"
          }
        },
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "createdAt": "2019-04-17T00:55:36Z",
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedAt": "2019-04-17T00:55:58Z"
      }
    }
  ],
  "webhooks": [
    {
      "name": "Contentful Hook",
      "url": "https://api.netlify.com/build_hooks/5da2cd01850f2b53ecd8f3cd",
      "httpBasicUsername": null,
      "topics": [
        "Entry.publish",
        "Entry.unpublish"
      ],
      "filters": [
        {
          "equals": [
            {
              "doc": "sys.environment.sys.id"
            },
            "master"
          ]
        }
      ],
      "transformation": null,
      "sys": {
        "type": "WebhookDefinition",
        "id": "7MSYTEgEIYQD3waWmXhUrC",
        "version": 2,
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "createdAt": "2019-10-09T07:54:52Z",
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedAt": "2020-01-11T15:19:34Z"
      },
      "headers": [
      ]
    },
    {
      "name": "Algolia - Index entries",
      "url": "https://1Z5MST1RUK.algolia.net/1/indexes/articles/{ /payload/sys/id }",
      "httpBasicUsername": null,
      "topics": [
        "ContentType.publish",
        "Entry.publish"
      ],
      "filters": [
        {
          "equals": [
            {
              "doc": "sys.environment.sys.id"
            },
            "master"
          ]
        }
      ],
      "transformation": {
        "method": "PUT",
        "contentType": "application/json; charset=utf-8"
      },
      "sys": {
        "type": "WebhookDefinition",
        "id": "5MGW4A9XYOJiRKuCt0BdJ7",
        "version": 1,
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "createdAt": "2020-02-03T10:34:55Z",
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedAt": "2020-02-03T10:44:17Z"
      },
      "headers": [
        {
          "key": "X-Algolia-Application-Id",
          "value": "1Z5MST1RUK"
        },
        {
          "key": "X-Algolia-API-Key",
          "secret": true
        }
      ]
    },
    {
      "name": "Algolia - Delete unpublished entries",
      "url": "https://1Z5MST1RUK.algolia.net/1/indexes/articles/{ /payload/sys/id }",
      "httpBasicUsername": null,
      "topics": [
        "Entry.unpublish"
      ],
      "filters": [
        {
          "equals": [
            {
              "doc": "sys.environment.sys.id"
            },
            "master"
          ]
        }
      ],
      "transformation": {
        "method": "DELETE"
      },
      "sys": {
        "type": "WebhookDefinition",
        "id": "5MQXAboIsxsHTS2Svdb5W4",
        "version": 0,
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "createdAt": "2020-02-03T10:34:55Z",
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedAt": "2020-02-03T10:34:55Z"
      },
      "headers": [
        {
          "key": "X-Algolia-Application-Id",
          "value": "1Z5MST1RUK"
        },
        {
          "key": "X-Algolia-API-Key",
          "secret": true
        }
      ]
    },
    {
      "name": "Gatsby Builds",
      "url": "https://webhook.gatsbyjs.com/hooks/data_source/publish/74024d9d-9ae3-4ca7-895b-78e5a2f63b1e",
      "httpBasicUsername": null,
      "topics": [
        "ContentType.publish",
        "Entry.publish",
        "Asset.publish"
      ],
      "filters": null,
      "transformation": null,
      "sys": {
        "type": "WebhookDefinition",
        "id": "gatsby-builds",
        "version": 0,
        "space": {
          "sys": {
            "type": "Link",
            "linkType": "Space",
            "id": "rhk3uw4rws0r"
          }
        },
        "createdBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "createdAt": "2020-04-05T04:40:09Z",
        "updatedBy": {
          "sys": {
            "type": "Link",
            "linkType": "User",
            "id": "0QEtUnAlGCaAonmc8xYeuz"
          }
        },
        "updatedAt": "2020-04-05T04:40:09Z"
      },
      "headers": [
      ]
    }
  ],
  "roles": [
  ]
}